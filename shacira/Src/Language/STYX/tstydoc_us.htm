<HPAT nl><br></HPAT>
<HPAT tkmsec tkmdfn>
<tbody><TR valign=top><TD align=left>&nbsp;<TD align=left>&nbsp;<TD align=right>&nbsp;<TD align=justify>&nbsp;<TD>&nbsp;
</HPAT>

<HPAT ntmsec ntmdfn>
<tbody><TR valign=top><TD align=left>&nbsp;<TD align=left>&nbsp;<TD align=right>&nbsp;<TD align=justify>&nbsp;<TD>&nbsp;
</HPAT>

<HPAT mbrsec_old mbrrefdfn mbroprdfn mbrvaldfn>&nbsp;&nbsp;&nbsp;&nbsp;</HPAT>
<HPAT mbrsec mbrrefdfn mbroprdfn mbrvaldfn>    </HPAT>

<HPAT prdsec prddfn1 prddfnn>
<TR valign=top><TD align=left>&nbsp;<TD align=left>&nbsp;<TD align=right>&nbsp;<TD align=justify>&nbsp;<TD>&nbsp;
</HPAT>

<HPAT comsec>
<TR valign=top><TH colspan=5 align=left><PRE>&grpcom;</PRE></TH></TR>
</HPAT>

<HPAT ntmdfn>
&optgrpcom;
&prdsec;
</HPAT>

<HPAT tkmdfn>
&optgrpcom;
&prdsec;
</HPAT>

<HPAT prddfn1>
<TR valign=top><TD align=left><B>&dfncat;</B><TD align=left><B><font color=red><a Name="&dfnid;"></a>&dfnid;</font>&nbsp;&dfnopt;&nbsp;</B><TD align=right><B>::&nbsp;</B><TD align=justify><P><B>&mbrsec;</B><PRE>&dfncom;</PRE></P><TD>&nbsp;
</HPAT>

<HPAT prddfnn>
<TR valign=top><TD align=left>&nbsp;<TD align=left>&nbsp;<TD align=right><B>&nbsp;|&nbsp;</B><TD align=justify><P><B>&mbrsec;</B><PRE>&dfncom;</PRE></P><TD>&nbsp;
</HPAT>

<HPAT mbrrefdfn><a href="#&mbrid;">&mbrid;</a></HPAT>

<HPAT mbrvaldfn><font color=green>&mbrid;</font></HPAT>

<HPAT mbroprdfn><font color=black>&mbrid;</font></HPAT>

<HPAT cfgdfn>
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
<meta name="robots" content="noindex">
<title>&cfgid; Language Reference</title>
</head>
<body bgcolor=white text=black link=navy vlink=navy alink=purple>
<b><font color=\"#008B8B\"><a href="styx.html">contents</a></font></b><br>
&nbsp;
<center><H1>&cfgid; Language Reference</H1></center>
<BR>
<BR>
<center><H2>Regular Grammar</H2></center>
<BR>
The regular grammar defines the basic language elements i.e. tokens as 
certain classes of character sequences like numbers, identifiers, operators
and strings.
<p>Each <b><i><font size="+1">rule</font></i></b> defining such a class of character
sequences has the following structure: &lt;Class Type> &lt;<font color="#FF0000">Class
Identifier</font>> :: &lt;Regular Expression>
<p>We distinguish four <b><i><font size="+1">types of classes</font></i></b>:
<br>&nbsp;
<ul>
<li>
<b><i><font size="+1"><font color="#000000">let</font></font></i></b></li>

<br>Helper class, used to define the more complex tokens
<br>They didn't belong to the language definition.
<li>
<b><i><font size="+1"><font color="#000000">com</font></font></i></b></li>

<br>Comments
<br>They didn't belong to the language definition.
<li>
<b><i><font size="+1"><font color="#000000">tok</font></font></i></b></li>

<br>Tokens
<br>They represent the regular grammar of the language definition.
<li>
<b><i><font color="#000000"><font size="+1">ign</font></font></i></b></li>

<br>Character sequences which should be ignored i.e. skipped by the scanner
<br>They didn't belong to the language definition.</ul>

<p><br>A <b><i><font size="+1">regular expression</font></i></b> spezifies
the character sequences belonging to the class. Such a description usually
consists of the following elements and operators:
<br>&nbsp;
<ul>
<li>
<b><i><font size="+1">Expression1 Expression2 ... ExpressionN</font></i></b></li>

<br>Concatenation of partial expressions
<li>
<b><i><font size="+1">Expression1 | Expression2 | ... | ExpressionN</font></i></b></li>

<br>Union of partial expressions ( alternatives )
<li>
<b><i><font size="+1">Expression1 - Expression2 - ... - ExpressionN</font></i></b></li>

<br>Difference of partial expressions 
<li>
<b><i><font size="+1">[ Expression ]</font></i></b></li>

<br>Optional partial expression
<li>
<b><i><font size="+1">{ Expression }</font></i></b></li>

<br>Iteration of a partial expression ( 0 .. )
<li>
<b><i><font size="+1">Expression +</font></i></b></li>

<br>Iteration of a partial expression ( 1 .. )
<li>
<b><i><font size="+1">( Expression )</font></i></b></li>

<br>Combination of a partial expression ( subexpression )
<li>
<b><i><font color="#3366FF"><font size="+1">Class identifier</font></font></i></b></li>

<br><font color="#000000">Abreviation for the corresponding regular expression</font>
<li>
<b><i><font color="#009900"><font size="+1">"String"</font></font></i></b></li>

<br><font color="#000000">Literal: string / character sequence</font>
<li>
<b><i><font color="#009900"><font size="+1">'Characterset'</font></font></i></b></li>

<br><font color="#000000">Literal: characterset ( 1 .. ) </font></ul>

<h2>
<font color="#000000"><font size="+0"></font></font></h2>
<font color="#000000"><font size="+0">Case ignore character classes
can be spezified with an <b><i>[I]</i></b>
behind the class identifier.</font></font>
<br><font color="#000000"><font size="+0"></font></font>&nbsp;
<br><font color="#000000"><font size="+0"></font></font>&nbsp;
<BR>
<BR>
<table width=80% border=0>
&tkmsec;
</table>
<BR>
<BR>
<BR>
<center><H2>Context-free Grammar</H2></center>
<BR>
<font color="#000000">The syntax rules are described in
<b><i>EBNF</i></b> ( Extended Backus-Naur-Form ). 
A startsymbol must exist for each source file type. That means the syntax
within each file has to be conform to the corresponding start rule.
The other are internal helper rules. </font><font color="#000000"></font>
<p><font color="#000000">Each <b><i><font size="+1">rule</font></i></b>
is structured as follows: &lt;Rule Type: <b><i>start</i></b> or <b><i>let</i></b>>&nbsp;</font>
&lt;<font color="#FF0000">Rule Identifier</font>> :: &lt;EBNF-konform Expression>
<br>An <b><i><font size="+1">EBNF-konform expression</font></i></b> defines a part
of the language syntax. It consists of a set of alternative productions i.e.
partial expressions, separated by the character '|'.
<p>A production can be spezified with the help of the following elements and operators:
<br>&nbsp;
<ul>
<li>
<b><i><font size="+1">Expression1 Expression2 ... ExpressionN</font></i></b></li>

<br>Concatenation of partial expressions
<li>
<b><i><font size="+1">Expression1 | Expression2 | ... | ExpressionN</font></i></b></li>

<br>Union of partial expressions ( alternatives )
<li>
<b><i><font size="+1">[ Expression ]</font></i></b></li>

<br>Optional partial expression
<li>
<b><i><font size="+1">{ Expression }</font></i></b></li>

<br>Iteration of a partial expression ( 0 .. )
<li>
<b><i><font size="+1">Expression +</font></i></b></li>

<br>Iteration of a partial expression ( 1 .. )
<li>
<b><i><font size="+1">( Expression )</font></i></b></li>

<br>Combination of a partial expression ( subexpression )
<li>
<b><i><font color="#3366FF"><font size="+1">Token Identifier</font></font></i></b></li>

<br><font color="#000000">... from the regular grammar</font>
<li>
<b><i><font color="#3366FF"><font size="+1">Rule Identifier<br>
</font></font></i></b><font color="#000000">... from the context-free grammar</font></li>
<li>
<b><i><font color="#009900"><font size="+1">Keyword<br>
</font></font></i></b><font color="#000000">Constant string / character sequence</font><br>
</li>
<li>
<b><i><font color="#000000"><font size="+1">_other_<br>
</font></font></i></b><font color="#000000">Special keyword denoting the
character sequences from the set 'Sigma* \ Tokenset'</font><br>
<BR></li>

<br><font color="#000000"></font>&nbsp;</ul>
<br>
<table width=80% border=0>
&ntmsec;
</table>
<BR>
&botcom;
<BR>
</body>
</html>
</HPAT>

