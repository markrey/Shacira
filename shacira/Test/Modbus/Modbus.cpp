
#pragma hdrstop
#include <condefs.h>
#include <stdio.h>
#include "cStandardWin32.h"

//---------------------------------------------------------------------------
USEUNIT("cStandardWin32.cpp");
//---------------------------------------------------------------------------
#pragma argsused

#define START_ADDR   40001

#pragma pack(1)
typedef struct {
   unsigned char address;
   unsigned char function;
   unsigned short start_addr;
   unsigned short noof_regs;
   unsigned short crc;
}  READ_REG;

typedef struct {
   unsigned char address;
   unsigned char function;
   unsigned char byte_count;
   unsigned short value[128];
}  READ_REG_RESPONSE;

typedef struct {
   unsigned char address;
   unsigned char function;
   unsigned short crc;
}  REPORT_SLAVE_ID;

#define SWAP_WORD(w) ((w<<8) | (w>>8))

static cStandardBase _Channel;
static char _ReadBuf[128];
#define READ_TIMEOUT    300
#define IS_PRINT(c)     (c>31 && c<128)


static unsigned char crc_hi_tab[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
} ;

/* Table of CRC values for low-order byte */

static char crc_lo_tab[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

static unsigned short CRC(unsigned char * buf, int len)
{
   unsigned char crc_hi = 0xff;
   unsigned char crc_lo = 0xff;
   unsigned index;
   while (len--) {
      index = crc_hi ^ *buf++;
      crc_hi = crc_lo ^ crc_hi_tab[index];
      crc_lo = crc_lo_tab[index];
   }
   return (crc_hi << 8) | crc_lo;
}

static void PrintBuf(const char * buf, int len)
{
   for (int i=0; i<len; i++) {
      char c = buf[i];
      unsigned long _c = (unsigned long)((unsigned char)c);
      printf("[%02.02X]", _c);
   }
   printf("\n");
}

static void Send(void * buf, int len)
{
   _Channel.Write(buf, len);
}

static bool ReadResponse(unsigned char node_no, READ_REG * msg, void * buffer)
{
#ifdef SIMPLE_READ
   long nread = _Channel.Read(_ReadBuf, sizeof(_ReadBuf), READ_TIMEOUT);
   if (nread == 0) {
      return false;
   } else {
      return true;
   }
#else
   READ_REG_RESPONSE response = {0};
   node_no = msg->address;
   unsigned short noof_regs = SWAP_WORD(msg->noof_regs);
   long nread = _Channel.Read((unsigned char *)&response, 3, READ_TIMEOUT);
   if (nread != 3) {
//      printf("response too short %d != %d", nread, 3);
      _Channel.FlushInput();
      return false;
   }
   if (response.address != node_no) {
      printf("invalid address %d != %d", response.address, node_no);
      _Channel.FlushInput();
      return false;
   }
   if (response.function != msg->function) {
      printf("invalid function %d != %d", response.function, msg->function);
      _Channel.FlushInput();
      return false;
   }
   if (response.byte_count != noof_regs * 2) {
      printf("invalid byte count %d != %d", response.byte_count, noof_regs * 2);
      _Channel.FlushInput();
      return false;
   }
   nread =  _Channel.Read((unsigned char *)&(response.value[0]),
                                 (response.byte_count) + 2,
                                 READ_TIMEOUT);
   if (nread != response.byte_count + 2) {
      printf("invalid response length %d != %d", nread, response.byte_count + 2);
      _Channel.FlushInput();
      return false;
   }
   unsigned short crc = SWAP_WORD(response.value[noof_regs]);
   unsigned short response_crc = CRC((unsigned char *)&response, response.byte_count + 3);
   if (crc != response_crc) {
      printf("invalid CRC %x != %x", crc, response_crc);
      _Channel.FlushInput();
      return false;
   }
   for (int i = 0; i<noof_regs; i++) {
      response.value[i] = SWAP_WORD(response.value[i]);
   }
   memcpy(buffer, &(response.value[0]), noof_regs * 2);
   return true;
#endif
}

static bool ReadReg(unsigned char node_no, unsigned short address, unsigned short noof_regs, void * buffer)
{
   unsigned char retries = 3;
   for (int i=0; i<retries; i++) {
      READ_REG msg = {0};
      msg.address = node_no;
      msg.function = 0x03;
      msg.start_addr = address - START_ADDR;
      msg.noof_regs = noof_regs;
      msg.start_addr = SWAP_WORD(msg.start_addr);
      msg.noof_regs = SWAP_WORD(msg.noof_regs);
      msg.crc = SWAP_WORD(CRC((unsigned char *)&msg, sizeof(msg) - 2));
      Send(&msg, sizeof(msg));
      if (ReadResponse(node_no, &msg, buffer)) {
         return true;
      }
   }
   return false;
}

static bool ReadShort(unsigned char node_no, unsigned short & state)
{
   unsigned short value = 0;
   if (ReadReg(node_no, 40001, 1, &value)) {
      state = value;
      return true;
   }
   return false;
}

static bool ReadFloat(unsigned char node_no, double & consumption)
{
   float value = 0;
   if (ReadReg(node_no, 40002, 2, &value)) {
      consumption = value;
      return true;
   }
   return false;
}

static bool GetModBusState(unsigned char node_no, unsigned short & state, double & consumption)
{
   if (ReadShort(node_no, state)) {
#ifdef lassma
      if (ReadFloat(node_no, consumption)) {
         return true;
      }
#else
      return true;
#endif
   }
   return false;
}

int main(int argc, char* argv[])
{
   const char * port_name = "COM3";
   if (argc == 2) {
      port_name = argv[1];
   }
   _Channel.SetPortName(port_name);
   _Channel.Open();
   _Channel.SetBaudRate(19200);
   _Channel.SetCharLen(8);
   _Channel.SetStopBits(1);
   _Channel.SetParity(None);
   unsigned char node_no = 0;
   printf("Searching at port %s ... \n", port_name);
   for (node_no = 0; node_no<16; node_no++) {
      unsigned short state = 0;
      double consumption = 0;
      printf("Node %d ... ", node_no);
      if (GetModBusState(node_no, state, consumption)) {
         printf("okay state = %x\n", state);
      } else {
         printf("no response\n");
      }
   }
   _Channel.Close();
   return 0;
}

