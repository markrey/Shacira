/*.SH.*/

/*
 *  Headerfile for module eb_docview
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  eb_docview.cpp on Friday November 16 2001  23:04:37
 */

#ifndef __eb_docview__
#define __eb_docview__


// Headerfiles
// ===========================================================================

#include "base/eb_elo.hpp"


// Forward-Deklarationen
// ===========================================================================

class cEloDocument;
class cEloView;


// ===========================================================================
// Definition cEloDocument
// ---------------------------------------------------------------------------
//
// Basisklasse fuer Dokumentobjekte.
//
// cEclObject
//  +--cEloBase
//      +--cEloElement
//          +--cEloDocument
//
// ===========================================================================

class __ECL_DLLEXPORT__ cEloDocument : public cEloElement {
   ECL_DECLARE(cEloDocument,cEloElement)

public:

   // Konstruktor ueber Elementbeschreibung (direkt)
   cEloDocument(const cEloElementDescription *elem_descr);
   // Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   cEloDocument(const cEloDescriptionManager *descr_manager, cString descr_sig);
   // Destruktor
   virtual ~cEloDocument();


   // Titel
   // =====

   // Dokument-Titel erfragen
   inline cString getTitle() const
      { return title; }
   // Dokument-Titel setzen
   void setTitle(cString title);


   // Modified-Flag
   // =============

   // Erfragen des Modified-Flags
   inline bool isModified() const
      { return modified; }
   // Modified-Flag setzen
   void setModified(bool modified = true);


   // Views
   // =====

   // View an Dokument "anhaengen"
   void addView(cEloView *view);
   // View wieder "entkoppeln"
   void removeView(cEloView *view);

   // Anzahl assoziierter Views ermitteln
   int getViewCount() const;
   // Assozierten View ueber Index ermitteln
   cEloView *getView(int index) const;

   // Alle assoziierten Views ueber ein Update benachrichtigen
   void updateAllViews(cEloView *from_view, cEloElement *elem, long hint);


protected:

   // Hinzugefuegte Events
   // ====================

   // Wird aufgerufen, wenn sich der Titel des Dokumentes geaendert hat
   virtual void onTitleChanged();
   // Wird aufgerufen, wenn sich der Status des Modified-Flags geaendert hat
   virtual void onModifiedChanged();


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um den eindeutigen (textuellen) Schluessel des ELO-Objektes zu erfragen
   cString onGetKey() const
      { return cString(); }
   // Wird aufgerufen, um den Namen des ELO-Objektes zu erfragen
   cString onGetName() const
      { return getKey(); }
   // Wird aufgerufen, um die textuelle Beschreibung des ELO-Objektes zu erfragen
   cString onGetDescr() const
      { return getName(); }


private:

   cString title;       // Der Dokument-Titel
   bool modified;       // Das Modified-Flag

   // Zeiger auf die geordnete Liste assoziierter Views (oder 0)
   struct ASSOCIATED_VIEWS;
   ASSOCIATED_VIEWS *views;

};


// ===========================================================================
// Definition cEloView
// ---------------------------------------------------------------------------
//
// Basisklasse fuer Dokument-Views. Hat selbst keine Basisklasse und kann
// so (relativ) problemlos als zweite Basisklasse in einer Mehrfachvererbung
// herhalten. Eine vollstaendige (benutzbare) cEloView-Basisklasse ist mit
// cEloSimpleView realisiert.
//
// cEloView
//
// ===========================================================================

class __ECL_DLLEXPORT__ cEloView {
   friend cEloDocument;

public:

   // Konstruktor
   cEloView();


   // Allgemeines
   // ===========

   // Zugeordnetes Dokument ermitteln (0 falls kein Dokument zugeordnet)
   inline cEloDocument *getDocument() const
      { return document; }
   // Aktuelle Aktionsbeschreibung erfragen
   inline cEloActionDescription *getActionDescription() const
      { return onGetActionDescription(); }

   // Aktuelle Selektion ermitteln (const-Variante)
   inline const cEloSelection *getSelection() const
      { return &selection; }
   // Aktuelle Selektion ermitteln (non-const-Variante)
   inline cEloSelection *getSelection()
      { return &selection; }


protected:

   // Aktuelle Selektion
   cEloSelection selection;


   // Hinzugefuegte Events
   // ====================

   // Wird aufgerufen, um das Update des zugeordneten Dokumentes zu signalisieren
   //  hint = 0: Initiales Update (nachdem View an Dokument angehaengt wurde)
   virtual void onUpdate(cEloView *from_view, cEloElement *elem, long hint);

   // Wird aufgerufen, wenn ein Dokument an den View "angehaengt" wird
   virtual void onDocumentAdded();
   // Wird aufgerufen, wenn das Dokument vom View "entkoppelt" wird
   virtual void onDocumentRemoved();
   // Wird aufgerufen, wenn sich der Titel des Dokumentes aendert
   virtual void onDocumentTitleChanged();
   // Wird aufgerufen, wenn sich das Modifed-Flag des Dokumentes aendert
   virtual void onDocumentModifedChanged();

   // Wird aufgerufen, um die aktuelle Actionsbeschreibung zu erfragen
   virtual cEloActionDescription *onGetActionDescription() const;


private:

   // Zeiger auf die geordnete Liste assoziierter Views (oder 0)
   cEloDocument *document;

   // (Fuer cEloDocument:) Neues Dokument setzen
   void setDocument(cEloDocument *document);

};


// ===========================================================================
// Definition cEloSimpleView
// ---------------------------------------------------------------------------
//
// Basisklasse fuer Dokument-Views.
//
// cEclObject
//  +--cEloBase
//      +--cEloElement        cEloView
//          +--cEloSimpleView--+
//
// ===========================================================================

class __ECL_DLLEXPORT__ cEloSimpleView : public cEloElement, public cEloView {
   ECL_DECLARE(cEloSimpleView,cEloElement)

public:

   // Konstruktor ueber Elementbeschreibung (direkt)
   cEloSimpleView(const cEloElementDescription *elem_descr = 0);
   // Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   cEloSimpleView(const cEloDescriptionManager *descr_manager, cString descr_sig);
   // Destruktor
   virtual ~cEloSimpleView();

};


#endif

/*.EH.*/
