/*.SH.*/

/*
 *  Headerfile for module eb_res
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  eb_res.cpp on Saturday November 10 2001  19:25:25
 */

#ifndef __eb_res__
#define __eb_res__


// Headerfiles
// ===========================================================================

#include "base/eb_base.hpp"
#include "base/eb_str.hpp"


// ===========================================================================
// Definition cModule
// ---------------------------------------------------------------------------
//
// cBase
//  +--cOsBase
//      +--cModule
//
// ===========================================================================

class __ECL_DLLEXPORT__ cModule : public cOsBase {

public:

   // Default-Konstruktor
   inline cModule()
      { }
   // Konstruktor ueber Modulname
   inline cModule(const char *modname)
      { fromName(modname); }
   // Copy-Konstruktor
   inline cModule(const cModule& other)
      { handle = other.handle; }
   // Destruktor
   ~cModule();

   // Zuweisungs-Operator
   cModule& operator=(const cModule& other)
      { handle = other.handle; return *this; }

   // Initialisierung ueber Modulname
   void fromName(const char *modname);

};


// ===========================================================================
// Definition cResource
// ---------------------------------------------------------------------------
//
// cBase
//  +--cResource
//
// ===========================================================================

class __ECL_DLLEXPORT__ cResource {

public:
   // Konstruktor (aktuelles Modul)
   inline cResource(int res_id)
      { cResource::res_id = res_id; }
   // Konstruktor (fremdes Modul)
   inline cResource(cModule /*module*/, int res_id)
      { /* TBD: ... */ cResource::res_id = res_id; }
   // Copy-Konstruktor
   inline cResource(const cResource& other)
      { res_id = other.res_id; }

   // Zuweisungs-Operator
   cResource& operator=(const cResource& other)
      { res_id = other.res_id; return *this; }

   // ID der Resource erfragen
   int getID() const
      { return res_id; }

private:
   int res_id;

};


// ===========================================================================
// Definition cIcon
// ---------------------------------------------------------------------------
//
// cBase
//  +--cOsBase
//      +--cIcon
//
// ===========================================================================

class __ECL_DLLEXPORT__ cIcon : public cOsBase {

public:

   // Default-Konstruktor
   inline cIcon()
      { }
   // Konstruktor aus Resource
   inline cIcon(const cResource& res, bool def_size = false)
      { load(res, def_size); }
   // Copy-Konstruktor
   inline cIcon(const cIcon& other)
      { handle = other.handle; }
   // Destruktor
   ~cIcon();

   // Zuweisungs-Operator
   cIcon& operator=(const cIcon& other)
      { handle = other.handle; return *this; }

   // Icon aus Resource laden (def_size = false: Groesse wie gespeichert)
   void load(const cResource& res, bool def_size = false);
   // Icon aus Resource laden und auf spezifizierte Groesse skalieren
   void load(const cResource& res, int cx, int cy);

};


// ===========================================================================
// Definition cBitmap
// ---------------------------------------------------------------------------
//
// cBase
//  +--cOsBase
//      +--cBitmap
//
// ===========================================================================

class __ECL_DLLEXPORT__ cBitmap : public cOsBase {

public:

   // Default-Konstruktor
   inline cBitmap()
      { refc_ptr = 0; }
   // Konstruktor aus Resource
   inline cBitmap(const cResource& res, int cx = 0, int cy = 0)
      { load(res, cx, cy); }
   // Copy-Konstruktor
   inline cBitmap(const cBitmap& other)
      { refc_ptr = 0; copy(other); }
   // Destruktor
   ~cBitmap();

   // Zuweisungs-Operator
   cBitmap& operator=(const cBitmap& other)
      { copy(other); return *this; }

   // Bitmap aus Resource laden
   void load(const cResource& res, int cx = 0, int cy = 0);

private:

   // Referenzzaehler fuer Freigabe
   int *refc_ptr;

   // Intern: Referenz anlegen
   void alloc();
   // Intern: Referenz freigeben
   void dealloc();
   // Intern: Kopie anfertigen
   void copy(const cBitmap& other);

};


// ===========================================================================
// Definition cRString
// ---------------------------------------------------------------------------
//
// cBase
//  +--cString
//      +--cRString
//
// ===========================================================================

class __ECL_DLLEXPORT__ cRString : public cString {

public:

   // Default-Konstruktor
   inline cRString()
      { }
   // Konstruktor aus Resource (via Resource-Objekt)
   inline cRString(const cResource& res)
      { load(res); }
   // Konstruktor aus Resource (via Resource-ID)
   inline cRString(int id)
      { load(id); }

   // Bitmap aus Resource laden (via Resource-Objekt)
   void load(const cResource& res);
   // Bitmap aus Resource laden (via Resource-ID)
   void load(int res_id);

};


#endif

/*.EH.*/
