/*.SH.*/

/*
 *  Headerfile for module eb_event
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  eb_event.cpp on Friday August 24 2001  13:50:52
 */

#ifndef __eb_event__
#define __eb_event__


// Headerfiles
// ===========================================================================

#include "base/eb_base.hpp"


// ===========================================================================
// Definition cEventTarget
// ---------------------------------------------------------------------------
//
// Empfaenger von Events muessen von dieser Klasse abgeleitet werden.
//
// cEventTarget
//
// ===========================================================================

class __ECL_DLLEXPORT__ cEventTarget {

public:

   // Typen von Event-Funktionen
   // ==========================

   // Definition aller Typen von Event-Funktionen
   enum EVFUNC_TYPE {
      evUndef,       // Undefinierte Funktion
      evFunc,        // void-Funktion ohne Parameter
      evFuncP,       // void-Funktion mit einem Zeiger-Parameter
      evFuncPP,      // void-Funktion mit zwei Zeiger-Parametern
      evFuncPI,      // void-Funktion mit Zeiger- und Integer-Parameter
      evFuncI,       // void-Funktion mit einem Integer-Parameter
      evFuncII,      // void-Funktion mit zwei Integer-Parametern
      evFuncR,       // int-Funktion ohne Parameter
      evFuncRP,      // int-Funktion mit einem Zeiger-Parameter
      evFuncRPP,     // int-Funktion mit zwei Zeiger-Parametern
      evFuncRPI,     // int-Funktion mit Zeiger- und Integer-Parameter
      evFuncRI,      // int-Funktion mit einem Integer-Parameter
      evFuncRII,     // int-Funktion mit zwei Integer-Parametern
   };


   // Prototypen fuer Event-Funktionen
   // ================================

   // void-Funktion ohne Parameter
   typedef void (cEventTarget::*EVFUNC)();
   // void-Funktion mit einem Zeiger-Parameter
   typedef void (cEventTarget::*EVFUNC_P)(void *);
   // void-Funktion mit zwei Zeiger-Parametern
   typedef void (cEventTarget::*EVFUNC_PP)(void *, void *);
   // void-Funktion mit Zeiger- und Integer-Parameter
   typedef void (cEventTarget::*EVFUNC_PI)(void *, int);
   // void-Funktion mit einem Integer-Parameter
   typedef void (cEventTarget::*EVFUNC_I)(int);
   // void-Funktion mit zwei Integer-Parametern
   typedef void (cEventTarget::*EVFUNC_II)(int, int);

   // int-Funktion ohne Parameter
   typedef int (cEventTarget::*EVFUNC_R)();
   // int-Funktion mit einem Zeiger-Parameter
   typedef int (cEventTarget::*EVFUNC_RP)(void *);
   // int-Funktion mit zwei Zeiger-Parametern
   typedef int (cEventTarget::*EVFUNC_RPP)(void *, void *);
   // int-Funktion mit Zeiger- und Integer-Parameter
   typedef int (cEventTarget::*EVFUNC_RPI)(void *, int);
   // int-Funktion mit einem Integer-Parameter
   typedef int (cEventTarget::*EVFUNC_RI)(int);
   // int-Funktion mit zwei Integer-Parametern
   typedef int (cEventTarget::*EVFUNC_RII)(int, int);

   // Allgemeiner Prototyp (konvertierbar zu den obigen Prototypen)
   typedef EVFUNC EVFUNC_PTR;


   // Allgemeiner Event
   // =================

   struct __ECL_DLLEXPORT__ EVENT {
      friend class cEventSource;

      EVENT()
         { obj = 0; func = 0; type = evUndef; }

      // WICHTIG: Die Konvertierung der Zielobjekte zu cEventTarget MUSS
      // ueber einen void* geschehen, da ansonsten bei Klassen mit vftab[]
      // ein korrigierter (und damit falscher) Objektzeiger gespeichert wird.
      // (Der Parameter 'void *o' in den EVENT-Konstruktoren reicht aus.)

      EVENT(void *o, EVFUNC f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFunc; }
      EVENT(void *o, EVFUNC_P f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncP; }
      EVENT(void *o, EVFUNC_PP f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncPP; }
      EVENT(void *o, EVFUNC_PI f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncPI; }
      EVENT(void *o, EVFUNC_I f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncI; }
      EVENT(void *o, EVFUNC_II f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncII; }

      EVENT(void *o, EVFUNC_R f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncR; }
      EVENT(void *o, EVFUNC_RP f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncRP; }
      EVENT(void *o, EVFUNC_RPP f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncRPP; }
      EVENT(void *o, EVFUNC_RPI f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncRPI; }
      EVENT(void *o, EVFUNC_RI f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncRI; }
      EVENT(void *o, EVFUNC_RII f)
         { obj = (cEventTarget*)o; func = (EVFUNC_PTR)f; type = evFuncRII; }

   private:

      EVFUNC_TYPE type;          // Typ der Eventfunktion
      EVFUNC_PTR func;         // Zeiger auf Memberfunktion
      cEventTarget *obj;         // Zeiger auf Target-Objekt

   };

};


// ===========================================================================
// Definition cEventSource
// ---------------------------------------------------------------------------
//
// Erzeuger von Events muessen von dieser Klasse abgeleitet werden.
//
// cEventTarget
//  +--cEventSource
//
// ===========================================================================

class __ECL_DLLEXPORT__ cEventSource : public cEventTarget {

public:

   // Konstruktor
   cEventSource() { event_map = 0; }
   // Copy-Konstruktor
   cEventSource(const cEventSource&) { event_map = 0; }
   // Zuweisungsoperator
   cEventSource& operator=(const cEventSource&) { return *this; }
   // Destruktor
   virtual ~cEventSource();

   // Definition von Event-IDs
   enum EVENTS {
      evtDestructingSource = -1, // (EVFUNC) cEventSource wird geloescht
      evtUser              = 0   // Ab hier: Benutzerdefinierte Events
   };

   // Eventfunktion registrieren
   // ==========================

   // void-Eventfunktion ohne Parameter registrieren
   void addEvent(int event_id, void *obj, EVFUNC func);
   // void-Eventfunktion mit einem Zeiger-Parameter registrieren
   void addEvent(int event_id, void *obj, EVFUNC_P func);
   // void-Eventfunktion mit zwei Zeiger-Parametern registrieren
   void addEvent(int event_id, void *obj, EVFUNC_PP func);
   // void-Eventfunktion mit Zeiger- und Integer-Parameter registrieren
   void addEvent(int event_id, void *obj, EVFUNC_PI func);
   // void-Eventfunktion mit Integer-Parameter registrieren
   void addEvent(int event_id, void *obj, EVFUNC_I func);
   // void-Eventfunktion mit zwei Integer-Parametern registrieren
   void addEvent(int event_id, void *obj, EVFUNC_II func);

/*
   // int-Eventfunktion ohne Parameter registrieren
   void addEvent(int event_id, void *obj, EVFUNC_R func);
   // int-Eventfunktion mit einem Zeiger-Parameter registrieren
   void addEvent(int event_id, void *obj, EVFUNC_RP func);
   // int-Eventfunktion mit zwei Zeiger-Parametern registrieren
   void addEvent(int event_id, void *obj, EVFUNC_RPP func);
   // int-Eventfunktion mit Zeiger- und Integer-Parameter registrieren
   void addEvent(int event_id, void *obj, EVFUNC_RPI func);
   // int-Eventfunktion mit Integer-Parameter registrieren
   void addEvent(int event_id, void *obj, EVFUNC_RI func);
   // int-Eventfunktion mit zwei Integer-Parametern registrieren
   void addEvent(int event_id, void *obj, EVFUNC_RII func);
*/


   // Eventfunktion deregistrieren
   // ============================

   // Alle Eventfunktionen zu einem Event deregistrieren
   void removeEvent(int event_id);
   // Alle Eventfunktionen eines Targets zu einem Event deregistrieren
   void removeEvent(int event_id, void *obj);
   // Alle Eventfunktionen eines Targets deregistrieren
   void removeEvent(void *obj);


   // Eventfunktion fuer nicht registrierte Events aufrufen
   // =====================================================

   // void-Eventfunktion ohne Parameter aufrufen
   static void callEvent(const EVENT& event);
   // void-Eventfunktion mit einem Zeiger-Parameter aufrufen
   static void callEvent(const EVENT& event, void *p1);
   // void-Eventfunktion mit zwei Zeiger-Parametern aufrufen
   static void callEvent(const EVENT& event, void *p1, void *p2);
   // void-Eventfunktion mit Zeiger- und Integer-Parameter aufrufen
   static void callEvent(const EVENT& event, void *p1, int p2);
   // void-Eventfunktion mit Integer-Parameter aufrufen
   static void callEvent(const EVENT& event, int p1);
   // void-Eventfunktion mit zwei Integer-Parametern aufrufen
   static void callEvent(const EVENT& event, int p1, int p2);

   // int-Eventfunktion ohne Parameter aufrufen
   static int callEventR(const EVENT& event);
   // int-Eventfunktion mit einem Zeiger-Parameter aufrufen
   static int callEventR(const EVENT& event, void *p1);
   // int-Eventfunktion mit zwei Zeiger-Parametern aufrufen
   static int callEventR(const EVENT& event, void *p1, void *p2);
   // int-Eventfunktion mit Zeiger- und Integer-Parameter aufrufen
   static int callEventR(const EVENT& event, void *p1, int p2);
   // int-Eventfunktion mit Integer-Parameter aufrufen
   static int callEventR(const EVENT& event, int p1);
   // int-Eventfunktion mit zwei Integer-Parametern aufrufen
   static int callEventR(const EVENT& event, int p1, int p2);


protected:

   // Eventfunktion fuer registrierte Events aufrufen
   // ===============================================

   // void-Eventfunktion ohne Parameter aufrufen
   void callEvent(int event_id);
   // void-Eventfunktion mit einem Zeiger-Parameter aufrufen
   void callEvent(int event_id, void *p1);
   // void-Eventfunktion mit zwei Zeiger-Parametern aufrufen
   void callEvent(int event_id, void *p1, void *p2);
   // void-Eventfunktion mit Zeiger- und Integer-Parameter aufrufen
   void callEvent(int event_id, void *p1, int p2);
   // void-Eventfunktion mit Integer-Parameter aufrufen
   void callEvent(int event_id, int p1);
   // void-Eventfunktion mit zwei Integer-Parametern aufrufen
   void callEvent(int event_id, int p1, int p2);

/*
   // void-Eventfunktion ohne Parameter aufrufen
   int callEventR(int event_id);
   // void-Eventfunktion mit einem Zeiger-Parameter aufrufen
   int callEventR(int event_id, void *p1);
   // void-Eventfunktion mit zwei Zeiger-Parametern aufrufen
   int callEventR(int event_id, void *p1, void *p2);
   // void-Eventfunktion mit Zeiger- und Integer-Parameter aufrufen
   int callEventR(int event_id, void *p1, int p2);
   // void-Eventfunktion mit Integer-Parameter aufrufen
   int callEventR(int event_id, int p1);
   // void-Eventfunktion mit zwei Integer-Parametern aufrufen
   int callEventR(int event_id, int p1, int p2);
*/

private:

   void * event_map;

   // Pruefen eines unregistrierten Events
   static bool checkEvent(const EVENT& event, EVFUNC_TYPE type);
   // Pruefen eines registrierten Events
   bool checkEvent(int event_id, EVFUNC_TYPE type, const EVENT& event) const;
   // Suchen der Event-Liste zu einem Event
   void *findEventList(int event_id) const;
   // Registrieren einer Eventfunktion zu einem Event
   void addEvent(int event_id, void *obj, EVFUNC func, EVFUNC_TYPE type);

};


#endif

/*.EH.*/
