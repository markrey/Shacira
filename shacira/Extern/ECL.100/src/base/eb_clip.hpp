/*.SH.*/

/*
 *  Headerfile for module eb_clip
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  eb_clip.cpp on Wednesday November 07 2001  21:54:07
 */

#ifndef __eb_clip__
#define __eb_clip__


// Headerfiles
// ===========================================================================

#include "base/eb_str.hpp"


// ===========================================================================
// Definition cClipboardFormat
// ---------------------------------------------------------------------------
//
//  cClipboardFormat
//
// ===========================================================================

class __ECL_DLLEXPORT__ cClipboardFormat {

public:

   // Default-Konstruktor
   inline cClipboardFormat()
      { version = 0; }
   // Konstruktor
   inline cClipboardFormat(const cString& fmt, int ver = 0)
      { format = fmt; version = ver; }
   // Copy-Konstruktor
   inline cClipboardFormat(const cClipboardFormat& other)
      { format = other.format; version = other.version; }

   // Zuweisungsoperator
   cClipboardFormat& operator=(const cClipboardFormat& other)
      { format = other.format; version = other.version; return *this; }


   // Attribute
   // =========

   // Formatkennung erfragen
   inline cString getFormat() const
      { return format; }
   // Versionsnummer erfragen
   inline int getVersion() const
      { return version; }


   // Vergleich
   // =========

   // Vergleich zweiter Formate
   int compare(const cClipboardFormat& other) const;

   // Vergleichsoperatoren
   bool operator==(const cClipboardFormat& other) const
      { return compare(other) == 0; }
   bool operator!=(const cClipboardFormat& other) const
      { return compare(other) != 0; }
   bool operator<(const cClipboardFormat& other) const
      { return compare(other) <  0; }
   bool operator>(const cClipboardFormat& other) const
      { return compare(other) >  0; }
   bool operator<=(const cClipboardFormat& other) const
      { return compare(other) <= 0; }
   bool operator>=(const cClipboardFormat& other) const
      { return compare(other) >= 0; }


   // Standardformate
   // ===============

   // Undefiniertes Format
   static cClipboardFormat getFmtUndef();
   // Standard-TEXT-Format
   static cClipboardFormat getFmtText();
   // Standard-BITMAP-Format
   static cClipboardFormat getFmtBitmap();


private:

   cString format;      // Kennung des Datenformates
   int version;         // Version des Datenformates

};


// ===========================================================================
// Definition cClipboardData
// ---------------------------------------------------------------------------
//
// cBase
//  +--cClipboardData
//
// ===========================================================================

class __ECL_DLLEXPORT__ cClipboardData : public cBase {
   friend class cClipboard;

public:

   enum INSERT_TYPE {
      cbiUndef,      // Einfuege-Typ nicht genauer spezifiziert
      cbiNoChange,   // Einfuege-Typ nicht aendern (nur bei reset)
      cbiDrag,       // Daten durch DragSource erzeugt
      cbiCopy,       // Daten durch Copy-To-Clipboard erzeugt
      cbiMove        // Daten durch Move-To-Clipboard erzeugt
   };

   // Default-Konstruktor
   cClipboardData(INSERT_TYPE cbi = cbiUndef);
   // Konstruktor
   cClipboardData(const cClipboardFormat& format, INSERT_TYPE cbi = cbiUndef);
   // Destruktor
   ~cClipboardData();

   // Format der Clipboard-Daten erfragen
   inline cClipboardFormat getFormat() const
      { return format; }
   // Einfuege-Typ erfragen
   inline INSERT_TYPE getInsertType() const
      { return cbi; }

   // Clipboard-Daten loeschen
   void clear();
   // Clipboard-Daten neu initialisieren
   void reset(const cClipboardFormat& format, INSERT_TYPE cbi = cbiNoChange);

   // String-Objekt zu Clipboard-Daten hinzufuegen
   void addObject(cString signature, cString name, cString text);
   // Daten-Objekt zu Clipboard-Daten hinzufuegen
   void addObject(cString signature, cString name, void *data, int size);

   // Anzahl der Daten-Objekte erfragen
   int getObjectCount() const;
   // Signatur des Daten-Objektes an Position 'n' erfragen
   cString getObjectSignature(int n) const;
   // Name des Daten-Objektes an Position 'n' erfragen
   cString getObjectName(int n) const;

   // String-Objekt an Position 'n' erfragen
   cString getObjectDataStr(int n) const;
   // Groesse des Daten-Objektes an Position 'n' erfragen
   int getObjectDataSize(int n) const;
   // Zeiger auf Daten des Daten-Objektes an Position 'n' erfragen
   void *getObjectDataPtr(int n) const;
   // Daten des Daten-Objektes an Position 'n' erfragen
   bool getObjectData(int n, void *buf, int buf_size) const;


public: // should be protected:

   // Intern: Initialisierung aus Clipboard-Textdaten
   bool initFromStreamedText(void *streamed_text);
   // Intern: Initialisierung aus Clipboard-Rohdaten
   bool initFromStreamedData(void *streamed_data);
   // Intern: Format aus Clipboard-Rohdaten ermitteln
   static cClipboardFormat getFormatFromStreamed(void *streamed_data);
   // Intern: Laenge der Clipboard-Rohdaten ermitteln
   int getStreamedDataSize() const;
   // Intern: Laenge der Clipboard-Rohdaten von Objekt 'n' ermitteln
   int getStreamedObjectSize(int n) const;
   // Intern: Erzeugen der Clipboard-Rohdaten
   bool getStreamedData(void *buf) const;
   // Intern: Laenge der Clipboard-Textdaten ermitteln
   int getStreamedTextSize() const;
   // Intern: Erzeugen der Clipboard-Textdaten
   bool getStreamedText(void *buf) const;


private:

   cClipboardFormat format;   // Kennung des Datenformates
   INSERT_TYPE cbi;           // Kennung des Einfuege-Typs

   // Zeiger auf Array mit Clipboard-Datenobjekten
   struct OBJECT_ARRAY;
   OBJECT_ARRAY *objects;

};


// ===========================================================================
// Definition cClipboard
// ---------------------------------------------------------------------------
//
// cBase
//  +--cClipboard
//
// ===========================================================================

class __ECL_DLLEXPORT__ cClipboard : public cBase {

public:

   // Konstruktor
   cClipboard();
   // Destruktor
   ~cClipboard();

   // Ist das Clipboard geoeffnet?
   bool isOpen() const;
   // Ist das Clipboard leer? (Keine Eintraege in egal welchem Format)
   bool isEmpty() const;
   // Ist ein bestimmtes Format vorhanden?
   bool isAvailable(const cClipboardFormat& format) const;

   // Inhalt des Clipboards loeschen
   void empty();

   // Daten im ECL-Format erfragen
   bool getData(cClipboardData& data);
   // Daten in bestimmtem Format 'format' erfragen
   bool getData(cClipboardData& data, const cClipboardFormat& format);
   // Daten ins Clipboard schreiben (empty_cb = true, CB wird vorher geleert)
   bool setData(const cClipboardData& data, bool empty_cb = true);


private:

   bool is_open;

};


#endif

/*.EH.*/
