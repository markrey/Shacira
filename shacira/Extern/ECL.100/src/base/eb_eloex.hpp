/*.SH.*/

/*
 *  Headerfile for module eb_eloex
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  eb_eloex.cpp on Saturday January 26 2002  11:39:09
 */

#ifndef __eb_eloex__
#define __eb_eloex__


// Headerfiles
// ===========================================================================

#include "base/eb_elo.hpp"


// ===========================================================================
// cEloOperationCnr
// ---------------------------------------------------------------------------
//
// Erweitert das Konzept der ELO-Operationen um "echte" Sub-Operationen.
// Ein cEloOperationCnr-Objekt dient dabei als Container für eine Menge
// beliebiger anderer cEloOperation-Objekte.
//
// cEloBase
//  +--cEloOperation
//      +--cEloOperationCnr
//
// ===========================================================================

class __ECL_DLLEXPORT__ cEloOperationCnr : public cEloOperation {
   ELO_DECLARE(cEloOperationCnr,cEloOperation)

public:

   // Konstruktor
   cEloOperationCnr();
   // Destruktor
   ~cEloOperationCnr();


protected:

   // Sub-Operationen hinzufuegen
   // ===========================

   // Sub-Operation aufnehmen (direkt)
   void addSubOperation(cEloOperation *sub_op);
   // Sub-Operation aufnehmen (indirekt ueber Operation-Manager)
   void addSubOperation(cEloOperationManager *op_manager, cString op_sig);


   // Sub-Operationen suchen
   // ======================

   // Momentan gueltige Sub-Operation ueber Selektion und 'sub_op' suchen (non-const)
   cEloOperation *findSubOperation(const cEloSelection *selection, int sub_op);
   // Momentan gueltige Sub-Operation ueber Selektion und 'sub_op' suchen (const)
   const cEloOperation *findSubOperation(const cEloSelection *selection, int sub_op) const;


protected:

   // Hinzugefuegte Events
   // ====================

   // Wird aufgerufen, um den Haupt-Hilfetext fuer die Statuszeile zu erfragen
   virtual cString onGetCnrHelpText(const cEloSelection *selection) const = 0;
   // Wird aufgerufen, um den Haupt-Text fuer Menueeintraege zu erfragen
   virtual cString onGetCnrMenuText(const cEloSelection *selection) const = 0;


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um die Operation auf alle Elemente der Selektion auszufuehren
   void onExecOperation(cEloSelection *selection, int, cEloElement *);
   // Wird aufgerufen, um zu pruefen, ob die (Teil-)Operation "enabled" (zugaengig fuer Benutzer) ist
   bool onGetEnabledFlag(const cEloSelection *sel, int sub_op, cEloElement *target) const;

   // Wird aufgerufen, um zu bestimmen, ob die Operationen Teil-Operationen erlaubt
   bool onGetSubOperations(const cEloSelection *selection) const;
   // Wird aufgerufen, um die aktuelle Anzahl Teil-Operationen zu erfragen
   int onGetSubOperationCount(const cEloSelection *selection) const;
   // Wird aufgerufen, um zu pruefen, ob die Operation ein spezifisches Target Unterstuetzt
   bool onSupportsTarget(const cEloElement *selected_elem, cEloElement *target) const;

   // Wird aufgerufen, um den Hilfetext fuer die Statuszeile zu erfragen
   cString onGetHelpText(const cEloSelection *, int) const;
   // Wird aufgerufen, um den Text fuer Menueeintraege zu erfragen
   cString onGetMenuText(const cEloSelection *, int) const;


private:

   // Zeiger auf zusaetzliche Daten
   struct ADD_INFO;
   ADD_INFO *info;

};


#endif

/*.EH.*/
