/*.SH.*/

/*
 *  Headerfile for module er_report
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  er_report.cpp on Thursday October 11 2001  15:18:20
 */

#ifndef __er_report__
#define __er_report__


// Headerfiles
// ===========================================================================

#include "base/eb_str.hpp"
#include "rep/er_repelem.hpp"

// Default Font-IDs
#define REP_FID_NORM       1
#define REP_FID_TABHEAD    2
#define REP_FID_TABCONT    3
#define REP_FID_HEADLINE   4
#define REP_FID_FOOTLINE   5


// ===========================================================================
// Definition cReport
// ---------------------------------------------------------------------------
//
// cBase
//  +--cRepElem
//      +--cRepGroup
//          +--cReport
//
// ===========================================================================

class __ECL_DLLEXPORT__ cReport : public cRepGroup {
   c2dBox         page1_rect;    // Fuer Seite 1
   c2dBox         page2_rect;    // Fuer Seite 2 und folgende
   bool           output;
   int            first_page, last_page;

public:
   int            page_count;
   int            page_no;
   cRepElem*      headline;      /* Kopfzeile fuer alle Seiten ausser 1. wenn first_h.*/
   cRepElem*      footline;      /* Fusszeile fuer alle Seiten ausser 1. wenn first_foo.*/
   cRepElem*      first_headline;
   cRepElem*      first_footline;

   virtual ~cReport();
   inline cReport() :
      cRepGroup(NULL, false, 0, NONE, NONE, c2dSize(0,0))
   {
      headline = footline = first_headline = first_footline = NULL;
      page_count = -1; // unbekannt bis jetzt
   }

   void DrawPages(cdSpace *space, const c2dBox& page1, const c2dBox& page2, int page_start, int page_end);
   virtual bool /*done*/ PageBreak(bool& out, bool force, cdSpace *space, c2dPoint& pos);
   double FootlineHeight();
   void DrawFooter(cdSpace *space, c2dPoint& pos);
   void DrawHeader(cdSpace *space, c2dPoint& pos);
   void Repaginate(cdSpace *space, const c2dBox& page);
   virtual c2dSize& QuerySize(cdSpace *space);
   virtual void SetSize(const c2dSize& s);

   cRepElem *getHeadline(int page) const
      { return page == 0 && first_headline ? first_headline : headline; }
   cRepElem *getFootline(int page) const
      { return page == 0 && first_footline ? first_footline : footline; }

};


// ===========================================================================
// Definition cRepVarPgNo
// ---------------------------------------------------------------------------
//
// cBase
//  +--cRepElem
//      +--cRepText
//          +--cRepVarText
//              +--cRepVarPgNo
//
// ===========================================================================

class __ECL_DLLEXPORT__ cRepVarPgNo : public cRepVarText {
public:
   inline cRepVarPgNo(cRepGroup* owner, cReport *_report, long font_id=0,
            double _size=0,
            WHERE _align=NONE,
            WHERE _frame=NONE,
            const c2dSize& _dist=c2dSize(0,0)
          ) : report( _report ),
              cRepVarText( owner, &value, font_id, _size, _align, _frame, _dist )
      { }
   virtual bool /*changed*/ GetValue( void );
protected:
   cReport *report;
   cString value;
};


#endif

/*.EH.*/
