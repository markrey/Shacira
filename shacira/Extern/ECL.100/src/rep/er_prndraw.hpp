/*.SH.*/

/*
 *  Headerfile for module er_prndraw
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  er_prndraw.cpp on Tuesday October 16 2001  16:09:04
 */

#ifndef __er_prndraw__
#define __er_prndraw__


// Headerfiles
// ===========================================================================

#include "base/eb_docview.hpp"
#include "draw/ed_space.hpp"
#include "rep/er_printer.hpp"


// ===========================================================================
// Definition crPrnDevice
// ---------------------------------------------------------------------------
//
//  cBase
//   +--cdDevice
//       +--crPrnDevice
//
// ===========================================================================

class __ECL_DLLEXPORT__ crPrnDevice : public cdDevice {

public:

   // Konstruktor
   inline crPrnDevice() { }
   // Destruktor
   ~crPrnDevice();

   // Queuezuordnung durchfuehren
   void associateQueue(const crPrnQueue& new_queue);
   // Zugeordnete Queue erfragen
   crPrnQueue getAssociatedQueue() const
      { return queue; }

   // Drucker-Device oeffnen
   void openDevice(cString title, int copies);
   // Drucker-Device schliessen
   void closeDevice();

private:

   crPrnQueue queue;

};


// ===========================================================================
// Definition crPrnSpace
// ---------------------------------------------------------------------------
//
//  cBase
//   +--cdSpace
//       +--crPrnSpace
//
// ===========================================================================

class __ECL_DLLEXPORT__ crPrnSpace : public cdSpace {

public:

   inline crPrnSpace(crPrnDevice *dev) : cdSpace(dev) { prn_dev = dev; }
   ~crPrnSpace();

protected:

   // Konvertiere physikalische in logische Koordinaten
   long onConvPhys2Log(double phys) const;
   // Konvertiere logische in physikalische Koordinaten
   double onConvLog2Phys(long log) const;

private:

   crPrnDevice *prn_dev;   // Zugeordnetes Printer-Device

};


// ===========================================================================
// Definition crPrnDocument
// ---------------------------------------------------------------------------
//
// cEloBase
//  +--cEloElement
//      +--crPrnDocument
//
// ===========================================================================

class __ECL_DLLEXPORT__ crPrnDocument : public cEloDocument {
   ELO_DECLARE(crPrnDocument,cEloDocument)

public:

   // Konstruktor ohne Elementbeschreibung
   inline crPrnDocument(crPrinter *prn) :
      cEloDocument(getDefaultElemDescr()) { init(prn); }
   // Konstruktor ueber Elementbeschreibung (direkt)
   inline crPrnDocument(crPrinter *prn, const cEloElementDescription *elem_descr) :
      cEloDocument(elem_descr) { init(prn); }
   // Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   inline crPrnDocument(crPrinter *prn, const cEloDescriptionManager *descr_manager, cString descr_sig) :
      cEloDocument(descr_manager, descr_sig) { init(prn); }
   // Destruktor
   virtual ~crPrnDocument();


   // Allgemeines
   // ===========

   // Zeichenbereich in physikalischen Koordinaten (mm) ermitteln
   inline c2dBox getDrawArea() const
      { return onGetDrawArea(); }
   // Zugeordnetes Device erfragen
   inline crPrnDevice *getAssociatedDevice()
      { return &device; }

   // Default-Elementbeschreibung erfragen
   static cEloElementDescription *getDefaultElemDescr();


   // Dokumentaufbereitung
   // ====================

   // Startet die Aufbereitung eines Druckdokuments
   bool start(cString doc_name, cString title, int copies = 1);
   // Beendet die Aufbereitung, beginnt den Druckvorgang und liefert job_id
   int end();
   // Bricht die Aufbereitung des Druckdokuments ab
   void abort();
   // Fuegt einen Seitenvorschub ein
   void newFrame();


   // Seitenraender und Offsets
   // =========================

   enum SETMARG {
      Absolute,      // Raender auf Absolutwert setzen (in mm)
      Relative       // Raender relativ zum Papierrand setzen (in mm)
   };

   // Setzt die Raender relativ zum Papierrand oder Absolut (in mm)
   void setMargins(double left, double right, double top, double bottom, SETMARG sm = Absolute);
   // Setzt die Offsets fuer Seite 1 relativ zum Rand (in mm)
   void setOffsets(int page, double left, double right, double top, double bottom);
   // Ermittelt die absoluten Randeinstellungen fuer Seite 'page'
   void getMargins(int page, double& left, double& right, double& top, double& bottom);


protected:

   // Hinzugefuegte Events
   // ====================

   // Wird aufgerufen, um den Zeichenbereich zu ermitteln
   virtual c2dBox onGetDrawArea() const;


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um die eindeutige Signatur des ELO-Objektes zu erfragen
   cString onGetSignature() const
      { return __getClassName(); }

private:

   crPrinter *prn;          // Zugeordneter Drucker
   crPrnDevice device;     // Zugeordnetes Drucker-Geraet

   double marg_left;       // Abstand linker Blattrand zum Beginn Druckbereich [mm]
   double marg_right;      // Abstand linker Blattrand zum Ende Druckbereich [mm]
   double marg_bottom;     // Abstand unterer Blattrand zum Ende Druckbereich [mm]
   double marg_top;        // Abstand unterer Blattrand zum Beginn Druckbereich [mm]
   double off1_bottom;     // Seite 1: Offset zu marg_bottom [mm relativ]
   double off1_top;        // Seite 1: Offset zu marg_top [mm relativ]

   void init(crPrinter *prn);

};


#endif

/*.EH.*/
