/*.SH.*/

/*
 *  Headerfile for module er_prnspool
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  er_prnspool.cpp on Tuesday August 21 2001  18:01:20
 */

#ifndef __er_prnspool__
#define __er_prnspool__


// Headerfiles
// ===========================================================================

#include "base/eb_str.hpp"

class cwWindow;


// ===========================================================================
// Definition crPrnDriver
// ---------------------------------------------------------------------------
//
// Repraesentation treiberspezifischer Daten. Achtung: Objekte dieser Klasse
// versuchen, unnoetige Allokation und kopieren der Treiberdaten durch einen
// Referenzzaehler zu vermeiden.
//
//  cBase
//   +--crPrnDriver
//
// ===========================================================================

class __ECL_DLLEXPORT__ crPrnDriver : public cBase {

public:
   crPrnDriver();
   crPrnDriver(const char *name, void *data, int len);
   crPrnDriver(const crPrnDriver& other);
   ~crPrnDriver();

   // Zuweisungsoperator
   crPrnDriver& operator=(const crPrnDriver& other);

   // Treiber-Name und Version
   const cString& getName() const
      { return name; }
   long getVersion() const;

   // Erfragen der Treiber-Daten
   void *getData() const
      { return data->d; }
   long getDataLen() const
      { return data->size; }

private:
   cString name;
   struct DATA {
      int size;   // Allokierte Groesse
      int refc;   // Referenzzaehler
      char d[1];  // Groesse dynamisch
   } *data;

   DATA *alloc(int len);
   void dealloc(DATA *& data);

};


// ===========================================================================
// Definition crPrnQueue
// ---------------------------------------------------------------------------
//
// Repraesentation einer Drucker-Queue. Kann nur durch Befragen des Betriebs-
// systems ueber ein crPrnSpooler-Objekt entstehen. Ein crPrnQueue-Objekt ist
// ohne das zugehoerige crPrnSpooler-Objekt nicht lebensfaehig!
//
//  cBase
//   +--crPrnQueue
//
// ===========================================================================

class __ECL_DLLEXPORT__ crPrnQueue : public cBase {
   friend class crPrnSpooler;

private:
   crPrnQueue(void *queue_info)
      { crPrnQueue::queue_info = queue_info; }

public:
   crPrnQueue()
      { queue_info = NULL; }

   // Zugeordneter Druckertreiber
   crPrnDriver getDriver() const;

   // Default-Daten fuer Druckertreiber ueberschreiben
   bool setDefaultDriverData(crPrnDriver other_driver);

   // Einstellungen vom Benutzer anfordern
   bool queryJobProperties(bool show_dialog = true, cwWindow *parent = 0);

   // Informationen ueber die Queue
   cString getName() const;
   cString getFormName() const;
   cString getComment() const;
   cString getLocation() const;
   cString getPortName() const;
   cString getProcessor() const;
   cString getParams() const;

   // Pruefen auf initialisierte Queue
   bool isInitialized() const
      { return queue_info != 0; }

   // Ist dies die Default-Queue?
   bool isDefault() const;

private:
   void *queue_info;

};


// ===========================================================================
// Definition crPrnSpooler
// ---------------------------------------------------------------------------
//
// Verwaltungsinstanz fuer Objekte der Klasse crPrnQueue.
//
//  cBase
//   +--crPrnSpooler
//
// ===========================================================================

class __ECL_DLLEXPORT__ crPrnSpooler : public cBase {

public:
   crPrnSpooler();
   ~crPrnSpooler();

   // Erfragen der Anzahl vorhandener Queues
   int getQueueCount() const
      { return queue_count; }

   // Queue mit bestimmtem Namen suchen
   int findQueue(const char *queue_name) const;
   // Queue ueber Index erfragen
   crPrnQueue getQueue(int queue_no) const;
   // Standard-Queue ermitteln
   crPrnQueue getDefaultQueue() const;

private:
   int queue_count;
   void *queue_info;

};


#endif

/*.EH.*/
