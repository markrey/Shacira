/*.SH.*/

/*
 *  Headerfile for module edb_dictionary
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  edb_dictionary.cpp on Sunday June 10 2001  22:46:23
 */

#ifndef __edb_dictionary__
#define __edb_dictionary__


// Headerfiles
// ===========================================================================

#include "dbi/edb_database.hpp"
#include "dbi/edb_cursor.hpp"


// ===========================================================================
// Definition cdbDictField
// ---------------------------------------------------------------------------
//
// cBase
//  +--cdbDictField
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdbDictField : public cBase {
   friend class cdbDictTable;

public:

   // Default-Konstruktor
   cdbDictField();
   // Copy-Konstruktor
   cdbDictField(const cdbDictField& other);
   // Destruktor
   ~cdbDictField();

   // Zuweisungsoperator
   cdbDictField& operator=(const cdbDictField& other);


   // Allgemeines
   // ===========

   cString getSchemaName() const;
   cString getTableName() const;
   cString getFieldName() const;

   cdbCursor::VARTYPE getDataType() const;
   int getFieldSize() const;
   int getBufferSize() const;
   int getDigits() const;
   cString getDefaultValue() const;

   bool isNullable() const;
   bool isPrimaryKey() const;


private:

   // Privater Konstruktor (nur fuer cdbDictTable)
   cdbDictField(void *dc_base, int table_idx, int field_idx);

   void *dc_base;
   int table_idx;
   int field_idx;

};


// ===========================================================================
// Definition cdbDictTable
// ---------------------------------------------------------------------------
//
// cBase
//  +--cdbDictTable
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdbDictTable : public cBase {
   friend class cdbDictionary;

public:

   // Default-Konstruktor
   cdbDictTable();
   // Copy-Konstruktor
   cdbDictTable(const cdbDictTable& other);
   // Destruktor
   ~cdbDictTable();

   // Zuweisungsoperator
   cdbDictTable& operator=(const cdbDictTable& other);


   // Allgemeines
   // ===========

   enum TABLE_TYPE { ttNone, ttTable, ttView };

   // Typ der Tabelle ermitteln
   TABLE_TYPE getType() const;

   // Name des Schemas ermitteln
   cString getSchemaName() const;
   // Name der Tabelle ermitteln
   cString getTableName() const;


   // Zugeordnete Felder
   // ==================

   // Feldeintrag ueber Namen suchen
   int findField(cString field_name) const;

   // Anzahl Feldeintraege ermitteln
   int getFieldCount() const;
   // Feldname ueber Index ermitteln
   cString getFieldName(int idx) const;
   // Feldeintrag ueber Index ermitteln
   cdbDictField getField(int idx) const;


private:

   // Privater Konstruktor (nur fuer cdbDictionary)
   cdbDictTable(void *dc_base, int table_idx);

   void *dc_base;
   int table_idx;

};


// ===========================================================================
// Definition cdbDictionary
// ---------------------------------------------------------------------------
//
// cBase
//  +--cdbDictionary
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdbDictionary : public cBase {

public:

   // Konstruktor ueber Datenbank und Schema-Name
   cdbDictionary(cdbDatabase& db, cString schema = cString());
   // Copy-Konstruktor
   cdbDictionary(const cdbDictionary& other);
   // Destruktor
   ~cdbDictionary();


   // Allgemeines
   // ===========

   // Name des Schemas ermitteln
   cString getSchemaName() const;


   // Zugeordnete Tabellen
   // ====================

   // Tabelleneintrag ueber Namen suchen
   int findTable(cString table_name) const;

   // Anzahl Tabelleneintraege ermitteln
   int getTableCount() const;
   // Tabellenname ueber Index ermitteln
   cString getTableName(int idx) const;
   // Tabelleneintrag ueber Index ermitteln
   cdbDictTable getTable(int idx) const;


private:
   void *dc_base;

};


#endif

/*.EH.*/
