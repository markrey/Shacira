/*.SH.*/

/*
 *  Headerfile for module edb_cursor_ex
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  edb_cursor_ex.cpp on Wednesday March 20 2002  22:46:05
 */

#ifndef __edb_cursor_ex__
#define __edb_cursor_ex__


// Headerfiles
// ===========================================================================

#include "store/es_store.hpp"
#include "dbi/edb_cursor.hpp"


// ===========================================================================
// Definition cdbCursorEx
// ---------------------------------------------------------------------------
//
// cBase
//  +--cdbCursor
//      +--cdbCursorEx
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdbCursorEx : public cdbCursor {

public:
   cdbCursorEx(cdbDatabase& db, int prefetch_count = 1);
   cdbCursorEx(const cdbCursor& cursor, int prefetch_count = -1);
   cdbCursorEx(const cdbCursorEx& other, int prefetch_count = -1);
   ~cdbCursorEx();


   // Ausfuehrungskontrolle
   // =====================

   // SQL-Anweisung ausfuehren (nach dem Binden von Variablen)
   void exec();
   // SQL-Anweisung direkt ausfuehren (ohne gebundene Variablen)
   void exec(SQL::STMT sql_str);


   // Feld- (=Spalten-) beschreibung
   // ==============================
   // Diese Eigenschaften stehen fruehestens nach dem Aufruf
   // von exec() zur Verfuegung.

   // Ermittelt die Anzahl der Felder im Datensatz
   int getFieldCount() const;

   // Ermittelt den Typ eines Feldes
   csStorage::TYPE getFieldType(int fld) const;
   // Ermittelt die maximale Groesse eines Feldes
   int getFieldBufferSize(int fld) const;
   // Label des Feldes erfragen
   cString getFieldLabel(int fld) const;
   // Ermittelt den Namen eines Feldes
   cString getFieldName(int fld) const;
   // Ermittelt den Namen des Feldes in der Basistabelle
   cString getFieldBaseName(int fld) const;
   // Ermittelt den Namen der Basistabelle
   cString getFieldBaseTableName(int fld) const;

   // Maximale Feldbreite [Zeichen]
   int getFieldWidth(int fld) const;
   // Anzahl Nachkommastellen [Zeichen]
   int getFieldPrec(int fld) const;

   // Titel der Spalte
   cString getTitleText(int fld) const;


   // Erfragefunktionen fuer aktuellen Datensatz
   // ==========================================

   // Ermittelt den NULL-Wert des Feldes
   bool isNull(int fld) const;

   // Ermittelt den int-Wert eines Feldes
   bool get(int fld, int& buf) const;
   // Ermittelt den double-Wert eines Feldes
   bool get(int fld, double& buf) const;
   // Ermittelt den cTime-Wert eines Feldes
   bool get(int fld, cTime& buf) const;
   // Ermittelt den cDate-Wert eines Feldes
   bool get(int fld, cDate& buf) const;
   // Ermittelt den cDateTime-Wert eines Feldes
   bool get(int fld, cDateTime& buf) const;
   // Ermittelt den char-Wert eines Feldes
   bool get(int fld, char& buf) const;
   // Ermittelt den cString-Wert eines Feldes
   bool get(int fld, cString& buf) const;


private:
   void *vars;
   void redefineVars();

};


#endif

/*.EH.*/
