/*.SH.*/

/*
 *  Headerfile for module edb_field
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  edb_field.cpp on Wednesday March 20 2002  22:46:29
 */

#ifndef __edb_field__
#define __edb_field__


// Headerfiles
// ===========================================================================

#include "store/es_field.hpp"


// ===========================================================================
// Definition cdbField
// ---------------------------------------------------------------------------
//
// cBase
//  +--csBaseStorage
//      +--csStorage
//          +--csField
//              +--cdbField
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdbField : public csField {
   ECL_DECLARE(cdbField,csField)
   friend class cdbRow;

public:
   // Default-Konstruktor
   cdbField(cdbRow *row, cString field_name, int flags = 0);
   // Default-Konstruktor
   cdbField(cdbRow *row, cString field_name, int width, int prec, int flags = 0);
   // Default-Konstruktor
   cdbField(cdbRow *row, cString field_name, TYPE type, int flags = 0);
   // Default-Konstruktor
   cdbField(cdbRow *row, cString field_name, TYPE type, int width, int prec, int flags = 0);
   // Destruktor
   ~cdbField();


   // Flags
   // =====

   enum FLAGS { fStart = csStorage::fUser,
      fUser        = fStart << 0   // Benutzerdefinierte Flags
   };


   // Allgemein
   // =========

   // Name des zugeordneten Feldes erfragen
   inline cString getFieldName() const
      { return field_name; }


protected:

   // Ueberschriebene Events
   // ======================

   // Eigenschaften
   // -------------

   // Wird aufgerufen, um den Typ des Feldes zu erfragen
   TYPE onGetType() const;
   // Wird aufgerufen, um die Anzeigebreite des Feldes zu erfragen
   int onGetWidth() const;
   // Wird aufgerufen, um die Anzahl Nachkommstellen des Feldes zu erfragen
   int onGetPrec() const;


   // Werte erfragen
   // --------------

   // Variable als int abfragen
   bool onGetInt(int& buf) const;
   // Variable als double abfragen
   bool onGetDouble(double& buf) const;
   // Variable als cTime abfragen
   bool onGetTime(cTime& buf) const;
   // Variable als cDate abfragen
   bool onGetDate(cDate& buf) const;
   // Variable als cDateTime abfragen
   bool onGetDateTime(cDateTime& buf) const;
   // Variable als char abfragen
   bool onGetChar(char& buf) const;
   // Variable als String abfragen
   bool onGetString(cString& buf) const;


   // Sonstiges
   // ---------

   // Groesse des Pufferspeichers ermitteln
   int onGetBufferSize() const;
   // Sinnvolle maximale Groesse eines Eingabefeldes ermitteln
   int onGetMaskLength() const;
   // Ist die Variable NULL?
   bool onCheckNull() const;


protected:

   // Intern: Setzen des Puffers und des NULL-Zustandes (fuer cdbRow)
   void initFrom(const void *data, int size, bool null)
      { csField::initFrom(data, size, null); }


private:

   cdbRow *row;
   cString field_name;

};


#endif

/*.EH.*/
