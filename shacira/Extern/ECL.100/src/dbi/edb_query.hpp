/*.SH.*/

/*
 *  Headerfile for module edb_query
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  edb_query.cpp on Wednesday March 20 2002  22:46:39
 */

#ifndef __edb_query__
#define __edb_query__


// Headerfiles
// ===========================================================================

#include "store/es_query.hpp"
#include "dbi/edb_cursor_ex.hpp"
#include "dbi/edb_transaction.hpp"
#include "base/eb_sema.hpp"


// ===========================================================================
// Definition cdbQuery
// ---------------------------------------------------------------------------
//
// Erweitert die csQuery-Klasse zur echten Datenbank-Abfrage. Die eigentliche
// Abfrage erfolgt unter Verwendung eines cTable-Objektes in einem Hintergrund-
// Thread (via cdbTransaction-Objekt).
//
// cBase
//  +--cBaseStorage
//      +--csQuery
//          +--cdbQuery
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdbQuery : public csQuery, public cdbTAObject {
   ECL_DECLARE(cdbQuery,csQuery)

public:

   // Konstruktor fuer "einfache" Datenbankabfrage
   cdbQuery(cdbTransaction *ta, int flags, SQL::SELECT select);
   // Konstruktor fuer hierarchische Datenbankabfrage
   cdbQuery(cdbTransaction *ta, int flags, SQL::SELECT select,
            SQL::WHERE connect_by, SQL::WHERE start_with);
   // Modify-Copy-Konstruktor
   cdbQuery(const cdbQuery& other, int flags = 0,
            SQL::WHERE add_where = SQL::WHERE());
   // Destruktor
   ~cdbQuery();


   // Parametervariablen
   // ==================

   // Binden von Parametervariablen
   void bind(int n, csStorage& var);
   // Bindung an Variable entfernen
   void bind(int n);
   // Gebundene Parametervariable ermitteln
   csStorage *getBoundVar(int n) const;


   // Sonstiges
   // =========

   // SQL-SELECT-Anweisung erfragen
   inline SQL::SELECT getSQL() const
      { return select; }
   // SQL-SELECT-Anweisung setzen
   inline void setSQL(SQL::SELECT sql)
      { select = sql; }

   // Defaultwert von Feld 'fld' erfragen (fuer neuen Datensatz)
   inline cString getNewRowDefValue(int fld, cString suggested_value = cString()) const
      { return onGetNewRowDefValue(fld, suggested_value); }
   // Zusaetzliches Einfuege-Statement erfragen (fuer neuen Datensatz)
   inline cString getNewRowAddStmt(int stmt) const
      { return onGetNewRowAddStmt(stmt); }


protected:

   // Events
   // ======

   // Ereignisgesteuerte Abfragesteuerung
   // -----------------------------------

   // Wird aufgerufen, um ereignisgesteuerte Abfrage zu starten
   bool onStart(const EVENT& event);
   // Wird aufgerufen, um Ereignisgesteuerte Einzelabfrage zu starten
   bool onStart1(const EVENT& event, cString key);
   // Wird aufgerufen zum vorzeitigen Beenden der Abfrage
   bool onStop();
   // Wird aufgerufen, um die Hauptschleife der Abfrage zu realisieren
   bool onLoop(const EVENT& event);


   // Sequentielle Abfragesteuerung
   // -----------------------------

   // Wird aufgerufen, um sequentielle Abfrage zu starten
   bool onOpen();
   // Wird aufgerufen, um sequentielle Abfrage zu beenden
   void onClose();
   // Wird aufgerufen, um an die Position vor dem ersten Datensatz zu springen
   bool onRewind();
   // Wird aufgerufen, um zum naechsten Datensatz zu gehen und diesen laden
   bool onFetch();


   // Verfuegbarkeit von Informationen
   // --------------------------------

   // Wird aufgerufen, um die aktuelle Verfuegbarkeit zu pruefen
   bool onCheckAvailability(QUERY_INFOS qci) const;


   // Einfuegen neuer Datensaetze
   // ---------------------------

   // Wird aufgerufen, um den Schluesselwert eines neuen Datensatzes zu ermitteln
   virtual cString onGetNewRowKey() const;
   // Wird aufgerufen, um den Defaultwert des 'fld'-ten Feldes zu ermitteln
   virtual cString onGetNewRowDefValue(int fld, cString suggested_value) const;
   // Wird aufgerufen, um die zusaetzlichen Einfuege-Statements zu erfragen
   virtual cString onGetNewRowAddStmt(int stmt) const;


   // Sortierung
   // ----------

   // Wird aufgerufen, um die Sortierreihenfolge der Abfrage festzulegen
   void onSetOrder(int *fld, int *dir, int count);


   // Ausfuehrung (aus cdbTAObject)
   // -----------------------------

   // Wird aufgerufen, um die Aktion 'func' auszufuehren
   void onExecAction(cdbDatabase *db, int func);
   // Wird aufgerufen, um den Abbruch der aktuellen Aktion anzufordern
   void onStopAction();
   // Wird aufgerufen, um eine textuelle Signatur der Aktion zu ermitteln
   cString onGetSignature();


   // Beschreibung
   // ------------

   // Wird aufgerufen, um die Gesamtbeschreibung der Abfrage zu ermitteln (QUERY_STYLE)
   int onGetQueryStyle() const;
   // Wird aufgerufen, um die Anzahl Felder im Datensatz zu ermitteln
   int onGetQueryFieldCount() const;
   // Wird aufgerufen, um den Wert des Schluesselfeldes 'key_name' zu ermitteln
   cString onGetKeyValue(cString key_name) const;

   // Wird aufgerufen, um die Beschreibung einer Spalte zu ermitteln (FIELD_STYLE)
   int onGetFieldStyle(int fld) const;
   // Wird aufgerufen, um den Typ eines Feldes zu ermitteln
   TYPE onGetFieldType(int fld) const;

   // Wird aufgerufen, um den Namen eines Feldes zu ermitteln
   cString onGetFieldName(int fld) const;
   // Wird aufgerufen, um den Titel der Spalte zu ermitteln
   cString onGetTitleText(int fld) const;

   // Wird aufgerufen, um den Tabellennamen eines Feldes zu ermitteln
   cString onGetRecordBaseName(int fld) const;
   // Wird aufgerufen, um den Basisnamen eines Feldes zu ermitteln
   cString onGetRecordBaseFieldName(int fld) const;

   // Wird aufgerufen, um die maximale Groesse eines Feldes zu ermitteln
   int onGetFieldBufferSize(int fld) const;
   // Wird aufgerufen, um die guenstigste Anzeigebreite zu ermitteln
   int onGetFieldViewSize(int fld) const;
   // Wird aufgerufen, um die maximale Feldbreite zu ermitteln
   int onGetFieldWidth(int fld) const;
   // Wird aufgerufen, um die Anzahl Nachkommastellen zu ermitteln
   int onGetFieldPrec(int fld) const;


   // Werte erfragen
   // --------------

   // Wird aufgerufen, um den NULL-Zustand des Feldes zu ermitteln
   bool onGetNull(int fld) const;

   // Wird aufgerufen, um einen int-Wert aus Feld 'fld' zu lesen
   bool onGetInt(int fld, int& buf) const;
   // Wird aufgerufen, um einen double-Wert aus Feld 'fld' zu lesen
   bool onGetDouble(int fld, double& buf) const;
   // Wird aufgerufen, um einen cTime-Wert aus Feld 'fld' zu lesen
   bool onGetTime(int fld, cTime& buf) const;
   // Wird aufgerufen, um einen cDate-Wert aus Feld 'fld' zu lesen
   bool onGetDate(int fld, cDate& buf) const;
   // Wird aufgerufen, um einen cDateTime-Wert aus Feld 'fld' zu lesen
   bool onGetDateTime(int fld, cDateTime& buf) const;
   // Wird aufgerufen, um einen char-Wert aus Feld 'fld' zu lesen
   bool onGetChar(int fld, char& buf) const;
   // Wird aufgerufen, um einen cString-Wert aus Feld 'fld' zu lesen
   bool onGetString(int fld, cString& buf) const;


private:

   struct QUERY_DATA;         // Deklaration des Datentyps fuer interne Daten
   QUERY_DATA *qd;            // Zeiger auf interne Daten

   SQL::SELECT select;        // SQL-SELECT-String
   SQL::WHERE connect_by;     // Link-Bedingung fuer hierarchische Abfrage
   SQL::WHERE start_with;     // Top-Bedingung fuer hierarchische Abfrage

   // Ausfuehren der Aktionen bei onStart()
   void execStart(cdbDatabase *db);
   // Ausfuehren der Aktionen bei onStart1()
   void execStart1(cdbDatabase *db);
   // Ausfuehren der Aktionen bei onOpen()
   void execOpen(cdbDatabase *db);
   // Ausfuehren der Aktionen bei onClose()
   void execClose(cdbDatabase *db);
   // Ausfuehren der Aktionen bei onRewind()
   void execRewind(cdbDatabase *db);
   // Ausfuehren der Aktionen bei onFetch()
   void execFetch(cdbDatabase *db);

   // Link-Bedingung aus 'connect_by', 'start_with' und getParentKeys() erzeugen
   SQL::WHERE makeLinkCond() const;
   // Wird aufgerufen, um den Wert des Schluesselfeldes 'key_name' zu ermitteln
   cString getKeyValue2(cString key_name) const;

   // Query-Data erzeugen, falls noch nicht vorhanden
   void makeQueryData();

};


#endif

/*.EH.*/
