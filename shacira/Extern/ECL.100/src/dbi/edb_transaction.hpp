/*.SH.*/

/*
 *  Headerfile for module edb_transaction
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  edb_transaction.cpp on Friday August 17 2001  22:55:03
 */

#ifndef __edb_transaction__
#define __edb_transaction__


// Headerfiles
// ===========================================================================

#include "base/eb_event.hpp"
#include "base/eb_sema.hpp"
#include "dbi/edb_database.hpp"

class cWorker;


// ===========================================================================
// cdbTAObject
// ---------------------------------------------------------------------------
//
// cdbTAObject
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdbTAObject {
   friend class cdbTransaction;
   friend class cWorker;

public:

   // Allgemeines
   // ===========

   // Zeiger auf zugehoerige cdbTransaction ermitteln
   cdbTransaction *getTA()
      { return ta; }
   // const-Zeiger auf zugehoerige cdbTransaction ermitteln
   const cdbTransaction *getTA() const
      { return ta; }

   // Zeiger auf zugehoerige cdbDatabase ermitteln
   cdbDatabase * getDB();
   // const-Zeiger auf zugehoerige cdbDatabase ermitteln
   const cdbDatabase * getDB() const;


protected:

   // Konstruktor
   // ===========

   // Konstruktor (nur protected), da virtuelle Basisklasse
   cdbTAObject(cdbTransaction *ta);
   // Konstruktor (nur protected), da virtuelle Basisklasse
   cdbTAObject(cdbTransaction& ta);
   // Konstruktor (nur protected), da virtuelle Basisklasse
   cdbTAObject(const cdbTAObject& other);


   // Ausfuehrungskontrolle
   // =====================

   // Asynchrones Starten von Funktion 'func' der Aktion
   void startAction(int func, const cEventTarget::EVENT& event = cEventTarget::EVENT());
   // Synchrones Starten von Funktion 'func' der Aktion
   bool callAction(int func, const cEventTarget::EVENT& event = cEventTarget::EVENT());


   // Events
   // ======

   // Wird aufgerufen, um die Aktion 'func' auszufuehren
   virtual void onExecAction(cdbDatabase *db, int func) = 0;
   // Wird aufgerufen, um den Abbruch der aktuellen Aktion anzufordern
   virtual void onStopAction() = 0;
   // Wird aufgerufen, um eine textuelle Signatur der Aktion zu ermitteln
   virtual cString onGetSignature() = 0;


private:
   cdbTransaction *ta;

};


// ===========================================================================
// cdbTransaction
// ---------------------------------------------------------------------------
//
// Ein Objekt der cdbTransaction-Klasse kann als eine Art erweitertes,
// asynchron ablaufendes cdbDatabase-Objekt verstanden werden. Dem
// cdbTransaction-Objekt koennen Meldungen der Form "Fuehre Query aus" oder
// "Bearbeite Datensatz" geschickt werden, die ueber das tatsaechlich in
// einem zweiten (secondary) Thread liegende cdbDatabase-Objekt bearbeitet
// werden.
//
// Das Ende jeder Operation kann durch einen Event signalisiert werden. Dabei
// wird als Parameter der Zeiger auf ein temporaeres Fehlerobjekt uebergeben
// (im Normalfall wird dieses Objekt mit errNoError konstruiert). Der Prototyp
// der Event-Funktion ist:
//
//    void (cEventTarget::*EVFUNC_P)(void *err);
//
// cBase
//  +--cdbTransaction
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdbTransaction : public cBase, public cEventSource {
   friend class cdbTAObject;

public:

   // Konstruktion ueber Datenbank-Anmeldeparameter
   cdbTransaction(cdbDatabase::DB_TYPE type, cString dsn, cString uid, cString pwd);
   // Konstruktion ueber anderes TA-Objekt (Copy-Konstruktor)
   cdbTransaction(const cdbTransaction& other);
   // Konstruktion ueber bestehendes Datenbankobjekt
   cdbTransaction(const cdbDatabase& db);
   // Destruktor
   virtual ~cdbTransaction();


   // Allgemeines
   // ===========

   // Prueft, ob aktive Datenbank-Verbindung vorhanden
   bool isConnected() const;
   // Liefert einen Zeiger auf die benutzte Datenbank
   cdbDatabase *getDB();
   // Liefert einen const-Zeiger auf die benutzte Datenbank
   const cdbDatabase *getDB() const;
   // Transaktionsebene (Anzahl aktiver Begin-/End-Paare)
   int getLevel() const
      { return ta_level; }


   // Transaktionskontrolle
   // =====================
   // Jede Transaktion muss mit einem Begin/End-Paar geklammert werden. Normaler-
   // weise wird durch die End-Methode ein COMMIT ausgefuehrt, dieses Verhalten
   // kann jedoch durch den Parameter teRollback in ein ROLLBACK geaendert werden.
   // Bei geschachtelten Transaktionen wird kein COMMIT bzw. ein ROLLBACK TO
   // SAVEPOINT ausgefuehrt. Die Terminate-Eventfunktion erhaelt im ersten Parameter
   // ein OK-Flag (BOOL), bei COMMIT bzw. ROLLBACK zusaetzlich im zweiten Parameter
   // die Nummer des Savepoints.

   enum TBEGIN {        // Modi fuer begin():
      tbReadWrite,      //  - Normale Schreib-/Lese-Transaktion
      tbReadOnly,       //  - Transaktion ohne Schreibzugriffe (nicht implementiert)
      tbShort           //  - Besonders kurze Transaktion (nicht implementiert)
   };

   enum TEND {          // Modi fuer end():
      teCommit,         //  - Speichern, falls letzte geschachtelte Transaktion
      teRollback,       //  - Verwerfen bis zum vorigen Begin() der gesch. TA
      teIgnore          //  - Optimierung: TA ohne Commit oder Rollback beenden
   };

   // Markiert den Beginn einer Transaktion
   void begin(TBEGIN tb = tbReadWrite, const EVENT& event = EVENT());
   // Markiert das Ende einer Transaktion
   void end(TEND te = teCommit, const EVENT& event = EVENT());


   // Daten sichern
   // -------------
   // In manchen Faellen kann es sinnvoll sein, geaenderte Daten bereits vor dem
   // eigentlichen Transaktionsende zu sichern. Die Save-Methode fuehrt unabhaengig
   // von der aktuellen Begin-/End-Verschachtelung ein COMMIT aus und fuehrt an-
   // schliessend wieder soviele SAVEPOINTs aus wie noetig.

   // Bisherige Aenderungen speichern
   void saveAll(const EVENT& event = EVENT());


protected:

   // Ausfuehrungskontrolle
   // =====================

   // Asynchrones Starten einer Aktion
   void startAction(cdbTAObject *ta_obj, int func, const EVENT& event);
   // Synchrones Starten einer Aktion
   bool callAction(cdbTAObject *ta_obj, int func, const EVENT& event);


private:

   cWorker *worker;        // Zeiger auf ausfuehrendes Thread-Objekt
   int ta_level;           // Aktueller Transaktionslevel

};


#endif

/*.EH.*/
