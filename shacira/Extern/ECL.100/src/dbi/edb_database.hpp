/*.SH.*/

/*
 *  Headerfile for module edb_database
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  edb_database.cpp on Saturday March 23 2002  11:34:38
 */

#ifndef __edb_database__
#define __edb_database__


// Headerfiles
// ===========================================================================

#include "base/eb_base.hpp"
#include "base/eb_err.hpp"
#include "base/eb_str.hpp"


// ===========================================================================
// Definition cdbErr
// ---------------------------------------------------------------------------
//
// cBase
//  +--cErrBase
//      +--cdbErr
//
// ===========================================================================

class cdbDatabase;
class cdbCursor;
class cdbRecord;

class __ECL_DLLEXPORT__ cdbErr : public cErrBase {

public:
   cdbErr(ERR_TYPE err, int db = 0);
   cdbErr(ERR_TYPE err, const char *msg);
   cdbErr(ERR_TYPE err, cdbDatabase& db);
   cdbErr(ERR_TYPE err, cdbCursor& cu);
   cdbErr(ERR_TYPE err, cdbRecord& rec);

   enum ERR_CODE { errBase = ERR_PREFIX('D','B','I'),

      // Fehler
      errGeneralDbError   = errBase + errError +  0, // (X) Allgemeiner Datenbankfehler
      errDbTypeNotSupported                        , // (X) Datenbanktyp nicht unterstuetzt
      errLoginFailed                               , // (X) Fehler beim LOGIN an Datenbank
      errResourceTimeout                           , // (X) Timeout beim Zugriff auf eine Resource
      //
      errOpenTableFailed  = errBase + errError +  5, // (X) Fehler beim Oeffnen einer Tabelle (RECORD)
      errResourceBusy                              , // (X) Resource momentan nicht bereit (RECORD)
      errAccessViolation                           , // (X) Datensatz seit letztem Zugriff geaendert (RECORD)
      //
      errAllocEnvFailed   = errBase + errError + 10, // (X) Anforderung einer Umgebung fehlgeschlagen (SQL)
      errAllocConnectFailed                        , // (X) Anforderung einer Verbindung fehlgeschlagen (SQL)
      errAllocCursorFailed                         , // (X) Anforderung eines Cursors fehlgeschlagen (SQL)
      //
      errDefineColFailed  = errBase + errError + 20, // (X) Fehler beim Definieren von Ergebnisspalten
      errBindParamFailed                           , // (X) Fehler beim Binden von Parametervariablen
      errBindParamMissing                          , // (X) Benoetigte Parametervariable nicht gebunden
      errBindStaticFailed                          , // (X) Fehler beim Binden einer statischen Parametervariable
      errSetLockModeFailed                         , // (X) Fehler beim Setzen des Zugriffsmodes
      errCompileFailed                             , // (X) Fehler bei der Analyse einer SQL-Anweisung
      errExecFailed                                , // (X) Fehler beim Ausführen einer SQL-Anweisung
      errFetchFailed                               , // (X) Fehler beim Lesen von der Datenbank
      //
      errNoDataFound      = errBase + errError + 30, // (X)
      //
      errDuplicateKey     = errBase + errError + 40, // ( )
      errBindType                                  , // ( )
      errFetchOutOfSeq                             , // ( )
      errVarNotInList                              , // ( )
      errColumnNull                                , // ( )
      errColumnTooLarge                            , // ( )
      errNullFetched                               , // ( )
      errColumnTrunc                               , // ( )
      errColumnUpdNull                             , // ( )
      errRowidInvalid                              , // ( )
      errValueTooLarge                             , // ( )
      errRowidUnavail                              , // ( )
      errRowidUnavail2                             , // ( )
      errRealOverflow                              , // ( )
      errCheckConstraint                           , // ( )
      errNoParentRecord                            , // ( )
      errChildRecords                              , // ( )
      errNoTrunc                                   , // ( ) IsTruncated() nicht moeglich
      errNoRetcValue                               , // ( ) retc-Code nicht moeglich
      errAutoCommitFailed                          , // ( )

   };

};


// ===========================================================================
// Definition cdbDatabase
// ---------------------------------------------------------------------------
//
// Diese Klasse repraesentiert eine Verbindung zu einer Datenbank. Im Kon-
// struktor kann zwischen folgenden Datenbanktypen gewaehlt werden:
//
//    - DUMMY - Dummy Interface (ohne Funktionalitaet)
//    - OCI - Oracle Call Interface
//    - BTI - Btrieve ISAM
//    - ODBC - Open Database Connectivity
//
// cBase
//  +--cdbDatabase
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdbDatabase : public cBase {

public:
   enum DB_TYPE {
      DUMMY,         // Dummy Interface
      OCI,           // Oracle Call Interface
      BTI,           // Btrieve ISAM
      ODBC           // Open Database Connectivity
   };

   cdbDatabase(DB_TYPE type, cString dsn, cString uid, cString pwd = NULL);
   cdbDatabase(const cdbDatabase& other);
   ~cdbDatabase();

   bool isConnected() const;
   bool isAutoCommit() const;

   DB_TYPE getType() const { return type; }
   cString getName() const;

   bool supportsCursors() const;
   bool supportsRecords() const;
   bool supportsDictionary() const;

   bool login(cString dsn, cString uid, cString pwd = cString());
   bool logout();

   bool setAutoCommit(bool yeah = false);
   bool setSavepoint(int num = 0);
   bool rollback(int to_num = 0);
   bool commit();

   cString getDSN() const;
   cString getUID() const;

   long getDriverInfo(int code) const;
   cString getLastErrorMsg() const;

private:
   DB_TYPE type;
   void *db_base;

};


#endif

/*.EH.*/
