/*.SH.*/

/*
 *  Headerfile for module et_tools
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  et_tools.cpp on Thursday February 15 2001  13:12:36
 */

#ifndef __et_tools__
#define __et_tools__


class cTomTools {

};

/**.SC.***********************************************************************
*
*  MACRONAME:
*     ToTo_PUSH - Variable auf Stack sichern
*     ToTo_POP - Variable von Stack holen
*
*  AUFRUF
*     ToTo_PUSH( type, ptr, minlen, token )
*     ToTo_POP( type, ptr, minlen, token )
*
*  PARAMETER:
*     type IN [int] - Variablentyp
*     ptr IN [void*] - Zeiger auf Variable
*     minlen IN [int] - signifikante Laenge
*     token IN [char*] - Tokenstring
*
*  BEMERKUGEN:
*     Es werden alle Datentypen ausser _TEXT und _STR unterstuetzt.
*
**.EC.***********************************************************************/

#define ToTo_PUSH( type , varptr , min , token ) \
   Tom_UWP( ToTo_Push , (type) , (varptr) , (min) , (token) )

#define ToTo_POP( type , varptr , min , token ) \
   Tom_UWP( ToTo_Pop , (type) , (varptr) , (min) , (token) )


/**.SC.***********************************************************************
*
*  MACRONAME:
*     ToTo_ADR - Variablenadresse ausgeben
*
*  AUFRUF
*     ToTo_ADR( type, ptr, minlen, token )
*
*  PARAMETER:
*     type IN [int] - Variablentyp
*     ptr IN [void*] - Zeiger auf Variable
*     minlen IN [int] - signifikante Laenge
*     token IN [char*] - Tokenstring
*
**.EC.***********************************************************************/

#define ToTo_ADR( type , varptr , min , token ) \
   Tom_UWP( ToTo_Adr , (type) , (varptr) , (min) , (token) )


/* --- Funktionen der offiziellen Schnittstelle --- */
__ECL_EXP1__ void __ECL_EXP2__ ToTo_Init ( void );
__ECL_EXP1__ void __ECL_EXP2__ ToTo_Exit ( void );
__ECL_EXP1__ char * __ECL_EXP2__ ToTo_Push ( char* , Tom_TYPE* );
__ECL_EXP1__ char * __ECL_EXP2__ ToTo_Pop ( char* , Tom_TYPE* );
__ECL_EXP1__ char * __ECL_EXP2__ ToTo_Adr ( char* , Tom_TYPE* );
__ECL_EXP1__ char * __ECL_EXP2__ ToTo_Tree ( char* , Tom_TYPE* );
__ECL_EXP1__ void __ECL_EXP2__ ToTo_View ( char* , int , void* );

__ECL_EXP1__ const Tom_TYPE * __ECL_EXP2__ ToTo_Root ( );
__ECL_EXP1__ const Tom_TYPE * __ECL_EXP2__ ToTo_VarOp ( );
__ECL_EXP1__ const Tom_TYPE * __ECL_EXP2__ ToTo_MaskOp ( );


#endif

/*.EH.*/
