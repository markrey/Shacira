/*.SH.*/

/*
 *  Headerfile for module et_concli
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  et_concli.cpp on Thursday February 15 2001  13:12:35
 */

#ifndef __et_concli__
#define __et_concli__


#include "base/eb_base.hpp"
#include "base/eb_str.hpp"
#include "base/eb_msg.hpp"
#include "base/eb_thread.hpp"

// ---------------------------------------------------------------------------
// Deklaration cWatchDog

class __ECL_DLLEXPORT__ cWatchDog : public cThread {
   cMsgRecipient alarm_box;   // Alarmempfaenger mit garantierter Existenz
   int alarm_msg_id;          // Alarmmeldung (nur Id)

   long sleep_ms;             // Zeit zwischen zwei Kontrollen
   long counter;              // Zaehler der beiFuss-Aufrufe
   bool ignore;               // Alarm unterbinden

   bool is_alive;             // Flag zum Beenden des Thread

public:
   cWatchDog( cString msg_box, int msg_id, long intervall_ms=1000 );
   ~cWatchDog();

   int onMain( void *extra );

   void beiFuss() { counter++; }
   void sitz() { ignore = true; }
   void fass() { ignore = false; }
};


class __ECL_DLLEXPORT__ cConClient : public cBase {
   cWatchDog      *lassie;    // Wachhund

   cMsgBox        *inbox;     // Client
   cMsgRecipient  *outbox;    // Server

   cString server_name;
   cString client_name;

   typedef const char * CCP;  // fuer tippfreundlichen cast

   enum WAIT { DONT_WAIT, PLEASE_WAIT };

public:
   // Zustand des Clients
   enum STATE {
      stLogout=0,          // normaler Betrieb
      stLogin=1,         // warten auf Login
      stEnd=99             // Programmende
   } state;

   // Meldungen, die der Client vom Server empfangen kann
   enum MESSAGES {
      msgPuts=20,       // <string>\0     - Ausgabe
      msgGetsReq,       // [buffersize]   - Eingabe (cgets-style)
      msgLoginAck,      //                - Bestaetigung fuer msgLogin
      msgLogoutAck,     //                - Bestaetigung fuer msgLogout
      msgServerLost,    //                - Server hat jetzt anderen Client :-(
      msgWauWau         //                - Alarm vom Wachhund
   };

   cConClient( cString in, cString out );
   virtual ~cConClient();

   // Meldungsschleife
   void onlineLoop();
   // Eingabeschleife
   void offlineLoop();
   // Zustand des Client abfragen
   STATE getState() { return state; }

private:
   // Empfangsfunktion
   bool /*ok*/ Receive( cMsg &msg, WAIT wait );

   // sichere Sendefunktion(en)
   bool /*ok*/ safeSend( cMsg msg, bool use_as_ping = false );
   // ... mit Messagekonstruktion (aber ohne Ping-Flag)
   bool /*ok*/ safeSend( int msg_id )
   { return safeSend( cMsg(msg_id) ); }
   bool /*ok*/ safeSend( int msg_id , const char *string )
   { return safeSend( cMsg(msg_id,strlen(string)+1,string) ); }
   bool /*ok*/ safeSend( int msg_id , const char *buffer, int size )
   { return safeSend( cMsg(msg_id,size,buffer) ); }

   int OS_PutS( const char *str);
   char *OS_GetS( char *str );

   // vorhandene Meldungen verwerfen
   void clearBox();
   // auf Antwort vom Server warten
   bool /*ok*/ waitForReply( int msg_id );

   // an Server anmelden
   void loginServer( cString server );
   // von Server abmelden
   void logoutServer();

   // Befehle an den Client auswerten
   void localCommand( const char *cmd );
};

#endif

/*.EH.*/
