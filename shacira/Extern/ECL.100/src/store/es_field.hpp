/*.SH.*/

/*
 *  Headerfile for module es_field
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  es_field.cpp on Wednesday March 20 2002  22:46:50
 */

#ifndef __es_field__
#define __es_field__


// Headerfiles
// ===========================================================================

#include "store/es_var.hpp"


// ===========================================================================
// Definition csField
// ---------------------------------------------------------------------------
//
// cBase
//  +--csBaseStorage
//      +--csStorage
//          +--csVar
//              +--csField
//
// ===========================================================================

class __ECL_DLLEXPORT__ csField : public csVar {
   ECL_DECLARE(csField,csVar)
   friend class csRow;

public:
   // Initialisierung als int-Variable
   csField(csRow *row, int& buf, int width = 11, int flags = 0);
   // Initialisierung als double-Variable
   csField(csRow *row, double& buf, int width = 21, int prec = 3, int flags = fThousandSep);
   // Initialisierung als cTime-Variable
   csField(csRow *row, cTime& buf, int flags = 0);
   // Initialisierung als cDate-Variable
   csField(csRow *row, cDate& buf, int flags = 0);
   // Initialisierung als cDateTime-Variable
   csField(csRow *row, cDateTime& buf, int flags = 0);
   // Initialisierung als char-Variable
   csField(csRow *row, char& buf, int flags = 0);
   // Initialisierung als String-Variable
   csField(csRow *row, char *buf, int size, int flags = 0);
   // Initialisierung als beliebige Variable; Puffer wird automatisch allokiert
   csField(csRow *row, TYPE type, int size, int width = 0, int prec = 0, int flags = 0);
   // Destruktor
   ~csField();


   // Flags
   // =====

   enum FLAGS { fStart = csStorage::fUser,
      fUser          = fStart << 0     // Benutzerdefinierte Flags
   };


   // Allgemeines
   // ===========

   // Zugeordnetes csRow-Objekt erfragen
   inline csRow *getRow() const
      { return row; }
   // Zugeordneter Index in csRow erfragen
   inline int getRowIndex() const
      { return row_index; }


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um zu pruefen, ob das Feld Read-Only ist
   bool onCheckReadOnly() const;


protected:

   // Intern: Konstruktor ohne 'buffer'-Initialisierung
   csField(csRow *row, int size, int width, int prec, int flags, TYPE type);

   // Intern: Setzen des Puffers und des NULL-Zustandes (fuer csRow)
   void initFrom(const void *data, int size, bool null)
      { csVar::initFrom(data, size, null); }
   // Intern: Verbindung zum csRow-Objekt trennen
   void unlink(bool remove_from_row);


private:

   csRow *row;
   int row_index;

};


#endif

/*.EH.*/
