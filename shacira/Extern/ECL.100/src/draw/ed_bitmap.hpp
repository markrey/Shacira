/*.SH.*/

/*
 *  Headerfile for module ed_bitmap
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ed_bitmap.cpp on Thursday February 15 2001  13:12:26
 */

#ifndef __ed_bitmap__
#define __ed_bitmap__


// Headerfiles
// ===========================================================================

#include "base/eb_geo2d.hpp"
#include "draw/ed_space.hpp"


// ===========================================================================
// Definition cdBmpDevice
// ---------------------------------------------------------------------------
//
//  cBase
//   +--cdDevice
//       +--cdRetainedDevice
//           +--cdBmpDevice
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdBmpDevice : public cdRetainedDevice {

public:
   cdBmpDevice(int width, int height, int bpp = 1);
   ~cdBmpDevice();

   void setView(long sx, long sy, double scale);
   void paintAt(cdStorage *elems, long sx, long sy);

   // Save the bitmap in Windows DIB format
   void saveAsDIB(cString filename) const;

   // Breite der Bitmap in Pels erfragen
   int getWidth() const
      { return width; }
   // Hoehe der Bitmap in Pels erfragen
   int getHeight() const
      { return height; }
   // Anzahl Bits pro Pel erfragen
   int getBpp() const
      { return bpp; }

   // Groesse einer Scanline in Bytes erfragen
   long getLineSize() const;
   // Groesse der Bitmap (Nutzdaten) in Bytes erfragen
   long getSize() const;

private:
   int width, height, bpp;
   long start_x, start_y;
   double scale;

   #if defined __OS2__
      unsigned long hbm;         // Momentan selektiertes Bitmap
      unsigned long hbm_prev;    // Vorher selektiertes Bitmap
   #endif

};


// ===========================================================================
// Definition cdBmpSpace
// ---------------------------------------------------------------------------
//
//  cBase
//   +--cdSpace
//       +--cdBmpSpace
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdBmpSpace : public cdSpace {

public:
   cdBmpSpace(cdBmpDevice *dev);
   ~cdBmpSpace();

   void beginDrawing();
   void endDrawing();

   void paintAsync();

   void setViewport(const cdViewport& viewport);
   const cdViewport& getViewport() const
      { return viewport; }

   int convUnit2Pel(double unit) const;
   double convPel2Unit(int pel) const;

   // Konvertiere mm in Weltkoordinaten und zurueck
   long mm2w(double mm) const;
   double w2mm(long w) const;

private:
   cdViewport viewport;   // Aktueller Viewport
   cdBmpDevice *bmp_dev;   // Zugeordnetes Windows-Device
   cdStorage *elems;   // Zuletzt gemalte Elemente

};


// ===========================================================================
// Definition cdBitmap
// ---------------------------------------------------------------------------
//
//  cBase
//   +--cdBitmap
//
// ===========================================================================

class __ECL_DLLEXPORT__ cdBitmap : public cBase {

public:
   cdBitmap(int width, int height);

   // Viewport so einrichten, dass 'box' vollstaendig dargestellt wird;
   // Zwangsrahmen mit 'pixborder' Pixeln beruecksichtigen
   void zoom(const c2dBox& box, int pixborder = 10);

   // Zeichenbereich in Weltkoordinaten (mm) ermitteln
   c2dBox getDrawingArea() const;
   // Groesse des Zeichenbereiches in Weltkoordinaten (mm) ermitteln
   c2dSize getDrawingAreaSize() const;

protected:
   cdBmpDevice device;
   cdBmpSpace space;
   cdViewport vport;

};


#endif

/*.EH.*/
