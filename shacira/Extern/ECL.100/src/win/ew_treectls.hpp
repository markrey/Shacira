/*.SH.*/

/*
 *  Headerfile for module ew_treectls
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_treectls.cpp on Saturday December 15 2001  14:35:10
 */

#ifndef __ew_treectls__
#define __ew_treectls__


// Headerfiles
// ===========================================================================

#include "win/ew_listctls.hpp"
#include "store/es_var.hpp"


// ===========================================================================
// Definition cwTree
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwListCtl
//              +--cwTree
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwTree : public cwListCtl {
   ELO_DECLARE(cwTree,cwListCtl)
   friend class ccwTree;

public:

   // Konstruktor
   inline cwTree() : cwListCtl(0) { init(); }
   // Destruktor
   virtual ~cwTree();


   // Allgemeines
   // ===========

   // Erzeugen des Controls
   void create(cwWindow *parent, int id, csStorage *store, csQuery *query,
               int style = 0, const cdRect& rect = cdRect());
   // Liste zugeordneter Icons initialisieren
   void setIconList(const cwIconList& ilist);


   // window-Flags
   // ============

   enum FLAGS { wflStart = cwListCtl::wflUser,
      wflUser           = wflStart << 1   // Benutzerdefinierte Flags
   };


   // window-Styles
   // =============

   // Styles
   enum STYLES { wsStart = cwListCtl::wsUser,
      wsRootLines       = wsStart << 0,   // Tree hat Linien im Root-Level
      wsUser            = wsStart << 1    // Benutzerdefinierte Styles
   };


   // Verwaltung
   // ==========

   // Kindknoten von 'elem' aufklappen (Refresh erzwingen, wenn 'force_refresh' == true)
   void expandChilds(cwListElem *elem, bool force_refresh = false);
   // Kindknoten von 'elem' schliessen (Elemente loeschen, wenn 'remove_childs' == true)
   void collapseChilds(cwListElem *elem, bool remove_childs = false);
   // Ein bestimmtes Element sichtbar machen (evtl. durch Scroll/Aufklappen)
   void makeVisible(cwListElem *elem);


protected:

   // Zusaetzliche Events
   // ===================

   // Wird aufgerufen, bevor ein Teilbaum aufklappt (true = Aenderung zulassen)
   virtual bool onTreeExpanding(cwListElem *elem);
   // Wird aufgerufen, nachdem ein Teilbaum aufgeklappt wurde
   virtual void onTreeExpanded(cwListElem *elem);
   // Wird aufgerufen, bevor ein Teilbaum zuklappt (true = Aenderung zulassen)
   virtual bool onTreeCollapsing(cwListElem *elem);
   // Wird aufgerufen, nachdem ein Teilbaum zugeklappt wurde
   virtual void onTreeCollapsed(cwListElem *elem);


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, bevor sich die Selektion aendert (true = Aenderung zulassen)
   bool onSelectionChanging(cwListElem *elem);
   // Wird aufgerufen, wenn ein Element selektiert wurde
   void onSelectionChanged(cwListElem *elem);

   // Wird aufgrufen, um die Anzahl der selektierten Elemente zu ermitteln
   int onGetSelectedElemCount(bool walk) const;
   // Wird aufgerufen, um die selektierten Elemente zu ermitteln
   cwListElem *onGetSelectedElem(cwListElem *elem = 0, bool walk = false) const;
   // Wird aufgerufen, um die Selektion fuer ein einzelnes Element zu aendern
   bool onSelectElem(cwListElem *elem, bool sel);
   // Wird aufgerufen, um die Selektion fuer alle Elemente zu aendern
   bool onSelectAllElems(bool sel, cwListElem *parent, bool walk);

   // Wird aufgerufen, um das Element mit Cursor zu erfragen
   cwListElem *onGetCursoredElem() const;
   // Wird aufgerufen, um den Cursor auf ein Element zu setzen
   bool onSetCursoredElem(cwListElem *elem);

   // Wird aufgerufen, um ein Element an Position 'pos', 'ref_elem' anzuzeigen
   bool onInsertElemAt(int pos, cwListElem *ref_elem, cwListElem *new_elem, cwListElem *parent, bool invd);
   // Wird aufgerufen, um ein Element von der Anzeige zu entfernen
   bool onRemoveElem(cwListElem *elem, bool invd);
   // Wird aufgerufen, um alle Elemente von der Anzeige zu entfernen
   bool onRemoveAllElems(cwListElem *parent, bool invd);

   // Wird aufgerufen, wenn die Abfrage gestartet wurde, um den Listeninhalt zu loeschen
   bool onQueryStarted(csQuery *query);
   // Wird aufgerufen, wenn ein Datensatz verfuegbar ist, um ihn zur Liste hinzuzufuegen
   bool onQueryData(csQuery *query);
   // Wird aufgerufen, wenn die Abfrage beendet ist, um die Selektion anzeigen
   bool onQueryEnded(csQuery *query);
   // Wird aufgerufen, nachdem die Abfrage beendet wurde
   void onQueryPostEnd(csQuery *query);

   // Wird aufgerufen, wenn die Einzelabfrage gestartet wurde
   bool onQuery1Started(cwListElem *elem, csQuery *query);
   // Wird aufgerufen, wenn ein Datensatz der Einzelabfrage verfuegbar ist
   bool onQuery1Data(cwListElem *elem, csQuery *query);
   // Wird aufgerufen, wenn die Einzelabfrage beendet ist
   bool onQuery1Ended(cwListElem *elem, csQuery *query);

   // Wird aufgerufen, wenn die Einfuegeabfrage gestartet wurde
   bool onInsQueryStarted(cwListElem *before, cwListElem *parent, csQuery *query);
   // Wird aufgerufen, wenn ein Datensatz der Einfuegeabfrage verfuegbar ist
   bool onInsQueryData(cwListElem *before, cwListElem *parent, csQuery *query);
   // Wird aufgerufen, wenn die Einfuegeabfrage beendet ist
   bool onInsQueryEnded(cwListElem *before, cwListElem *parent, csQuery *query);
   // Wird aufgerufen, nachdem die Einfuegeabfrage beendet wurde
   void onInsQueryPostEnd(cwListElem *before, cwListElem *parent, csQuery *query);

   // Wird aufgerufen, um die durch 'mask' spezifizierten Window-Styles zu ermitteln
   int onGetStyles(int mask) const;
   // Wird aufgerufen, um Window-Styles zu setzen (add) und zu entfernen (remove)
   void onModifyStyles(int add, int remove, int os_add[], int os_remove[]);

   // Wird aufgerufen, wenn ein Element des Controls geloescht wird
   void onDeletingElement(cwListElem *elem);
   // Wird aufgerufen, um die Anzahl zusaetzlich benoetigter Bytes im Element zu erfragen
   int onGetAddByteCount() const;
   // Wird aufgerufen, um die Abfrage zu erfragen, die das Element erzeugt hat
   csQuery *onGetQueryOfElem(const cwListElem *elem, bool sub_query) const;

   // Kontextmenu anzeigen
   bool onContextMenu(const cwCmdPosition& cmd);


protected:

   // Interner Konstruktor
   cwTree(void *wnd);

private:

   // Initialisierung
   void init();

   // Struktur mit Zusatzinformationen
   struct ADD_INFO;
   // Zeiger auf Struktur mit Zusatzinformationen ermitteln
   ADD_INFO *getAddInfoPtr(const cwListElem *elem) const;

};


#endif

/*.EH.*/
