/*.SH.*/

/*
 *  Headerfile for module ew_cnrctls
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_cnrctls.cpp on Wednesday April 10 2002  23:36:05
 */

#ifndef __ew_cnrctls__
#define __ew_cnrctls__


// Headerfiles
// ===========================================================================

#include "win/ew_listctls.hpp"
#include "store/es_var.hpp"


// ===========================================================================
// Definition cwContainer
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwListCtl
//              +--cwContainer
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwContainer : public cwListCtl {
   ELO_DECLARE(cwContainer,cwListCtl)
   friend class ccwContainer;

public:

   // Konstruktor
   inline cwContainer() : cwListCtl(0) { init(); }
   // Destruktor
   virtual ~cwContainer();


   // window-Flags
   // ============

   enum FLAGS { wflStart = cwListCtl::wflUser,
      wflUser           = wflStart << 1   // Benutzerdefinierte Flags
   };


   // window-Styles
   // =============

   // Styles
   enum STYLES { wsStart = cwListCtl::wsUser,
      // Selektionsart
      wsCnrSingleSel    = (wsStart<<0),              // Maximal 1 selektiertes Element
      wsCnrMultipleSel  = (wsStart<<1),              // Mehrere selektierte Elemente
      wsCnrExtendedSel  = (wsStart<<0)|(wsStart<<1), // Auswahl erweitern mit SHIFT (Default)
      wsCnrSelMask      = (wsStart<<0)|(wsStart<<1), // Zum Ausmaskieren der Sel-Styles
      // Container-Views (exklusiv):
      wsCnrColumnView   = (wsStart<<2),              // View: Tabellarisch (Spalten) (Default)
      wsCnrIconView     = (wsStart<<3),              // View: Frei anordenbare Icons
      wsCnrListView     = (wsStart<<2)|(wsStart<<3), // View: Icons in Listenform angeordnet
      wsCnrViewMask     = (wsStart<<2)|(wsStart<<3), // Zum Ausmaskieren der View-Styles
      // Nur fuer ColumnView:
      wsCnrNoHeader     = wsStart << 4,      // Keine Spaltentitel anzeigen
      wsCnrNoHeaderBtn  = wsStart << 5,      // Spaltentitel nicht wie Buttons
      wsCnrNoHeaderDrag = wsStart << 6,      // Spaltentitel nicht anordenbar
      wsCnrFullRowSel   = wsStart << 7,      // Stets ganze Zeile selektieren
      wsCnrGridLines    = wsStart << 8,      // Tabellenrahmen um Elemente
      // Nur fuer IconView:
      wsCnrSmallIcons   = wsStart << 4,      // Kleine Icons verwenden
      wsCnrAutoArrange  = wsStart << 5,      // Icons automatisch anordnen
      // Weitere:
      wsCnrCheckBtns    = wsStart << 9,      // Checkbuttons sind moeglich
      wsUser            = wsStart << 10      // Benutzerdefinierte Styles
   };


   // Allgemeines
   // ===========

   // Erzeugen des Controls
   void create(cwWindow *parent, int id, csStorage *store = 0, csQuery *query = 0,
               int style = wsChild | wsVisible | wsTabStop | wsCnrColumnView | wsCnrExtendedSel,
               const cdRect& rect = cdRect());
   // Liste zugeordneter Icons initialisieren
   void setIconList(const cwIconList& ilist);


   // Spalten
   // =======

   // Anzahl Spalten erfragen
   int getColumnCount() const;

   // Neue Spaltenbreite in Pixel setzen (-1 = Autosize)
   bool setColumnWidth(int col, int pix_width = -1, bool use_header = false);
   // Spaltenbreite in Pixel erfragen
   int getColumnWidth(int col) const;

   // Anordnung der Spalten setzen ('order' enthaelt Indizes in Reihenfolge der Spalten)
   bool setColumnOrder(int count, int order[]);
   // Anordnung der Spalten erfragen
   bool getColumnOrder(int count, int order[]) const;


protected:

   // Hinzugefuegte Events
   // ====================

   // Wird aufgerufen, um den Klick auf einen Spaltentitel bekanntzugeben
   virtual void onColumnClick(int column_idx);


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, wenn ein Element selektiert wurde
   void onSelectionChanged(cwListElem *elem);
   // Wird aufgerufen, wenn Enter gedrueckt wurde oder bei Doppelklick
   void onListElemSelected(cwListElem *elem);

   // Wird aufgrufen, um die Anzahl der selektierten Elemente zu ermitteln
   int onGetSelectedElemCount(bool walk) const;
   // Wird aufgerufen, um die selektierten Elemente zu ermitteln
   cwListElem *onGetSelectedElem(cwListElem *elem = 0, bool walk = false) const;
   // Wird aufgerufen, um die Selektion fuer ein einzelnes Element zu aendern
   bool onSelectElem(cwListElem *elem, bool sel);
   // Wird aufgerufen, um die Selektion fuer alle Elemente zu aendern
   bool onSelectAllElems(bool sel, cwListElem *parent, bool walk);

   // Wird aufgerufen, um das Element mit Cursor zu erfragen
   cwListElem *onGetCursoredElem() const;
   // Wird aufgerufen, um den Cursor auf ein Element zu setzen
   bool onSetCursoredElem(cwListElem *elem);

   // Wird aufgerufen, um sicherzustellen, dass Element 'elem' sichtbar ist
   bool onEnsureElemVisible(cwListElem *elem, bool partial_ok);
   // Wird aufgerufen, um sicherzustellen, dass Feld 'fld' sichtbar ist
   bool onEnsureFieldVisible(int fld, bool partial_ok);

   // Wird aufgerufen, um ein Element an Position 'pos', 'ref_elem' anzuzeigen
   bool onInsertElemAt(int pos, cwListElem *ref_elem, cwListElem *new_elem, cwListElem *parent, bool invd);
   // Wird aufgerufen, um ein Element von der Anzeige zu entfernen
   bool onRemoveElem(cwListElem *elem, bool invd);
   // Wird aufgerufen, um alle Elemente von der Anzeige zu entfernen
   bool onRemoveAllElems(cwListElem *parent, bool invd);

   // Wird aufgerufen, um ein Element ueber dessen Index zu ermitteln
   cwListElem * onGetElemWithIndex(int idx) const;
   // Wird aufgerufen, um das Rechteck fuer das Edit-Control zu ermitteln
   cdRect onGetEditRect(cwListElem *elem, int fld) const;

   // Wird aufgerufen, wenn die Abfrage gestartet wurde, um den Listeninhalt zu loeschen
   bool onQueryStarted(csQuery *query);
   // Wird aufgerufen, wenn die Abfrage beendet ist, um die Selektion anzeigen
   bool onQueryEnded(csQuery *query);

   // Wird aufgerufen, wenn die Einzelabfrage gestartet wurde
   bool onQuery1Started(cwListElem *elem, csQuery *query);
   // Wird aufgerufen, wenn ein Datensatz der Einzelabfrage verfuegbar ist
   bool onQuery1Data(cwListElem *elem, csQuery *query);
   // Wird aufgerufen, wenn die Einzelabfrage beendet ist
   bool onQuery1Ended(cwListElem *elem, csQuery *query);

   // Wird aufgerufen, wenn die Einfuegeabfrage gestartet wurde
   bool onInsQueryStarted(cwListElem *before, cwListElem *parent, csQuery *query);
   // Wird aufgerufen, wenn ein Datensatz der Einfuegeabfrage verfuegbar ist
   bool onInsQueryData(cwListElem *before, cwListElem *parent, csQuery *query);
   // Wird aufgerufen, wenn die Einfuegeabfrage beendet ist
   bool onInsQueryEnded(cwListElem *before, cwListElem *parent, csQuery *query);

   // Wird aufgerufen, wenn sich die Spalten- oder Zeilenzahl (pro DS) geaendert hat
   void onSetupRowCol(const SETUP_ROWCOL_INFO& info);
   // Wird aufgerufen, um in Spalte das Feld 'fld' zur Anzeige vorzubereiten
   void onSetupField(int fld, const SETUP_FIELD_INFO& info);

   // Fenster wird erzeugt
   bool onCreate();

   // Wird aufgerufen, um die durch 'mask' spezifizierten Window-Styles zu ermitteln
   int onGetStyles(int mask) const;
   // Wird aufgerufen, um die OS-spezifischen Styles aus den ECL-Styles zu ermitteln
   void onMakeStyles(int styles, int os_styles[]) const;
   // Wird aufgerufen, um Window-Styles zu setzen (add) und zu entfernen (remove)
   void onModifyStyles(int add, int remove, int os_add[], int os_remove[]);


protected:

   // Interner Konstruktor
   cwContainer(void *wnd);


private:

   // Initialisierung
   void init();

};


#endif

/*.EH.*/
