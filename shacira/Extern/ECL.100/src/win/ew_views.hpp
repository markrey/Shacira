/*.SH.*/

/*
 *  Headerfile for module ew_views
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_views.cpp on Thursday February 14 2002  15:09:38
 */

#ifndef __ew_views__
#define __ew_views__


// Headerfiles
// ===========================================================================

#include "base/eb_docview.hpp"
#include "win/ew_windows.hpp"
#include "win/ew_context.hpp"


// ===========================================================================
// cwView
// ---------------------------------------------------------------------------
//
// Um den Inhalt des Views zu zeichnen, muss der Anwender die virtuelle
// Methode onDraw() ableiten und die Zeichenoperationen innerhalb dieser
// Funktion ausfuehren.
//
// cBase
//  +--cwWindow
//      +--cwView
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwView : public cwWindow, public cEloView {
   ELO_DECLARE(cwView,cwWindow)
   friend class ccwView;

public:

   // Konstruktor ueber Elementbeschreibung (direkt)
   inline cwView(const cEloElementDescription *elem_descr = 0) :
      cwWindow(0) { init(elem_descr); }
   // Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   inline cwView(const cEloDescriptionManager *descr_manager, cString descr_sig) :
      cwWindow(0) { init(descr_manager, descr_sig); }
   // Destruktor
   virtual ~cwView();


   // window-Flags
   // ============

   // Flags
   enum FLAGS { wflFirst = cwWindow::wflUser,
      wflViewIsTabbed      = wflFirst << 0,  // Kennzeichnet Tabbed-Views
      wflUser              = wflFirst << 1   // Offset fuer benutzerdef. Flags
   };


   // Allgemeines
   // ===========

   // Standard Elementbeschreibung ermitteln
   static const cEloElementDescription *getDefaultDescription();
   // Operation Manager fuer Standard-View-Operationen ermitteln
   static const cEloOperationManager *getOperationManager();

   // Client-Fenster setzen
   void setClient(cwWindow *win);
   // Client-Fenster erfragen
   inline cwWindow *getClient() const
      { return client; }


protected:

   // Zusaetzliche Events
   // ===================

   // Eindeutige Kennung der View-Klasse ermitteln
   virtual int onGetViewType() const
      { return 0; }

   // Wird bei der Initialisierung des Views aufgerufen
   virtual void onInit();
   // Wird aufgerufen, wenn der View angezeigt wird
   virtual void onShowView();
   // Wird aufgerufen, wenn der View verborgen wird
   virtual void onHideView();

   struct DRAW_INFO {         // ALT, NICHT MEHR VERWENDEN!!!
      cdRect redraw_area;     // Ungueltiger Bereich (in Geraetekoordinaten)
      bool erase_bkgnd;       // Muss der Hintergrund geloescht werden?
   };

   // Wird aufgerufen, um den Anzeigebereich des Views zu zeichnen
   virtual void onDraw(cwContext *ctxt);
   // ALT, NICHT MEHR VERWENDEN!!! Wird aufgerufen, um den Anzeigebereich des Views zu zeichnen
   virtual void onDraw(void *ctxt);
   // ALT, NICHT MEHR VERWENDEN!!! Wird aufgerufen, um den Anzeigebereich des Views zu zeichnen (inkl. Draw-Informationen)
   virtual void onDrawEx(void *ctxt, const DRAW_INFO& draw_info);


   // Ueberschriebene Events
   // ======================

   // Fenster wird erzeugt
   // rc: true -> Erzeugen OK; false -> Nicht erzeugen
   bool onCreate();
   // Groesse geaendert
   void onSize(int cx, int cy);
   // Befehl ausfuehren (von Menu, Control oder Accelerator)
   // rc: true -> Meldung bearbeitet; false -> Default ausfuehren
   bool onCommand(const cwCmdEvt& cmd);
   // Update Benutzerschnittstelle
   // rc: true -> Meldung bearbeitet; false -> Default ausfuehren
   bool onCommandUI(cwCmdUI& cmd);

   // Wird aufgerufen, wenn das Dokument vom View "entkoppelt" wird
   void onDocumentRemoved();
   // Wird aufgerufen, um den Zeiger auf ein aktuelles Selektionsobjekt zu ermitteln
   cEloSelection *onGetWindowElemSelection();
   // Wird aufgerufen, um die aktuelle Element-Selektion zu ermitteln
   bool onUpdateWindowElemSelection(cEloSelection& selection) const;

   // Wird aufgerufen, um die eindeutige Signatur des ELO-Objektes zu erfragen
   cString onGetSignature() const
      { return "cwView"; }


protected:

   // Interner Konstruktor ohne Elementbeschreibung
   cwView(void *wnd);
   // Interner Konstruktor ueber Elementbeschreibung (direkt)
   cwView(void *wnd, const cEloElementDescription *elem_descr);
   // Interner Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   cwView(void *wnd, const cEloDescriptionManager *descr_manager, cString descr_sig);


private:

   // Initialisierung (Elementbeschreibung direkt)
   void init(const cEloElementDescription *elem_descr);
   // Initialisierung (Elementbeschreibung ueber Signatur)
   void init(const cEloDescriptionManager *descr_manager, cString descr_sig);

   // Client-Fenster (fuer Variante mit einem Client)
   cwWindow *client;

};


// ===========================================================================
// cwZoomView
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwView
//          +--cwZoomView
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwZoomView : public cwView {
   ELO_DECLARE(cwZoomView,cwView)
   friend class ccwView;

public:

   // Konstruktor ohne Elementbeschreibung
   inline cwZoomView() :
      cwView((void*)0, getDefaultDescription()) { init(); }
   // Konstruktor ueber Elementbeschreibung (direkt)
   inline cwZoomView(const cEloElementDescription *elem_descr) :
      cwView((void*)0, elem_descr) { init(); }
   // Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   inline cwZoomView(const cEloDescriptionManager *descr_manager, cString descr_sig) :
      cwView((void*)0, descr_manager, descr_sig) { init(); }
   // Destruktor
   virtual ~cwZoomView();


   // Allgemeines
   // ===========

   // Standard Elementbeschreibung ermitteln
   static const cEloElementDescription *getDefaultDescription();

   // Arbeitsbereich einstellen (Basis fuer Scrollbars)
   void setWorld(const cdRect& log_area);
   // Massleisten anzeigen / verbergen
   void showRulers(bool show = true);
   // Massleisten kalibrieren (1 = m, 100 = cm, 1000 = mm)
   void calibrateRulers(int factor);
   // Massleisten mit letztem Wert neu kalibrieren
   void calibrateRulers();
   // Werden die Massleisten momentan angezeigt?
   bool areRulersShown() const;
   // Aktuellen Kalibrierfaktor erfragen
   int getRulerCalibration() const;


   // Zoom
   // ====

   // Zoomlevel einstellen, Zentrieren auf Bildmitte
   void zoom(int level);
   // Zoomlevel einstellen, Zentrieren auf 'center' (log. Koord.)
   void zoom(int level, const cdPoint& center);

   // Zoom auf aktuelle Fenstergroesse (keine Rollbalken sichtbar)
   void zoom();
   // Zoom auf Rechteck (in log. Koord.)
   void zoom(const cdRect& rect, int pixborder = 10);

   // Aktuellen Zoomlevel erfragen
   int getZoomLevel() const
      { return zoom_level; }


   // Koordinatentransformation
   // =========================
   // Diese Funktionen beruecksichtigen die aktuelle Scrollposition
   // und den aktuellen Zoomlevel

   // LOGICAL -> DEVICE Transformation eines Punktes
   cdPoint convLogToDev(const cdPoint& p) const;
   // LOGICAL -> DEVICE Transformation einer Groesse
   cdSize convLogToDev(const cdSize& s) const;
   // LOGICAL -> DEVICE Transformation eines Rechtecks
   cdRect convLogToDev(const cdRect& r) const;

   // DEVICE -> LOGICAL Transformation eines Punktes
   cdPoint convDevToLog(const cdPoint& p) const;
   // DEVICE -> LOGICAL Transformation einer Groesse
   cdSize convDevToLog(const cdSize& s) const;
   // DEVICE -> LOGICAL Transformation eines Rechtecks
   cdRect convDevToLog(const cdRect& r) const;


protected:

   // Ueberschriebene Events
   // ======================

   // Eindeutige Kennung der View-Klasse ermitteln
   int onGetViewType() const
      { return 1; }
   // Wird aufgerufen, um die eindeutige Signatur des ELO-Objektes zu erfragen
   cString onGetSignature() const
      { return "cwZoomView"; }

   // Wird aufgerufen, um zu erfragen, ob eine Element-Selektion moeglich ist
   bool onHasWindowElemSelection() const;
   // Wird aufgerufen, um den Zeiger auf die ELO-Aktionsbeschreibung zu ermitteln
   cEloActionDescription *onGetWindowActionDescription(const cEloSelection *selection) const;

protected:

   // Interner Konstruktor ohne Elementbeschreibung
   cwZoomView(void *wnd);
   // Interner Konstruktor ueber Elementbeschreibung (direkt)
   cwZoomView(void *wnd, const cEloElementDescription *elem_descr);
   // Interner Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   cwZoomView(void *wnd, const cEloDescriptionManager *descr_manager, cString descr_sig);


private:

   // Aktueller Zoom-Level (von 1% bis 1000%)
   int zoom_level;
   // Aktueller Kalibrierungs-Faktor der Massleisten
   int ruler_factor;

   // Initialisierung
   void init();

};


#endif

/*.EH.*/
