/*.SH.*/

/*
 *  Headerfile for module ew_statctls
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_statctls.cpp on Saturday November 17 2001  17:15:32
 */

#ifndef __ew_statctls__
#define __ew_statctls__


// Headerfiles
// ===========================================================================

#include "win/ew_controls.hpp"


// ===========================================================================
// Definition cwStaticCtl
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwStaticCtl
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwStaticCtl : public cwControl {
   ELO_DECLARE(cwStaticCtl,cwControl)
   friend class ccwStaticCtl;

public:

   // Konstruktor
   inline cwStaticCtl() : cwControl(0) { init(); }
   // Destruktor
   virtual ~cwStaticCtl();


   // window-Styles
   // =============

   // Styles
   enum STYLES { wsStart = cwControl::wsUser,
      wsText            = wsStart << 0,   // Control zeigt Text an
      wsIcon            = wsStart << 1,   // Control zeigt Icon an
      wsBitmap          = wsStart << 2,   // Control zeigt Bitmap an
      wsCenter          = wsStart << 3,   // Element zentriert (horiz + vert)
      wsUser            = wsStart << 4    // Benutzerdefinierte Styles
   };


   // Images
   // ======

   // Icon als Image setzen
   void setImage(const cIcon& icon);
   // Bitmap als Image setzen
   void setImage(const cBitmap& bitmap);


protected:

   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um die durch 'mask' spezifizierten Window-Styles zu ermitteln
   int onGetStyles(int mask) const;
   // Wird aufgerufen, um die OS-spezifischen Styles aus den ECL-Styles zu ermitteln
   void onMakeStyles(int styles, int os_styles[]) const;
   // Wird aufgerufen, um Window-Styles zu setzen (add) und zu entfernen (remove)
   void onModifyStyles(int add, int remove, int os_add[], int os_remove[]);


protected:

   // Interner Konstruktor
   cwStaticCtl(void *wnd);


private:

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwText
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwStaticCtl
//              +--cwText
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwText : public cwStaticCtl {
   ELO_DECLARE(cwText,cwStaticCtl)

public:

   // Konstruktor
   inline cwText() : cwStaticCtl(0) { init(); }
   // Destruktor
   virtual ~cwText();


   // Allgemeines
   // ===========

   // Erzeugen des Controls mit statischem Text
   void create(cwWindow *parent, int id, cString caption,
               int style = wsChild | wsVisible | wsBorder,
               const cdRect& rect = cdRect());
   // Erzeugen des Controls mit gebundener Storage
   void create(cwWindow *parent, int id, csStorage *store,
               int style = wsChild | wsVisible | wsBorder,
               const cdRect& rect = cdRect());


protected:

   // Ueberschriebene Events
   // ======================

   // Daten des Controls refreshen
   bool onRefreshCtl(csStorage *store);


protected:

   // Interner Konstruktor
   cwText(void *wnd);


private:

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwIcon
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwStaticCtl
//              +--cwIcon
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwIcon : public cwStaticCtl {
   ELO_DECLARE(cwIcon,cwStaticCtl)

public:

   // Konstruktor
   inline cwIcon() : cwStaticCtl(0) { init(); }
   // Destruktor
   virtual ~cwIcon();


   // Allgemeines
   // ===========

   // Erzeugen des Controls mit statischem Icon
   void create(cwWindow *parent, int id, cIcon icon,
               int style = wsChild | wsVisible,
               const cdRect& rect = cdRect());


protected:

   // Interner Konstruktor
   cwIcon(void *wnd);


private:

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwBitmap
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwStaticCtl
//              +--cwBitmap
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwBitmap : public cwStaticCtl {
   ELO_DECLARE(cwBitmap,cwStaticCtl)

public:

   // Konstruktor
   inline cwBitmap() : cwStaticCtl(0) { init(); }
   // Destruktor
   virtual ~cwBitmap();


   // Allgemeines
   // ===========

   // Erzeugen des Controls mit statischem Icon
   void create(cwWindow *parent, int id, cBitmap bmp,
               int style = wsChild | wsVisible, const cdRect& rect = cdRect());


protected:

   // Interner Konstruktor
   cwBitmap(void *wnd);


private:

   // Initialisierung
   void init();

};


#endif

/*.EH.*/
