// ---------------------------------------------------------------------------
//
//  Headerfile for cpp module ew_menus
//
//  Generated by C-Head Version 1.4
//  (c) 1993-2002 by 2i Industrial Informatics GmbH
//
//  This file has been extracted from the source file
//  ew_menus.cpp on Wednesday April 10 2002  18:24:12
//
// ---------------------------------------------------------------------------

#ifndef __ew_menus__
#define __ew_menus__


// Headerfiles
// ===========================================================================

#include "base/eb_elo.hpp"
#include "base/eb_event.hpp"
#include "win/ew_base.hpp"
#include "win/ew_commands.hpp"


// Forward-Deklarationen
// ===========================================================================

class cwMenu;
class cwSubMenu;
class cwFrameMenu;
class cwPopupMenu;
class cwWindow;


// ===========================================================================
// Definition cwMenuItem
// ---------------------------------------------------------------------------
//
// Spezifikation eines Menu-Eintrags wahlweise ueber dessen ID (cwMID) oder
// ueber dessen relative Position (cwMPos).
//
// cwMenuItem
//   +--cwMID
//   +--cwMPos
//   +--cwMEndPos
//
// ===========================================================================

class cwMenuItem {

public:

   // Ist der Menu-Eintrag ueber dessen ID gegeben?
   inline bool isID() const
      { return !!(item_id & 0x80000000); }
   // Ist der Menu-Eintrag ueber dessen relative Position gegeben?
   inline bool isPos() const
      { return !(item_id & 0x80000000); }
   // Spezialfall: Ist der Eintrag NACH dem letzten Eintrag gemeint?
   inline bool isEndPos() const
      { return (item_id & 0xc0000000) == 0x40000000; }

   // ID oder Position des Menu-Eintrags erfragen
   inline int getItem() const
      { return isEndPos() ? -1 : int(item_id & 0x0000ffff); }


protected:

   // Konstruktor
   inline cwMenuItem(unsigned long id)
      { item_id = id; }


private:

   // ID (Bit 31 gesetzt) oder Position (Bit 31 rueckgesetzt)
   unsigned long item_id;

};


class cwMID : public cwMenuItem {
public:
   // Konstruktor
   inline cwMID(int id) :
      cwMenuItem((id & 0x0000ffff) | 0x80000000) { }
};

class cwMPos : public cwMenuItem {
public:
   // Konstruktor
   inline cwMPos(int pos) :
      cwMenuItem(pos & 0x0000ffff) { }
};

class cwMEndPos : public cwMenuItem {
public:
   // Konstruktor
   inline cwMEndPos() :
      cwMenuItem(0x40000000) { }
};


// ===========================================================================
// Definition cwMenu
// ---------------------------------------------------------------------------
//
// Dies ist eine abstrakte Basisklasse zur Verwendung in cwFrameMenu und
// cwPopupMenu. Es werden Funktionalitaeten zur Erstellung, Modifikation und
// Verwaltung von Menues zur Verfuegung gestellt.
//
// cwMenu
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwMenu : public cEventSource {
   friend class ccwMenu;

public:

   // Destruktor
   ~cwMenu();


   // Allgemeines
   // ===========

   // Erzeugen eines Menus
   bool create();
   // Erzeugen eines Menus aus einer Resource
   bool create(cResource res);
   // Loeschen des Menus (Freigeben der Resourcen)
   void destroy();


   // Menu-Eintraege
   // ==============

   enum MENU_STATES {
      msEnabled   = (1 << 0),
      msChecked   = (1 << 1)
   };

   // Menu-Eintrag aktivieren oder deaktivieren (grau)
   bool setEnable(const cwMenuItem& mi, bool enabled = true);
   // Menu-Eintrag mit Checkmark versehen
   bool setCheck(const cwMenuItem& mi, bool checked = true);
   // Menu-Eintrag als Default-Eintrag markieren
   bool setDefault(const cwMenuItem& mi);

   // Menu-Eintrag am Ende des Menus hinzufuegen
   void addItem(cString text, int item_id, cwSubMenu *sub_menu = 0, int state = msEnabled);
   // Separator am Ende des Menus hinzufuegen
   void addSeparator();

   // Menu-Eintrag vor 'mi' einfuegen
   void insertItem(const cwMenuItem& mi, cString text, int item_id, cwSubMenu *sub_menu = 0, int state = msEnabled);
   // Separator vor 'mi' einfuegen
   void insertSeparator(const cwMenuItem& mi);

   // Menu-Eintrag entfernen
   void removeItem(const cwMenuItem& mi);


protected:

   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, wenn sich die aktuelle Selektion geaendert hat
   void onSelectionChanged(cEloSelection *selection);


protected:

   // Events
   // ======

   // Wird aufgerufen, um das Menu zu erzeugen
   virtual bool onCreate(cResource res);


protected:

   void *_mnu;       // Zeiger auf Wrapper-Objekt


   // ECL/win Internas
   // ================

   // Interner Konstruktor
   cwMenu(void *mnu);

   // Trennen vom Wrapper
   void __disconnect();
   // Eigenen Zeiger auf Wrapper-Objekt ermitteln
   void *__getMnu();
   const void *__getMnu() const;
   // Zeiger auf Wrapper-Objekt ermitteln (statische Variante)
   static void *__getMnu(cwMenu *menu);
   static const void *__getMnu(const cwMenu *menu);

};


// ===========================================================================
// Definition cwSubMenu
// ---------------------------------------------------------------------------
//
// cwMenu
//  +--cwSubMenu
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwSubMenu : public cwMenu {

public:

   // Konstruktor
   inline cwSubMenu() : cwMenu(0) { init(); }
   // Destruktor
   ~cwSubMenu();


protected:

   // Interner Konstruktor
   cwSubMenu(void *mnu);


private:

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwFrameMenu
// ---------------------------------------------------------------------------
//
// cwMenu
//  +--cwFrameMenu
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwFrameMenu : public cwMenu {

public:

   // Konstruktor
   inline cwFrameMenu() : cwMenu(0) { init(); }
   // Destruktor
   ~cwFrameMenu();


   // Allgemeines
   // ===========

   // Mit bestehendem Menu verbinden
   bool attach(cwWindow *parent);
   // Bestehende Verbindung loesen
   void detach();


protected:

   // Interner Konstruktor
   cwFrameMenu(void *mnu);


private:

   // Zeiger auf Parent-Window
   cwWindow *parent;

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwPopupMenu
// ---------------------------------------------------------------------------
//
// cwMenu
//  +--cwPopupMenu
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwPopupMenu : public cwMenu {

public:

   // Konstruktor
   inline cwPopupMenu() : cwMenu(0) { init(); }
   // Destruktor
   ~cwPopupMenu();

   enum MENU_ALIGN {    // Orientierung des Kontextmenues zu 'screen_pos':
      maDefault,        //  - Betriebssystem-Default
      maTopLeft,        //  - 'screen_pos' ist oberer linker Eckpunkt
      maCenter,         //  - 'screen_pos' ist Mittelpunkt
      maBottomLeft      //  - 'screen_pos' ist unterer linker Eckpunkt
   };

   // Kontextmenu anzeigen, Position und Alignment aus cwCmdPosition
   bool showMenu(cwWindow *wnd, const cwCmdPosition &cmd);
   // Kontextmenu anzeigen, Position und Alignment uebergeben
   bool showMenu(cwWindow *wnd, const cdPoint& screen_pos, MENU_ALIGN align = maDefault);

   // Kontextmenu anzeigen und Ergebnis ermitteln, Position und Alignment aus cwCmdPosition
   // Liefert die MID des selektierten Eintrags; 0, falls keine Selektion erfolgt; -1 bei Fehler
   int queryMenu(const cwCmdPosition &cmd, cwWindow *wnd = 0);
   // Kontextmenu anzeigen und Ergebnis ermitteln, Position und Alignment uebergeben
   // Liefert die MID des selektierten Eintrags; 0, falls keine Selektion erfolgt; -1 bei Fehler
   int queryMenu(const cdPoint& screen_pos, MENU_ALIGN align = maDefault, cwWindow *wnd = 0);


protected:

   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um das Menu zu erzeugen
   bool onCreate(cResource res);


protected:

   // Interner Konstruktor
   cwPopupMenu(void *mnu);


private:

   // Initialisierung
   void init();

};


#endif

