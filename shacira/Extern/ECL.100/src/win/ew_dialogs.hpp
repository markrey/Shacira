/*.SH.*/

/*
 *  Headerfile for module ew_dialogs
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_dialogs.cpp on Thursday February 28 2002  12:19:42
 */

#ifndef __ew_dialogs__
#define __ew_dialogs__


// Headerfiles
// ===========================================================================

#include "win/ew_windows.hpp"
#include "win/ew_buttonctls.hpp"


// ===========================================================================
// Definition cwDialog
// ---------------------------------------------------------------------------
//
// Ueber diese Klassen werden die Dialogboxen des Systems verwaltet. Diese
// muessen als externe Resourcen in einer EXE- oder DLL-Datei vorliegen, die
// als cResource-Objekte im create-Aufruf angegeben werden.
//
//    Life-Cycle modal:          Life-Cycle modeless:
//
//    cwDialog dlg;              dlg = new cwDialog();
//    dlg.create(...);           dlg->create(...);
//    ...                        ...
//    dlg.process(...);          dlg->show();
//    ...                        ...
//    dlg deleted by C++         dlg->hide();
//                               delete dlg;
//
// cBase
//  +--cwWindow
//      +--cwDialog
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwDialog : public cwWindow {
   ELO_DECLARE(cwDialog,cwWindow)
   friend class ccwDialog;

public:

   // Allgemeines
   // ===========

   // Konstruktor
   inline cwDialog() : cwWindow(0) { init(); }
   // Destruktor
   virtual ~cwDialog();

   // Verhalten beim Schliessen des Dialogs
   enum DISMISS {
      dmAbort,       // Dismiss abbrechen, zurueck zum Dialog
      dmStore,       // Aenderungen uebernehmen
      dmDiscard      // Aenderungen verwerfen
   };

   // Erzeugen des Dialogs
   void create(cResource res, cwWindow *parent = 0);
   // Ausfuehren des modalen Dialogs
   DISMISS process(bool center = false);


   // Navigation
   // ==========

   // Focus auf ein ueber cwWindow-Zeiger spezifiziertes Control setzen
   void gotoControl(cwWindow *ctrl);
   // Focus auf ein ueber Child-ID spezifiziertes Control setzen
   void gotoControl(int id);
   // Focus auf das naechste Control setzen
   void gotoNextControl();
   // Focus auf das vorangehende Control setzen
   void gotoPrevControl();


   // Default-Pushbutton
   // ==================

   // Neuen Default-Pushbutton ueber cwWindow-Zeiger setzen
   void setDefault(cwPushButton *pb);
   // Neuen Default-Pushbutton ueber Child-ID setzen
   void setDefaultID(int pb_id);
   // Child-ID des aktuellen Default-Pushbuttons erfragen
   int getDefaultID() const;


   // Constraints
   // ===========

   // Die Methoden zum Setzen von Constraints erhalten das zu manipulierende
   // Kindfenster wahlweise als cwWindow-Zeiger oder als Window-ID. Letztere
   // Methode hat den Vorteil, dass kein cwWindow-Objekt angelegt werden muss.

   enum SIDE {
      sLeft       = 0x00000001,        // Links
      sRight      = 0x00000002,        // Rechts
      sTop        = 0x00000004,        // Oben
      sBottom     = 0x00000008,        // Unten
      sHoriz      = sLeft | sRight,    // Links + Rechts
      sVert       = sTop | sBottom,    // Oben + Unten
      sAny        = sHoriz | sVert     // Alle Seiten
   };

   enum TIE {
      tSame,         // Binden an gleiche Seite von 'base'
      tOpposite,     // Binden an gegenueberliegende Seite von 'base'
      tPosition      // Binden an Relativposition
   };

   // "Binden" eines Child-Windows an eine Seite des Dialogs
   void tieChild(cwWindow *child, int sides, TIE tie = tSame, cwWindow *base = 0);
   // "Binden" eines Child-Windows (ueber ID) an eine Seite des Dialogs
   void tieChild(int child_id, int sides, TIE tie = tSame, int base_id = 0);
   // Constraint fuer ein Child-Window setzen
   void setConstraint(cwWindow *child, int sides, TIE tie = tSame, int offset = 0, cwWindow *base = 0);
   // Constraint fuer ein Child-Window (ueber ID) setzen
   void setConstraint(int child_id, int sides, TIE tie = tSame, int offset = 0, int base_id = 0);


protected:

   // Beenden des Dialogs
   // ===================

   // Beenden des Dialogs
   DISMISS dismiss(DISMISS dm);
   // Standard-Rueckfrage bei "Speichern"
   DISMISS defAskStore(); // war: DefAskStore
   // Standard-Rueckfrage bei "Abbrechen"
   DISMISS defAskDiscard(); // war: DefAskDiscard


   // Zusaetzliche Events
   // ===================

   // Wird beim Initialisieren des Dialogs aufgerufen
   virtual bool onInit();
   // Wird zum Setzen von Constraints aufgerufen (groessenaenderbare Seiten)
   virtual bool onSetConstraint();

   // Wird aufgerufen, um ein Child-Window an eine Seite des Dialogs zu "binden"
   virtual void onExecTieChild(cwWindow *child, int sides, TIE tie, cwWindow *base);
   // Wird aufgerufen, um ein Child-Window (ueber ID) an eine Seite des Dialogs zu "binden"
   virtual void onExecTieChild(int child_id, int sides, TIE tie, int base_id);
   // Wird aufgerufen, um ein Constraint fuer ein Child-Window zu setzen
   virtual void onExecSetConstraint(cwWindow *child, int sides, TIE tie, int offset0, cwWindow *base);
   // Wird aufgerufen, um ein Constraint fuer ein Child-Window (ueber ID) zu setzen
   virtual void onExecSetConstraint(int child_id, int sides, TIE tie, int offset, int base_id);

   // Rueckfrage bei "Speichern"
   virtual DISMISS onAskStore(); // war: AskStoreEvt
   // Rueckfrage bei "Abbrechen"
   virtual DISMISS onAskDiscard(); // war: AskDiscardEvt
   // Benutzer waehlt "OK"; Default-Aktion: dismiss(dmStore)
   virtual void onOk();
   // Benutzer waehlt "CANCEL"; Default-Aktion: dismiss(dmDiscard)
   virtual void onCancel();


   // Ueberschriebene Events
   // ======================

   // Fenster wird erzeugt
   // rc: true -> Erzeugen OK; false -> Nicht erzeugen
   bool onCreate();
   // Refresh durchfuehren (gibt false zurueck, wenn Abbruch)
   bool onRefresh(); // war: RefreshEvt
   // Beenden eines unterbrochenen "Schliessen"-Vorgangs
   void onResumeClose(); // war: ResumeClose
   // Befehl ausfuehren (von Menu, Control oder Accelerator)
   // rc: true -> Meldung bearbeitet; false -> Default ausfuehren
   bool onCommand(const cwCmdEvt& cmd);
   // Update Benutzerschnittstelle
   // rc: true -> Meldung bearbeitet; false -> Default ausfuehren
   bool onCommandUI(cwCmdUI& cmd);


protected:

   // Interner Konstruktor
   cwDialog(void *wnd);


private:
   DISMISS dm_code;     // Code beim Aufruf von dismiss

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwNotebookPage
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwDialog
//          +--cwNotebookPage
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwNotebookPage : public cwDialog {
   ELO_DECLARE(cwNotebookPage,cwDialog)
   friend class ccwNotebookPage;

public:

   // Allgemeines
   // ===========

   // Konstruktor
   inline cwNotebookPage() : cwDialog(0) { init(); }
   // Destruktor
   virtual ~cwNotebookPage();

   // Erzeugen der Notebook-Seite
   void create(cResource res, cResource title = cResource(0));

   // Modifiziert-Status aendern
   void setModified(bool modified = true);


protected:

   // Zusaetzliche Events
   // ===================

   // Wird aufgerufen, wenn der Benutzer "OK" im Notebook-Dialog waehlt
   virtual void onOk();
   // Wird aufgerufen, wenn der Benutzer "CANCEL" im Notebook-Dialog waehlt
   virtual void onCancel();
   // Wird aufgerufen, wenn der Benutzer "APPLY" im Notebook-Dialog waehlt
   virtual bool onApply();
   // Wird aufgerufen, wenn der Benutzer "EDIT" im Notebook-Dialog waehlt
   virtual void onEdit();

   // Wird aufgerufen, wenn die Notebook-Seite angewaehlt wird (rc: false -> Anwahl nicht moeglich)
   virtual bool onEnter();
   // Wird aufgerufen, wenn die Notebook-Seite verlassen wird (rc: false -> Verlassen nicht moeglich)
   virtual bool onLeave();


   // Ueberschriebene Events
   // ======================

   // Wird beim Initialisieren des Dialogs aufgerufen
   bool onInit();

   // Wird aufgerufen, um ein Child-Window an eine Seite des Dialogs zu "binden"
   void onExecTieChild(cwWindow *child, int sides, TIE tie, cwWindow *base);
   // Wird aufgerufen, um ein Child-Window (ueber ID) an eine Seite des Dialogs zu "binden"
   void onExecTieChild(int child_id, int sides, TIE tie, int base_id);
   // Wird aufgerufen, um ein Constraint fuer ein Child-Window zu setzen
   void onExecSetConstraint(cwWindow *child, int sides, TIE tie, int offset0, cwWindow *base);
   // Wird aufgerufen, um ein Constraint fuer ein Child-Window (ueber ID) zu setzen
   void onExecSetConstraint(int child_id, int sides, TIE tie, int offset, int base_id);


protected:

   // Interner Konstruktor
   cwNotebookPage(void *wnd);


private:

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwNotebookDlg
// ---------------------------------------------------------------------------
//
// Ueber diese Klasse werden Notizbuech-Dialoge verwaltet. Notizbuch-Dialoge
// koennen beliebige andere Dialoge als Seiten aufnehmen, wenn diese mit Hilfe
// von cwNotebookPage angelegt wurden. Mit Hilfe der Methode addPage() muss
// mindestens eine Seite eingefuegt werden, bevor der Dialog angezeigt werden
// kann. Der Notizbuchdialog ist vom Benutzer in seiner Groesse aenderbar.
//
//    Life-Cycle modal:          Life-Cycle modeless:
//
//    cwDialog dlg;              dlg = new cwNotebookDlg();
//    dlg.create(...);           dlg->create(...);
//    ...                        ...
//    dlg->addPage(...);         dlg->addPage(...);
//    ...                        ...
//    dlg.process(...);          dlg->show();
//    ...                        ...
//    dlg deleted by C++         dlg->hide();
//                               delete dlg;
//
// cBase
//  +--cwWindow
//      +--cwNotebookDlg
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwNotebookDlg : public cwWindow {
   ELO_DECLARE(cwNotebookDlg,cwWindow)
   friend class ccwNotebookDlg;

public:

   // Konstruktor
   inline cwNotebookDlg() : cwWindow(0) { init(); }
   // Destruktor
   virtual ~cwNotebookDlg();


   // window-Flags
   // ============

   // Flags
   enum FLAGS { wflFirst = cwWindow::wflUser,
      wflAutoDeletePages   = wflFirst << 0,  // Eingefuegte Seiten loeschen
      wflUser              = wflFirst << 1   // Offset fuer benutzerdef. Flags
   };


   // Notebook-Style
   // ==============

   // Styles
   enum NOTEBOOK_STYLE { nbsFirst = 1,
      nbsOkBtn             = nbsFirst << 0,  // Ein OK-Button wird angezeigt
      nbsCancelBtn         = nbsFirst << 1,  // Ein CANCEL-Button wird angezeigt
      nbsApplyBtn          = nbsFirst << 2,  // Ein APPLY-Button wird angezeigt
      nbsHelpBtn           = nbsFirst << 3,  // Ein HELP-Button wird angezeigt
      nbsEditBtn           = nbsFirst << 4,  // Ein EDIT-Button wird angezeigt
      //
      nbsStdBtns           = nbsOkBtn|nbsCancelBtn|nbsApplyBtn,
      nbsAllBtns           = nbsStdBtns|nbsHelpBtn|nbsEditBtn
   };

   // Alle aktuellen Notebook-Styles ermitteln
   inline int getStyle() const
      { return style; }
   // Bestimmte aktuelle Notebook-Styles ermitteln
   inline int getStyle(int mask) const
      { return style & mask; }


   // Allgemeines
   // ===========

   // Verhalten beim Schliessen des Dialogs
   enum DISMISS {
      dmAbort,       // Dismiss abbrechen, zurueck zum Dialog
      dmStore,       // Aenderungen uebernehmen
      dmDiscard      // Aenderungen verwerfen
   };

   // Erzeugen des Notebook-Dialogs
   void create(cwWindow *parent, cString text, int style = nbsStdBtns, int flags = 0);

   // Seite einfuegen
   void addPage(cwNotebookPage *page);
   // Seite entfernen
   void removePage(cwNotebookPage *page);

   // Ausfuehren des modalen Dialogs
   DISMISS process(bool center = false);
   // Notebook-Dialog anzeigen
   void show();


protected:

   // Beenden des Dialogs
   // ===================

   // Beenden des Dialogs
   DISMISS dismiss(DISMISS dm);
   // Standard-Rueckfrage bei "Speichern"
   DISMISS defAskStore(); // war: DefAskStore
   // Standard-Rueckfrage bei "Abbrechen"
   DISMISS defAskDiscard(); // war: DefAskDiscard


   // Zusaetzliche Events
   // ===================

   // Wird beim Initialisieren des Dialogs aufgerufen
   virtual bool onInit();

   // Wird aufgerufen, nachdem eine Seite eingefuegt wurde
   virtual void onPageAdded(cwNotebookPage *page);
   // Wird aufgerufen, befor eine Seite entfernt wird
   virtual void onPageRemoved(cwNotebookPage *page);

   // Rueckfrage bei "Speichern"
   virtual DISMISS onAskStore(); // war: AskStoreEvt
   // Rueckfrage bei "Abbrechen"
   virtual DISMISS onAskDiscard(); // war: AskDiscardEvt

   // Benutzer waehlt "OK"; Default-Aktion: dismiss(dmStore)
   virtual void onOk();
   // Benutzer waehlt "CANCEL"; Default-Aktion: dismiss(dmDiscard)
   virtual void onCancel();
   // Benutzer waehlt "APPLY"
   virtual void onApply();
   // Benutzer waehlt "EDIT"
   virtual void onEdit();


   // Ueberschriebene Events
   // ======================

   // Fenster wird erzeugt
   // rc: true -> Erzeugen OK; false -> Nicht erzeugen
   bool onCreate();
   // Befehl ausfuehren (von Menu, Control oder Accelerator)
   // rc: true -> Meldung bearbeitet; false -> Default ausfuehren
   bool onCommand(const cwCmdEvt& cmd);
   // Refresh durchfuehren (gibt false zurueck, wenn Abbruch)
   bool onRefresh();
   // Beenden eines unterbrochenen "Schliessen"-Vorgangs
   void onResumeClose();


protected:

   // Interner Konstruktor
   cwNotebookDlg(void *wnd);


private:

   // Aktueller Notebook-Style
   int style;

   // Zusaetzliche Informationen
   struct ADD_INFO;
   ADD_INFO *info;

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwMsgDlg
// ---------------------------------------------------------------------------
//
// Diese Klasse stellt eine Art "bessere" MessageBox zur Verfuegung. Ueber
// eine vom Benutzer der Klasse zur Verfuegung gestellte Dialog-Resource
// koennen beliebig gestaltete Dialoge als Message-Box benutzt werden. Dabei
// sind die folgenden Dialogfelder vorgegeben:
//
//    Class      | ID                | Bedeutung
//   ------------+-------------------+---------------------------
//    Static     | ECLID_TXT_MESSAGE | Primaere Meldung
//    Static     | ECLID_TXT_EXPLAIN | Erlaeuterung der Meldung
//    PushButton | ECLID_PB_STORE    | Auswahl "Speichern"
//    PushButton | ECLID_PB_DISCARD  | Auswahl "Verwerfen"
//    PushButton | ECLID_PB_RETRY    | Auswahl "Wiederholen"
//    PushButton | ECLID_PB_READONLY | Auswahl "Nur lesen"
//    PushButton | ECLID_PB_YES      | Auswahl "Ja"
//    PushButton | ECLID_PB_NO       | Auswahl "Nein"
//
// cBase
//  +--cwWindow
//      +--cwDialog
//          +--cwMsgDlg
//
// ===========================================================================

#define ECLID_BASE            10000
#define ECLID_PB_CANCEL       (ECLID_BASE+100)
#define ECLID_PB_STORE        (ECLID_BASE+101)
#define ECLID_PB_DISCARD      (ECLID_BASE+102)
#define ECLID_PB_RETRY        (ECLID_BASE+103)
#define ECLID_PB_READONLY     (ECLID_BASE+104)
#define ECLID_PB_YES          (ECLID_BASE+105)
#define ECLID_PB_NO           (ECLID_BASE+106)

class __ECL_DLLEXPORT__ cwMsgDlg : public cwDialog {
   ELO_DECLARE(cwMsgDlg,cwDialog)

public:
   void create(cResource res, cwWindow *parent = 0,
      cString title = "", cString msg = "", cString explain = "");

   enum RESULT { None, Abort, Store, Discard, Retry, ReadOnly, Yes, No };

   RESULT process();


protected:

   // Ueberschriebene Events
   // ======================

   // Befehl ausfuehren (von Menu, Control oder Accelerator)
   // rc: true -> Meldung bearbeitet; false -> Default ausfuehren
   bool onCommand(const cwCmdEvt& cmd);
   // Benutzer waehlt "OK"; Default-Aktion: dismiss(dmStore)
   void onOk();
   // Benutzer waehlt "CANCEL"; Default-Aktion: dismiss(dmDiscard)
   void onCancel();


private:
   RESULT res;

};


// ===========================================================================
// res = MsgBox(res, parent, [,title, msg, explain])
// ---------------------------------------------------------------------------
// Anzeige einer benutzerdefinierten "MessageBox" ueber die cwMsgDlg-Klasse. Als
// Funktionswert wird die vom Benutzer ausgewaehlte Alternative zurueckgegeben.
// ===========================================================================

cwMsgDlg::RESULT __ECL_DLLEXPORT__ MsgBox(cResource res, cwWindow *parent = 0,
   cString title = "", cString msg = "", cString explain = "");


#endif

/*.EH.*/
