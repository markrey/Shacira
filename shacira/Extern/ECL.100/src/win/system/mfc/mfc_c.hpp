/*.SH.*/

/*
 *  Headerfile for module mfc_c
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  mfc_c.cpp on Wednesday April 10 2002  23:03:27
 */

#ifndef __mfc_c__
#define __mfc_c__


// Headerfiles
// ===========================================================================

#include "win/ew_commands.hpp"


// Forward-Deklarationen
// ===========================================================================

// von ECL/base:
class cCmdOptions;

// von ECL/win:
class cwApplication;
class cwIconList;
class cwButtonCtl;
class cwContainer;
class cwControl;
class cwDialog;
class cwDragDrop;
class cwDragSource;
class cwDropTarget;
class cwEditCtl;
class cwGrid;
class cwListCtl;
class cwListBox;
class cwLogWin;
class cwComboBox;
class cwListElem;
class cwToolWin;
class cwToolBar;
class cwTree;
class cwMenu;
class cwNotebookCtl;
class cwNotebookDlg;
class cwNotebookPage;
class cwWindow;
class cwFrame;
class cwMiniFrame;
class cwView;

// von MFC:
struct CRuntimeClass;

// von UGRID:
class CUGCell;


// ===========================================================================
// ccwHandle
// ---------------------------------------------------------------------------
//
// ccwHandle
//
// ===========================================================================

class ccwHandle : public cOsBase {

public:

   // Handle aus cOsBase-Objekt erfragen
   static void *getHandle(const cOsBase& other);
   // Handle des cOsBase-Objektes setzen (Vorsicht! Obacht! Gefaehrlich!!!)
   static void setHandle(cOsBase& other, void *handle);

};


// ===========================================================================
// ccwCmd
// ---------------------------------------------------------------------------
//
// cwCmd
//  +--ccwCmd
//
// ===========================================================================

class ccwCmd : public cwCmd {

public:

   // Konstruktor aus wParam und lParam
   ccwCmd(unsigned int wParam, long lParam)
      { msg = 0; ul1 = wParam; ul2 = lParam; }
   // Konstruktor aus message, wParam und lParam
   ccwCmd(unsigned int message, unsigned int wParam, long lParam)
      { msg = message; ul1 = wParam; ul2 = lParam; }
   // Konstruktor aus herkoemmlichem cwCmd
   ccwCmd(const cwCmd& cmd)
      { msg = cmd.msg; ul1 = cmd.ul1; ul2 = cmd.ul2; }

   // Meldungs-ID erfragen
   unsigned int getMsg() const
      { return msg; }
   // wParam erfragen
   unsigned int getParam1() const
      { return ul1; }
   // lParam erfragen
   unsigned long getParam2() const
      { return ul2; }

};


// ===========================================================================
// ccwApplication
// ---------------------------------------------------------------------------
//
// ccwApplication
//
// ===========================================================================

class ccwApplication {

public:

   // Applikation initialisieren
   static void initApplication(int show_cmd);
   // Trennen vom Wrapper
   static void __disconnect(cwApplication *app);
   // Standard-Kommandos des Main-Frames auswerten
   static bool __onFrameCommand(cwApplication *app, cwWindow *win, const cwCmdEvt& cmd);

   // Wird aufgerufen, um die Applikationsinstanz zu initialisieren
   static bool onInit(cwApplication *app);
   // Wird aufgerufen, um die Hauptschleife der Applikation auszufuehren
   static int onRun(cwApplication *app);
   // Wird aufgerufen, um die Applikationsinstanz zu deinitialisieren
   static int onExit(cwApplication *app);

   // Resource-Handle setzen
   static void *setResourceHandle(void *hInstResource);
   // Original-Resource-Handle setzen
   static void *setOrigResourceHandle();
   // Original-Resource-Handle erfragen
   static void *getOrigResourceHandle();

   // CmdOptions-Objekt der Applikation setzen
   static void setCmdOptions(cwApplication *app, cCmdOptions *options);
   // Erfragen des nShowCmd-Parameters von WinMain
   static int getInitialShowCmd();

private:
   static void *orig_resource_handle;
   static int initial_show_cmd;

};


// ===========================================================================
// ccwMenu
// ---------------------------------------------------------------------------
//
// ccwMenu
//
// ===========================================================================

class ccwMenu {

public:

   // Trennen vom Wrapper
   static void __disconnect(cwMenu *mnu);

};


// ===========================================================================
// ccwDragDrop
// ---------------------------------------------------------------------------
//
// ccwDragDrop
//
// ===========================================================================

class ccwDragDrop {

public:

   // Trennen vom Wrapper
   static void __disconnect(cwDragDrop *dd);

};


// ===========================================================================
// ccwDragSource
// ---------------------------------------------------------------------------
//
// ccwDragDrop
//  +--ccwDragSource
//
// ===========================================================================

class ccwDragSource : public ccwDragDrop {

public:

};


// ===========================================================================
// ccwDropTarget
// ---------------------------------------------------------------------------
//
// ccwDragDrop
//  +--ccwDropTarget
//
// ===========================================================================

class ccwDropTarget : public ccwDragDrop {

public:

   // Anmerkung: Die folgenden Routinen liefern 'false', wenn die
   // Standardbehandlung fuer Drag&Drop durchgefuehrt werden soll

   // Wird aufgerufen, wenn eine Drag-Operation das Fenster 'mfc_win' erreicht
   static bool onDragEnter(cwDropTarget *dd, void *mfc_win, cwCmdDrag& cmd);
   // Wird aufgerufen, wenn eine Drag-Operation ueber 'mfc_win' ablaeuft
   static bool onDragOver(cwDropTarget *dd, void *mfc_win, cwCmdDrag& cmd);
   // Wird aufgerufen, wenn eine Drag-Scroll-Operation ueber 'mfc_win' ablaeuft
   static bool onDragScroll(cwDropTarget *dd, void *mfc_win, cwCmdDrag& cmd);
   // Wird aufgerufen, wenn eine Drag-Operation das Fenster 'mfc_win' verlaesst
   static bool onDragLeave(cwDropTarget *dd, void *mfc_win);
   // Wird aufgerufen, wenn ein Drop ueber dem Fenster 'mfc_win' veranlasst wurde
   static bool onDrop(cwDropTarget *dd, void *mfc_win, cwCmdDrop& cmd);

};


// ===========================================================================
// ccwIconList
// ---------------------------------------------------------------------------
//
// ccwIconList
//
// ===========================================================================

class ccwIconList {

public:

   // Zeiger auf Wrapper-Objekt erfragen
   static void *__getIList(const cwIconList *ilist);
   // Trennen vom Wrapper
   static void __disconnect(cwIconList *ilist);

};


// ===========================================================================
// ccwWindow
// ---------------------------------------------------------------------------
//
// ccwWindow
//
// ===========================================================================

class ccwWindow {

public:

   struct PP {
      int mask;
      unsigned long fg_col;
      unsigned long bg_col;
   };

   // Moeglicher Eingriff ins Windows-Message-Dispatching
   static bool onDispatchMsg(cwWindow *win, void *msg);

   // Fenster wird erzeugt
   static bool onCreate(cwWindow *win);
   // Fenstererzeugung wird vorbereitet
   static bool onPreCreate(cwWindow *win, void *cs);
   // Subclassing wird vorbereitet
   static void onPreSubclass(cwWindow *win);
   // Fenster wird zerstoert
   static void onDestroy(cwWindow *win);
   // Farben einstellen
   static void *onCtlColor(cwWindow *win, void *dc, long col, void *brush);
   // Hintergrund loeschen
   static int onEraseBkgnd(cwWindow *win, void *dc, void *brush);
   // Groesse geaendert
   static void onSize(cwWindow *win, int cx, int cy);
   // Taste gedrueckt
   static void onChar(cwWindow *win, cwCmdChar& cmd);
   // Mausklick ausgefuehrt
   static bool onMouseClick(cwWindow *win, const cwCmdMouse& cmd);
   // Mausbewegung durchgefuehrt
   static bool onMouseMove(cwWindow *win, const cwCmdMouse& cmd);
   // Befehl ausfuehren (von Menu, Control oder Accelerator)
   static bool onCommand(cwWindow *win, const cwCmdEvt& cmd);
   // Benutzerschnittstelle updaten
   static bool onCommandUI(cwWindow *win, cwCmdUI& cmd);
   // Befehl weiter routen
   static bool onCommandRoute(cwWindow *win, const cwCmdEvt& cmd);
   // Kontextmenu anzeigen
   static bool onContextMenu(cwWindow *win, const cwCmdPosition& cmd);
   // Wird aufgerufen, wenn eine Aktion an einem Scrollbar ausgeloest wurde
   static void onScroll(cwWindow *win, const cwCmdScroll& cmd);

   // Wird aufgerufen, wenn Fenster den Focus erhaelt
   static void onGainFocus(cwWindow *win);
   // Wird aufgerufen, wenn Fenster den Focus verliert
   static void onLoseFocus(cwWindow *win);

   // Inhalt refreshen (false -> Abbruch)
   static bool onRefresh(cwWindow *win);
   // Inhalt speichern (false -> Abbruch)
   static bool onStore(cwWindow *win);
   // Inhalt verwerfen (false -> Abbruch)
   static bool onDiscard(cwWindow *win);
   // Beenden eines unterbrochenen "Schliessen"-Vorgangs
   static void onResumeClose(cwWindow *win);
   // Verzoegertes Ausfuehren einer Operation
   static void onExecDelayed(cwWindow *win, int id, void *data);

   // Blaettern zu Sibling erlauben?
   static bool onAllowTurn(cwWindow *win);
   // Abbruch mit Speichern erlauben?
   static bool onAllowStore(cwWindow *win);
   // Abbruch ohne Speichern erlauben?
   static bool onAllowDiscard(cwWindow *win);
   // Schliessen des Fensters erlauben?
   static bool onAllowClose(cwWindow *win, cwWindow *notify);

   // Timer 'id' abgelaufen
   static bool onTimer(cwWindow *win, int id);

   // Anmerkung: Die folgenden Routinen liefern 'false', wenn die
   // Standardbehandlung fuer Drag&Drop durchgefuehrt werden soll

   // Wird aufgerufen, wenn eine Drag-Operation das Fenster erreicht
   static bool onDragEnter(cwWindow *win, cwCmdDrag& cmd);
   // Wird aufgerufen, wenn eine Drag-Operation ueber dem Fenster ablaeuft
   static bool onDragOver(cwWindow *win, cwCmdDrag& cmd);
   // Wird aufgerufen, wenn eine Drag-Scroll-Operation ueber dem Fenster ablaeuft
   static bool onDragScroll(cwWindow *win, cwCmdDrag& cmd);
   // Wird aufgerufen, wenn eine Drag-Operation das Fenster verlaesst
   static bool onDragLeave(cwWindow *win);
   // Wird aufgerufen, wenn ein Drop ueber dem Fenster veranlasst wurde
   static bool onDrop(cwWindow *win, cwCmdDrop& cmd);

   // Ermitteln der _wnd-Komponente
   static void * __getWnd(cwWindow *win);
   // Ermitteln des Window-Handles
   static void * __getHandle(cwWindow *win);
   // Trennen vom Wrapper
   static void __disconnect(cwWindow *win);

};


// ===========================================================================
// ccwFrame
// ---------------------------------------------------------------------------
//
// ccwFrame
//
// ===========================================================================

class ccwFrame {

public:

   // Wird zum Erzeugen der Views aufgerufen
   static bool onCreateViews(cwFrame *win, void *info);
   // Wird aufgerufen, um den Wechsel des aktuellen Views anzukuendigen (true = prevent)
   static bool onViewChanging(cwFrame *win);
   // Wird aufgerufen, um den Wechsel des aktuellen Views bekanntzugeben
   static void onViewChanged(cwFrame *win);

};


// ===========================================================================
// ccwMiniFrame
// ---------------------------------------------------------------------------
//
// ccwMiniFrame
//
// ===========================================================================

class ccwMiniFrame {

public:

   // Wird aufgerufen, wenn Groesse oder Dockstatus veraendert
   static void onSizedOrDocked(cwMiniFrame *win, int cx, int cy, bool floating, bool transition);

};


// ===========================================================================
// ccwView
// ---------------------------------------------------------------------------
//
// ccwView
//
// ===========================================================================

class ccwView {

public:

   // cwView-Zeiger waehrend Initialisierung
   // (Kann nicht im Konstruktor uebergeben werden!)
   static cwView *srv_beeing_created;

   // Wird beim Initialisieren des Views aufgerufen
   static void onInit(cwView *win);
   // Wird zum Zeichnen des Views aufgerufen
   static void onDraw(cwView *win, void *ctxt);
   // Wird aufgerufen, wenn der View angezeigt wird
   static void onShowView(cwView *win);
   // Wird aufgerufen, wenn der View verborgen wird
   static void onHideView(cwView *win);

   // Setzen der _wnd-Komponente (nur Intern!)
   static void __setWnd(cwView *win, void *_wnd);
   // Runtime-Class des Views ermitteln (nur Intern!)
   static CRuntimeClass *__getRuntimeClass(cwView *win);

};


// ===========================================================================
// ccwDialog
// ---------------------------------------------------------------------------
//
// ccwDialog
//
// ===========================================================================

class ccwDialog {

public:

   // Wird beim Initialisieren des Dialogs aufgerufen
   static bool onInit(cwDialog *win);
   // Wird beim Druecken von OK aufgerufen
   static void onOk(cwDialog *win);
   // Wird beim Druecken von CANCEL aufgerufen
   static void onCancel(cwDialog *win);

   // Notebook-Dialog automatisch loeschen?
   static bool isAutoDelete(cwDialog *win);

};


// ===========================================================================
// ccwNotebookPage
// ---------------------------------------------------------------------------
//
// ccwNotebookPage
//
// ===========================================================================

class ccwNotebookPage {

public:

   // Wird beim Druecken von OK aufgerufen
   static void onOk(cwNotebookPage *win);
   // Wird beim Druecken von CANCEL aufgerufen
   static void onCancel(cwNotebookPage *win);
   // Wird beim Druecken von APPLY aufgerufen
   static bool onApply(cwNotebookPage *win);
   // Wird beim Druecken von EDIT aufgerufen
   static void onEdit(cwNotebookPage *win);

   // Wird beim "Betreten" der Seite aufgerufen
   static bool onEnter(cwNotebookPage *win);
   // Wird beim "Verlassen" der Seite aufgerufen
   static bool onLeave(cwNotebookPage *win);

};


// ===========================================================================
// ccwNotebookDlg
// ---------------------------------------------------------------------------
//
// ccwNotebookDlg
//
// ===========================================================================

class ccwNotebookDlg {

public:

   // Wird beim Initialisieren des Dialogs aufgerufen
   static bool onInit(cwNotebookDlg *win);
   // Wird beim Druecken von OK aufgerufen
   static void onOk(cwNotebookDlg *win);
   // Wird beim Druecken von CANCEL aufgerufen
   static void onCancel(cwNotebookDlg *win);
   // Wird beim Druecken von APPLY aufgerufen
   static void onApply(cwNotebookDlg *win);
   // Wird beim Druecken von EDIT aufgerufen
   static void onEdit(cwNotebookDlg *win);

   // Notebook-Dialog automatisch loeschen?
   static bool isAutoDelete(cwNotebookDlg *win);

   // Hat der Notebook-Dialog Standardknoepfe?
   static bool hasAnyButtons(cwNotebookDlg *win);
   // Hat der Notebook-Dialog den Standardknopf 'id'?
   static bool hasButton(cwNotebookDlg *win, int id);

};


// ===========================================================================
// ccwToolWin
// ---------------------------------------------------------------------------
//
// ccwToolWin
//
// ===========================================================================

class ccwToolWin {

public:

   // Wird aufgerufen, wenn ein DropDown-Knopf gedrueckt wird
   static int onDropDown(cwToolWin *win, void *tbar);

};


// ===========================================================================
// ccwToolBar
// ---------------------------------------------------------------------------
//
// ccwToolBar
//
// ===========================================================================

class ccwToolBar {

public:

   // TBD: Events verfuegbar machen...

};


// ===========================================================================
// ccwDialogBar
// ---------------------------------------------------------------------------
//
// ccwDialogBar
//
// ===========================================================================

class ccwDialogBar {

public:

   // TBD: Events verfuegbar machen...

};


// ===========================================================================
// ccwStatusBar
// ---------------------------------------------------------------------------
//
// ccwStatusBar
//
// ===========================================================================

class ccwStatusBar {

public:

   // TBD: Events verfuegbar machen...

};


// ===========================================================================
// ccwButtonCtl
// ---------------------------------------------------------------------------
//
// ccwButtonCtl
//
// ===========================================================================

class ccwButtonCtl {

public:

   // Wird bei einfachem Klick aufgerufen
   static void onClick(cwButtonCtl *win);
   // Wird bei Doppelklick aufgerufen
   static void onDblClick(cwButtonCtl *win);

};


// ===========================================================================
// ccwListCtl
// ---------------------------------------------------------------------------
//
// ccwListCtl
//
// ===========================================================================

class ccwListCtl {

public:

   // Wird bei Doppelklick aufgerufen
   static void onListElemSelected(cwListCtl *win, cwListElem *elem);
   // Wird bei Aenderung der Selektion aufgerufen
   static void onSelectionChanged(cwListCtl *win, cwListElem *elem);

};


// ===========================================================================
// ccwListBox
// ---------------------------------------------------------------------------
//
// ccwListBox
//
// ===========================================================================

class ccwListBox {

};


// ===========================================================================
// ccwComboBox
// ---------------------------------------------------------------------------
//
// ccwComboBox
//
// ===========================================================================

class ccwComboBox {

public:

   // Wird beim Aufklappen der Listbox aufgerufen
   static void onDropDown(cwComboBox *win);
   // Wird beim Zuklappen der Listbox aufgerufen
   static void onCloseUp(cwComboBox *win);

};


// ===========================================================================
// ccwNotebookCtl
// ---------------------------------------------------------------------------
//
// ccwNotebookCtl
//
// ===========================================================================

class ccwNotebookCtl {

public:

   // Wird aufgerufen, um den Wechsel der aktuellen Seite anzukuendigen (true = prevent)
   static bool onPageChanging(cwNotebookCtl *win);
   // Wird aufgerufen, um den Wechsel der aktuellen Seite bekanntzugeben
   static void onPageChanged(cwNotebookCtl *win);

};


// ===========================================================================
// ccwContainer
// ---------------------------------------------------------------------------
//
// ccwContainer
//
// ===========================================================================

class ccwContainer {

public:

   // Wird aufgerufen, um den Inhalt der Container-Elemente zu erfragen
   static void onGetDispInfo(cwContainer *win, void *disp_info);
   // Wird aufgerufen, um Aenderungen am Inhalt der Container-Elemente bekanntzugeben
   static void onSetDispInfo(cwContainer *win, void *disp_info);

   // Wird aufgerufen, um die Aktivierung eines Items bekanntzugeben
   static void onItemActivated(cwContainer *win, void *item_activate);
   // Wird aufgerufen, um die Aenderung eines Items anzukuendigen (true = prevent)
   static bool onItemChanging(cwContainer *win, void *list_view);
   // Wird aufgerufen, um die Aenderung eines Items bekanntzugeben
   static void onItemChanged(cwContainer *win, void *list_view);
   // Wird aufgerufen, um die Aenderung von Item-Stati bekanntzugeben
   static void onItemStateChanged(cwContainer *win, void *state_chg);

   // Wird aufgerufen, um ein Einfach-Klick bekanntzugeben
   static void onClick(cwContainer *win, void *item_activate);
   // Wird aufgerufen, um ein Doppel-Klick bekanntzugeben
   static void onDblClick(cwContainer *win, void *item_activate);
   // Wird aufgerufen, um den Klick auf einen Spaltentitel bekanntzugeben
   static void onColumnClick(cwContainer *win, void *item);
   // Wird aufgerufen, um ein Einfach-Klick bekanntzugeben
   static void onReturn(cwContainer *win);
   // Wird aufgerufen, um die Container-Elemente zu zeichnen
   static long onDraw(cwContainer *win, void *cust_draw);

   // Wird aufgerufen, um den Beginn einer Drag-Operation bekanntzugeben
   static void onBeginDrag(cwContainer *win, void *item, int mouse_button);
   // Wird aufgerufen, um den Beginn einer Edit-Operation bekanntzugeben
   static bool onBeginEdit(cwContainer *win, void *item);
   // Wird aufgerufen, um das Ende einer Edit-Operation bekanntzugeben
   static bool onEndEdit(cwContainer *win, void *item);

};


// ===========================================================================
// ccwTree
// ---------------------------------------------------------------------------
//
// ccwTree
//
// ===========================================================================

class ccwTree {

public:

   // Wird aufgerufen, um den Inhalt der Tree-Elemente zu erfragen
   static void onGetDispInfo(cwTree *win, void *disp_info);
   // Wird aufgerufen, um Aenderungen am Inhalt der Tree-Elemente bekanntzugeben
   static void onSetDispInfo(cwTree *win, void *disp_info);

   // Wird aufgerufen, um den Selektionswechsel anzukuendigen (true = prevent)
   static bool onSelChanging(cwTree *win, void *tree_view);
   // Wird aufgerufen, um den Selektionswechsel bekanntzugeben
   static void onSelChanged(cwTree *win, void *tree_view);
   // Wird aufgerufen, um ein Expand/Collapse anzukuendigen (true = prevent)
   static bool onItemExpanding(cwTree *win, void *tree_view);
   // Wird aufgerufen, um den Expand/Collapse bekanntzugeben
   static void onItemExpanded(cwTree *win, void *tree_view);

   // Wird aufgerufen, um den Beginn einer Drag-Operation bekanntzugeben
   static void onBeginDrag(cwTree *win, void *item, int mouse_button);
   // Wird aufgerufen, um den Beginn einer Edit-Operation bekanntzugeben
   static bool onBeginEdit(cwTree *win, void *item);
   // Wird aufgerufen, um das Ende einer Edit-Operation bekanntzugeben
   static bool onEndEdit(cwTree *win, void *item);

   // Wird bei einfachem Klick aufgerufen (0=None, 1=Left, 2=Right, 3=Middle)
   static bool onClick(cwTree *win, int button_no, long pos);
   // Wird bei Doppelklick aufgerufen (0=RETURN, 1=Left, 2=Right, 3=Middle)
   static bool onDblClick(cwTree *win, int button_no, long pos);

};


// ===========================================================================
// ccwGrid
// ---------------------------------------------------------------------------
//
// ccwGrid
//
// ===========================================================================

class ccwGrid {

public:

   // Darf die Groesse von Spalte 'col' veraendert werden?
   static bool onCanSizeColumn(cwGrid *win, int col);
   // Darf die Groesse von Zeile 'row' veraendert werden?
   static bool onCanSizeRow(cwGrid *win, int row);
   // Darf die Groesse der Spaltenkoepfe veraendert werden?
   static bool onCanSizeColumnHead(cwGrid *win);
   // Darf die Groesse der Zeilenkoepfe veraendert werden?
   static bool onCanSizeRowHead(cwGrid *win);

   // Wird aufgerufen, wenn sich die aktuelle Spalte geaendert hat
   static void onChangedColumn(cwGrid *win, int old_col, int new_col);
   // Wird aufgerufen, wenn sich die aktuelle Zeile geaendert hat
   static void onChangedRow(cwGrid *win, int old_row, int new_row);
   // Wird aufgerufen, wenn sich die aktuelle Zelle geaendert hat
   static void onChangedCell(cwGrid *win, int old_col, int new_col, int old_row, int new_row);

   // Wird aufgerufen, wenn eine Zelle angeklickt wurde
   static void onClickCell(cwGrid *win, int col, int row, const cwCmdMouse& cmd);
   // Wird aufgerufen, wenn ein Spaltenkopf angeklickt wurde
   static void onClickColumnHead(cwGrid *win, int col, int row, const cwCmdMouse& cmd);
   // Wird aufgerufen, wenn ein Zeilenkopf angeklickt wurde
   static void onClickRowHead(cwGrid *win, int col, int row, const cwCmdMouse& cmd);
   // Wird aufgerufen, wenn die linke obere Ecke angeklickt wurde
   static void onClickCorner(cwGrid *win, const cwCmdMouse& cmd);

   // Wird aufgerufen, um den Wert einer Zelle zu ermitteln
   static void onGetCell(cwGrid *win, int col, int row, void *cell);
   // Wird aufgerufen, um den Wert einer Zelle zu setzen
   static void onSetCell(cwGrid *win, int col, int row, void *cell);
   // Wird bei einer Zellen-Notification aufgerufen
   static bool onCellNotify(cwGrid *win, int col, int row, long id, long msg, long param);

};


// ===========================================================================
// ccwEditCtl
// ---------------------------------------------------------------------------
//
// ccwEditCtl
//
// ===========================================================================

class ccwEditCtl {

public:

   // Wird bei Aenderung des Eingabefeldes VOR Schirmupdate aufgerufen
   static void onEditChanged(cwEditCtl *win);
   // Wird bei Aenderung des Eingabefeldes NACH Schirmupdate aufgerufen
   static void onEditUpdated(cwEditCtl *win);
   // Detailauswahl zum Control wurde angefordert
   static void onDetailRequest(cwEditCtl *win);

};


#endif

/*.EH.*/
