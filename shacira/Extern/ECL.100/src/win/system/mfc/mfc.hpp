/*.SH.*/

/*
 *  Headerfile for module mfc
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  mfc.cpp on Thursday March 28 2002  11:47:30
 */

#ifndef __mfc__
#define __mfc__


// Headerfiles
// ===========================================================================

#include "win/system/mfc/stdafx.h"
#include "win/system/mfc/mfc_t.hpp"

// Ultimate Toolbox
#include "win/system/mfc/utool/OXDropEdit.h"
#include "win/system/mfc/utool/OXHistoryCtrl.h"
#include "win/system/mfc/utool/OXMultiComboBox.h"
#include "win/system/mfc/utool/OXFrameWndDock.h"
#include "win/system/mfc/utool/OXSizeDockBar.h"
//#include "win/system/mfc/utool/OXSizeDlgBar.h"
#include "win/system/mfc/utool/OXMenuBar.h"
#include "win/system/mfc/utool/OXTabView.h"
#include "win/system/mfc/utool/OXZoomVw.h"
#include "win/system/mfc/ugrid/mycug97.h"


// User Defined Messages
// ===========================================================================

#define WM_ECL_REFRESH           (WM_USER + 0x101)
#define WM_ECL_STORE             (WM_USER + 0x102)
#define WM_ECL_DISCARD           (WM_USER + 0x103)
#define WM_ECL_ALLOW_TURN        (WM_USER + 0x104)
#define WM_ECL_ALLOW_STORE       (WM_USER + 0x105)
#define WM_ECL_ALLOW_DISCARD     (WM_USER + 0x106)
#define WM_ECL_ALLOW_CLOSE       (WM_USER + 0x107)
#define WM_ECL_EXEC_DELAYED      (WM_USER + 0x108)
#define WM_ECL_DRAG_ENTER        (WM_USER + 0x110)
#define WM_ECL_DRAG_OVER         (WM_USER + 0x111)
#define WM_ECL_DRAG_SCROLL       (WM_USER + 0x112)
#define WM_ECL_DRAG_LEAVE        (WM_USER + 0x113)
#define WM_ECL_DROP              (WM_USER + 0x114)


// ===========================================================================
// WCWinApp
// ---------------------------------------------------------------------------
//
// CWinApp
//  +--TWCWinApp<CWinApp>
//      +--WCWinApp
//
// ===========================================================================

class WCWinApp : public TWCWinApp<CWinApp> {
public:
   WCWinApp(cwApplication *srv, LPCTSTR lpszAppName) : TWCWinApp<CWinApp>(srv, lpszAppName) { }
	DECLARE_MESSAGE_MAP()
};


// ===========================================================================
// WCMenu
// ---------------------------------------------------------------------------
//
// CMenu
//  +--TWCMenu<CMenu>
//      +--WCMenu
//
// ===========================================================================

class WCMenu : public TWCMenu<CMenu> {
public:
   WCMenu(cwMenu *srv) : TWCMenu<CMenu>(srv) { }
};


// ===========================================================================
// WCOleDataSource
// ---------------------------------------------------------------------------
//
// COleDataSource
//  +--TWCOleDataSource<COleDataSource>
//      +--WCOleDataSource
//
// ===========================================================================

class WCOleDataSource : public TWCOleDataSource<COleDataSource> {
public:
   WCOleDataSource(cwDragSource *srv) : TWCOleDataSource<COleDataSource>(srv) { }
};


// ===========================================================================
// WCOleDropTarget
// ---------------------------------------------------------------------------
//
// COleDropTarget
//  +--TWCOleDropTarget<COleDropTarget>
//      +--WCOleDropTarget
//
// ===========================================================================

class WCOleDropTarget : public TWCOleDropTarget<COleDropTarget> {
public:
   WCOleDropTarget(cwDropTarget *srv) : TWCOleDropTarget<COleDropTarget>(srv) { }
};


// ===========================================================================
// WCImageList
// ---------------------------------------------------------------------------
//
// CImageList
//  +--TWCImageList<CImageList>
//      +--WCImageList
//
// ===========================================================================

class WCImageList : public TWCImageList<CImageList> {
public:
   WCImageList(cwIconList *srv) : TWCImageList<CImageList>(srv) { }
};


// ===========================================================================
// WCWnd
// ---------------------------------------------------------------------------
//
// CWnd
//  +--TWCWnd<CWnd>
//      +--WCWnd
//
// ===========================================================================

class WCWnd : public TWCWnd<CWnd> {
public:
   WCWnd(cwWindow *srv) : TWCWnd<CWnd>(srv) { }
};


// ===========================================================================
// WCHistoryCtrl
// ---------------------------------------------------------------------------
//
// COXHistoryCtrl
//  +--TWCHistoryCtrl<COXHistoryCtrl>
//      +--WCHistoryCtrl
//
// ===========================================================================

class WCHistoryCtrl : public TWCHistoryCtrl<COXHistoryCtrl> {
	DECLARE_DYNCREATE(WCHistoryCtrl)
public:
   WCHistoryCtrl() : TWCHistoryCtrl<COXHistoryCtrl>(0) { }
   WCHistoryCtrl(cwLogWin *srv) : TWCHistoryCtrl<COXHistoryCtrl>(srv) { }
   // Initialization
   //
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCView
// ---------------------------------------------------------------------------
//
// CView
//  +--TWCWnd<CView>
//      +--TWCView<CView>
//          +--WCView
//
// ===========================================================================

class WCView : public TWCView<CView> {
	DECLARE_DYNCREATE(WCView)
public:
   WCView() : TWCView<CView>(0) { }
   WCView(cwView *srv) : TWCView<CView>(srv) { }
   // Initialization
   //
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCTabView
// ---------------------------------------------------------------------------
//
// CView
//  +--TWCWnd<CView>
//      +--TWCView<CView>
//          +--WCTabView
//
// ===========================================================================

class WCTabView : public TWCView< COXTabViewPage<CView> > {
	DECLARE_DYNCREATE(WCTabView)
public:
   WCTabView() : TWCView< COXTabViewPage<CView> >(0) { }
   WCTabView(cwView *srv) : TWCView< COXTabViewPage<CView> >(srv) { }
   void SetHasInternalScrollBars(BOOL value) { m_bHasInternalScrollBars = value; }
   void SetNeedsInternalRedrawing(BOOL value) { m_bNeedsInternalRedrawing = value; }
   // Initialization
   //
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCZoomView
// ---------------------------------------------------------------------------
//
// CView
//  +--TWCWnd<CView>
//      +--TWCView<CView>
//          +--WCZoomView
//
// ===========================================================================

class WCZoomView : public TWCView<COXZoomView> {
	DECLARE_DYNCREATE(WCZoomView)
public:
   WCZoomView() : TWCView<COXZoomView>(0) { }
   WCZoomView(cwView *srv) : TWCView<COXZoomView>(srv) { }
   void LPtoDP(LPRECT lpRect);
   void DPtoLP(LPRECT lpRect);
   // Initialization
   //
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCTabZoomView
// ---------------------------------------------------------------------------
//
// CView
//  +--TWCWnd<CView>
//      +--TWCView<CView>
//          +--WCTabZoomView
//
// ===========================================================================

class WCTabZoomView : public TWCView< COXTabViewPage<COXZoomView> > {
	DECLARE_DYNCREATE(WCTabZoomView)
public:
   WCTabZoomView() : TWCView< COXTabViewPage<COXZoomView> >(0) { }
   WCTabZoomView(cwView *srv) : TWCView< COXTabViewPage<COXZoomView> >(srv) { }
   void LPtoDP(LPRECT lpRect);
   void DPtoLP(LPRECT lpRect);
   // Initialization
   //
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCFrameWnd
// ---------------------------------------------------------------------------
//
// CFrameWnd
//  +--TWCWnd<CFrameWnd>
//      +--TWCFrameWnd<CFrameWnd>
//          +--WCFrameWnd
//
// ===========================================================================

class WCFrameWnd : public TWCFrameWnd<CFrameWnd> {
	DECLARE_DYNCREATE(WCFrameWnd)
public:
   WCFrameWnd() : TWCFrameWnd<CFrameWnd>(0) { }
   WCFrameWnd(cwFrame *srv) : TWCFrameWnd<CFrameWnd>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCToolBarCtrl
// ---------------------------------------------------------------------------
//
// CToolBar
//  +--TWCWnd<CToolBar>
//      +--TWCToolBarCtrl<CToolBarCtrl>
//          +--WCToolBarCtrl
//
// ===========================================================================

class WCToolBarCtrl : public TWCToolBarCtrl<CToolBarCtrl> {
	DECLARE_DYNCREATE(WCToolBarCtrl)
public:
   WCToolBarCtrl();
   WCToolBarCtrl(cwToolWin *srv);
   ~WCToolBarCtrl();
   BOOL LoadToolBar(LPCTSTR lpszResourceName);
   BOOL LoadBitmap(LPCTSTR lpszResourceName);
   BOOL SetButtons(const UINT* lpIDArray, int nIDCount);
   void SetSizes(SIZE sizeButton, SIZE sizeImage);
   BOOL AddReplaceBitmap(HBITMAP hbmImageWell);
protected:
	HRSRC m_hRsrcImageWell; // handle to loaded resource for image well
	HINSTANCE m_hInstImageWell; // instance handle to load image well from
	HBITMAP m_hbmImageWell; // contains color mapped button images
	BOOL m_bDelayedButtonLayout; // used to manage when button layout should be done
	CSize m_sizeImage;  // current image size
	CSize m_sizeButton; // current button size
   void OnSysColorChange();
private:
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCControlBar
// ---------------------------------------------------------------------------
//
// CControlBar
//  +--TWCWnd<CControlBar>
//      +--TWCControlBar<CControlBar>
//          +--WCControlBar
//
// ===========================================================================

class WCControlBar : public TWCControlBar<COXSizeControlBar> {
	DECLARE_DYNCREATE(WCControlBar)
public:
   WCControlBar() : TWCControlBar<COXSizeControlBar>(0) { }
   WCControlBar(cwMiniFrame *srv) : TWCControlBar<COXSizeControlBar>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCDialogBar
// ---------------------------------------------------------------------------
//
// CDialogBar
//  +--TWCWnd<CDialogBar>
//      +--TWCDialogBar<CDialogBar>
//          +--WCDialogBar
//
// ===========================================================================

class WCDialogBar : public TWCDialogBar<CDialogBar> {
	DECLARE_DYNCREATE(WCDialogBar)
public:
   WCDialogBar() : TWCDialogBar<CDialogBar>(0) { }
   WCDialogBar(cwDialogBar *srv) : TWCDialogBar<CDialogBar>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCDialogBar2
// ---------------------------------------------------------------------------
//
// CDialogBar2
//  +--TWCWnd<CDialogBar>
//      +--TWCDialogBar2<CDialogBar>
//          +--WCDialogBar2
//
// ===========================================================================

class WCDialogBar2 : public TWCDialogBar2<CDialogBar> {
	DECLARE_DYNCREATE(WCDialogBar2)
public:
   WCDialogBar2() : TWCDialogBar2<CDialogBar>(0) { }
   WCDialogBar2(cwMiniFrame *srv) : TWCDialogBar2<CDialogBar>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCToolBar
// ---------------------------------------------------------------------------
//
// CToolBar
//  +--TWCWnd<CToolBar>
//      +--TWCToolBar<CToolBar>
//          +--WCToolBar
//
// ===========================================================================

class WCToolBar : public TWCToolBar<CToolBar> {
	DECLARE_DYNCREATE(WCToolBar)
public:
   WCToolBar() : TWCToolBar<CToolBar>(0) { }
   WCToolBar(cwToolBar *srv) : TWCToolBar<CToolBar>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCStatusBar
// ---------------------------------------------------------------------------
//
// CStatusBar
//  +--TWCWnd<CStatusBar>
//      +--TWCStatusBar<CStatusBar>
//          +--WCStatusBar
//
// ===========================================================================

class WCStatusBar : public TWCStatusBar<CStatusBar> {
	DECLARE_DYNCREATE(WCStatusBar)
public:
   WCStatusBar() : TWCStatusBar<CStatusBar>(0) { }
   WCStatusBar(cwStatusBar *srv) : TWCStatusBar<CStatusBar>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCMDIFrameWnd
// ---------------------------------------------------------------------------
//
// CMDIFrameWnd
//  +--TWCWnd<CMDIFrameWnd>
//      +--TWCFrameWnd<CMDIFrameWnd>
//          +--WCMDIFrameWnd
//
// ===========================================================================

class WCMDIFrameWnd : public TWCFrameWnd<CMDIFrameWnd> {
	DECLARE_DYNCREATE(WCMDIFrameWnd)
public:
   WCMDIFrameWnd() : TWCFrameWnd<CMDIFrameWnd>(0) { }
   WCMDIFrameWnd(cwFrame *srv) : TWCFrameWnd<CMDIFrameWnd>(srv) { }
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCMDIChildWnd
// ---------------------------------------------------------------------------
//
// CMDIChildWnd
//  +--TWCWnd<CMDIChildWnd>
//      +--TWCFrameWnd<CMDIChildWnd>
//          +--WCMDIChildWnd
//
// ===========================================================================

class WCMDIChildWnd : public TWCFrameWnd<CMDIChildWnd> {
	DECLARE_DYNCREATE(WCMDIChildWnd)
public:
   WCMDIChildWnd() : TWCFrameWnd<CMDIChildWnd>(0) { }
   WCMDIChildWnd(cwFrame *srv) : TWCFrameWnd<CMDIChildWnd>(srv) { }
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCFrameDockWnd
// ---------------------------------------------------------------------------
//
// CFrameDockWnd
//  +--TWCWnd<CFrameDockWnd>
//      +--TWCFrameWnd<CFrameDockWnd>
//          +--WCFrameWnd
//
// ===========================================================================

#ifdef __Use_COXMenuBar__
typedef COXMenuBarFrame<COXFrameWndSizeDock,COXSizeDockBar> CFrameDockWnd;
#else
typedef COXFrameWndSizeDock CFrameDockWnd;
#endif

class WCFrameDockWnd : public TWCFrameWnd<CFrameDockWnd> {
	DECLARE_DYNAMIC(WCFrameDockWnd)
public:
   WCFrameDockWnd() : TWCFrameWnd<CFrameDockWnd>(0) { }
   WCFrameDockWnd(cwFrame *srv) : TWCFrameWnd<CFrameDockWnd>(srv) { }
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCMDIFrameDockWnd
// ---------------------------------------------------------------------------
//
// CMDIFrameDockWnd
//  +--TWCWnd<CMDIFrameDockWnd>
//      +--TWCFrameWnd<CMDIFrameDockWnd>
//          +--WCMDIFrameDockWnd
//
// ===========================================================================

#ifdef __Use_COXMenuBar__
typedef COXMenuBarFrame<COXMDIFrameWndSizeDock,COXSizeDockBar> CMDIFrameDockWnd;
#else
typedef COXMDIFrameWndSizeDock CMDIFrameDockWnd;
#endif

class WCMDIFrameDockWnd : public TWCFrameWnd<CMDIFrameDockWnd> {
	DECLARE_DYNAMIC(WCMDIFrameDockWnd)
public:
   WCMDIFrameDockWnd() : TWCFrameWnd<CMDIFrameDockWnd>(0) { }
   WCMDIFrameDockWnd(cwFrame *srv) : TWCFrameWnd<CMDIFrameDockWnd>(srv) { }
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCMDIChildDockWnd
// ---------------------------------------------------------------------------
//
// CMDIChildDockWnd
//  +--TWCWnd<CMDIChildDockWnd>
//      +--TWCFrameWnd<CMDIChildDockWnd>
//          +--WCMDIChildDockWnd
//
// ===========================================================================

typedef COXMDIChildWndSizeDock CMDIChildDockWnd;

class WCMDIChildDockWnd : public TWCFrameWnd<CMDIChildDockWnd> {
	DECLARE_DYNAMIC(WCMDIChildDockWnd)
public:
   WCMDIChildDockWnd() : TWCFrameWnd<CMDIChildDockWnd>(0) { }
   WCMDIChildDockWnd(cwFrame *srv) : TWCFrameWnd<CMDIChildDockWnd>(srv) { }
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCDialog
// ---------------------------------------------------------------------------
//
// CDialog
//  +--TWCWnd<CDialog>
//      +--TWCDialog<CDialog>
//          +--WCDialog
//
// ===========================================================================

class WCDialog : public TWCDialog<CDialog> {
   bool m_bModal;
public:
   WCDialog() : TWCDialog<CDialog>(0) { m_bModal = false; }
   WCDialog(cwDialog *srv) : TWCDialog<CDialog>(srv) { m_bModal = false; }
   WCDialog(cwDialog *srv, UINT id, CWnd *parent) : TWCDialog<CDialog>(srv, id, parent) { m_bModal = false; }
   // START ECL EXTENSIONS
	BOOL EclCreate(UINT nIDTemplate, CWnd* pParentWnd = NULL);
   void EclEndDialog(int nResult);
   HWND EclPreModal();
   void EclPostModal();
   int EclDoModal();
   // END ECL EXTENSIONS
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCPropertyPage
// ---------------------------------------------------------------------------
//
// CPropertyPage
//  +--TWCWnd<CPropertyPage>
//      +--TWCDialog<CPropertyPage>
//          +--TWCPropertyPage<CPropertyPage>
//              +--WCPropertyPage
//
// ===========================================================================

class WCPropertyPage : public TWCPropertyPage<CPropertyPage> {
   friend class cwNotebookPage;
public:
   WCPropertyPage();
   WCPropertyPage(cwNotebookPage *srv);
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCPropertySheet
// ---------------------------------------------------------------------------
//
// CPropertySheet
//  +--TWCWnd<CPropertySheet>
//      +--TWCPropertySheet<CPropertySheet>
//          +--WCPropertySheet
//
// ===========================================================================

class WCPropertySheet : public TWCPropertySheet<CPropertySheet> {
	DECLARE_DYNCREATE(WCPropertySheet)
   COXLayoutManager m_pLayoutManager;
	CRect m_rectPage;
public:
   WCPropertySheet(cwNotebookDlg *srv);
   ~WCPropertySheet();
protected:
	BOOL OnInitDialog();
	BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);
	BOOL PreCreateWindow(CREATESTRUCT& cs);
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
	afx_msg void OnSize(UINT nType, int cx, int cy);
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCButton
// ---------------------------------------------------------------------------
//
// CButton
//  +--TWCWnd<CButton>
//      +--TWCButton<CButton>
//          +--WCButton
//
// ===========================================================================

class WCButton : public TWCButton<CButton> {
public:
   WCButton() : TWCButton<CButton>(0) { }
   WCButton(cwButtonCtl *srv) : TWCButton<CButton>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCStatic
// ---------------------------------------------------------------------------
//
// CStatic
//  +--TWCWnd<CStatic>
//      +--TWCStatic<CStatic>
//          +--WCStatic
//
// ===========================================================================

class WCStatic : public TWCStatic<CStatic> {
public:
   WCStatic() : TWCStatic<CStatic>(0) { }
   WCStatic(cwStaticCtl *srv) : TWCStatic<CStatic>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCTabCtrl
// ---------------------------------------------------------------------------
//
// CTabCtrl
//  +--TWCWnd<CTabCtrl>
//      +--TWCTabCtrl<CTabCtrl>
//          +--WCTabCtrl
//
// ===========================================================================

class WCTabCtrl : public TWCTabCtrl<CTabCtrl> {
public:
   WCTabCtrl() : TWCTabCtrl<CTabCtrl>(0) { }
   WCTabCtrl(cwNotebookCtl *srv) : TWCTabCtrl<CTabCtrl>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCListCtrl
// ---------------------------------------------------------------------------
//
// CListCtrl
//  +--TWCWnd<CListCtrl>
//      +--TWCListCtrl<CListCtrl>
//          +--WCListCtrl
//
// ===========================================================================

class WCListCtrl : public TWCListCtrl<CListCtrl> {
   CFont font_bold;
public:
   WCListCtrl() : TWCListCtrl<CListCtrl>(0) { init(); }
   WCListCtrl(cwContainer *srv) : TWCListCtrl<CListCtrl>(srv) { init(); }
   HFONT GetFontHandle() { return HFONT(font_bold); }
private:
   void init();
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCTreeCtrl
// ---------------------------------------------------------------------------
//
// CTreeCtrl
//  +--TWCWnd<CTreeCtrl>
//      +--TWCTreeCtrl<CTreeCtrl>
//          +--WCTreeCtrl
//
// ===========================================================================

class WCTreeCtrl : public TWCTreeCtrl<CTreeCtrl> {
public:
   WCTreeCtrl() : TWCTreeCtrl<CTreeCtrl>(0) { }
   WCTreeCtrl(cwTree *srv) : TWCTreeCtrl<CTreeCtrl>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCGridCtrl
// ---------------------------------------------------------------------------
//
// CGridCtrl
//  +--TWCWnd<CGridCtrl>
//      +--TWCGridCtrl<CGridCtrl>
//          +--WCGridCtrl
//
// ===========================================================================

class WCGridCtrl : public TWCGridCtrl<MyCug> {
   int font_normal, font_bold;
public:
   WCGridCtrl();
   WCGridCtrl(cwGrid *srv);
   DECLARE_MESSAGE_MAP( )
   int getFontNormal() const { return font_normal; }
   int getFontBold() const { return font_bold; }
protected:
   void OnSetup();
};


// ===========================================================================
// WCListBox
// ---------------------------------------------------------------------------
//
// CListBox
//  +--TWCWnd<CListBox>
//      +--TWCListBox<CListBox>
//          +--WCListBox
//
// ===========================================================================

class WCListBox : public TWCListBox<CListBox> {
public:
   WCListBox() : TWCListBox<CListBox>(0) { }
   WCListBox(cwListBox *srv) : TWCListBox<CListBox>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCCheckListBox
// ---------------------------------------------------------------------------
//
// CCheckListBox
//  +--TWCWnd<CCheckListBox>
//      +--TWCListBox<CCheckListBox>
//          +--TWCCheckListBox<CCheckListBox>
//              +--WCCheckListBox
//
// ===========================================================================

class WCCheckListBox : public TWCCheckListBox<CCheckListBox> {
public:
   WCCheckListBox() : TWCCheckListBox<CCheckListBox>(0) { }
   WCCheckListBox(cwSetBox *srv) : TWCCheckListBox<CCheckListBox>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCComboBox
// ---------------------------------------------------------------------------
//
// CComboBox
//  +--TWCWnd<CComboBox>
//      +--TWCComboBox<CComboBox>
//          +--WCComboBox
//
// ===========================================================================

class WCComboBox : public TWCComboBox<CComboBox> {
public:
   WCComboBox() : TWCComboBox<CComboBox>(0) { }
   WCComboBox(cwComboBox *srv) : TWCComboBox<CComboBox>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCMultiComboBox
// ---------------------------------------------------------------------------
//
// CComboBox
//  +--TWCWnd<COXMultiComboBox>
//      +--TWCComboBox<COXMultiComboBox>
//          +--WCMultiComboBox
//
// ===========================================================================

class WCMultiComboBox : public TWCComboBox<COXMultiComboBox> {
public:
   WCMultiComboBox() : TWCComboBox<COXMultiComboBox>(0) { }
   WCMultiComboBox(cwComboBox *srv) : TWCComboBox<COXMultiComboBox>(srv) { }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCEdit
// ---------------------------------------------------------------------------
//
// CEdit
//  +--TWCWnd<CEdit>
//      +--TWCEdit<CEdit>
//          +--WCEdit
//
// ===========================================================================

typedef COXDropEdit<CEdit> CMyOXDropEdit;

class WCEdit : public TWCEdit<CMyOXDropEdit> {
public:
   WCEdit() : TWCEdit<CMyOXDropEdit>(0) { ShowButton(FALSE); }
   WCEdit(cwEditCtl *srv) : TWCEdit<CMyOXDropEdit>(srv) { ShowButton(FALSE); }
   void OnDropButton() { ccwEditCtl::onDetailRequest(_srv); }
   DECLARE_MESSAGE_MAP( )
};


// ===========================================================================
// WCMonthCalCtrl
// ---------------------------------------------------------------------------
//
// CMonthCalCtrl
//  +--WCMonthCalCtrl
//
// ===========================================================================

class WCMonthCalCtrl : public CMonthCalCtrl {
   cwControl *_srv;
public:
   WCMonthCalCtrl(cwControl *srv);
   ~WCMonthCalCtrl();
   int DoModal();
protected:
	LRESULT WindowProc(UINT message, WPARAM wParam, LPARAM lParam);
	BOOL OnChildNotify(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pLResult);
   DECLARE_MESSAGE_MAP( )
};


#endif

/*.EH.*/
