/*.SH.*/

/*
 *  Headerfile for module ew_toolbars
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_toolbars.cpp on Saturday March 02 2002  00:45:32
 */

#ifndef __ew_toolbars__
#define __ew_toolbars__


// Headerfiles
// ===========================================================================

#include "base/eb_elo.hpp"
#include "win/ew_frames.hpp"


// ===========================================================================
// cwToolWin
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwToolWin
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwToolWin : public cwWindow {
   ELO_DECLARE(cwToolWin,cwWindow)
   friend class ccwToolWin;

public:

   // Konstruktor
   inline cwToolWin() : cwWindow(0) { init(); }
   // Destruktor
   virtual ~cwToolWin();


   // window-Styles
   // =============

   // Styles
   enum STYLES { wsStart = cwWindow::wsUser,
      wsAlignTop        = wsStart << 0,   // Oben im Client-Bereich des Parents
      wsAlignBottom     = wsStart << 1,   // Unten im Client-Bereich des Parents
      wsFlatBtns        = wsStart << 2,   // Flache Buttons benutzen
      wsTextBtns        = wsStart << 3,   // Buttons mit Text benutzen
      wsUser            = wsStart << 4    // Benutzerdefinierte Styles
   };


   // Allgemeines
   // ===========

   // Erzeugen eines Toolbar-Windows
   void create(cwWindow *parent, int id,
               int style = wsChild | wsVisible | wsAlignTop | wsFlatBtns,
               const cdRect& rect = cdRect());
   // Erzeugen eines Toolbar-Windows ueber eine Toolbar-Resource
   void create(cwWindow *parent, int id, const cResource& res,
               int style = wsChild | wsVisible | wsAlignTop | wsFlatBtns,
               const cdRect& rect = cdRect());

/*
   // Button-Styles
   // =============

   // Hinweis: Falls ueber eine 'index_or_id' eine ID spezifiziert wird
   // (by_id = true), wird eine nach ECL-Konventionen kodierte ID erwartet,
   // also z.B. cwCmdCmds::cmdFileOpen fuer eine Standard-CMD-ID.

   enum BUTTON_STYLE {
      bsPushButton,     // Button verhaelt sich wie Push-Button (Default)
      bsCheckButton     // Button verhaelt sich wie Check-Button
   };

   // Button-Style fuer Button 'index_or_id' setzen
   void setButtonStyle(int index_or_id, BUTTON_STYLE bs, bool by_id = false);
   // Button-Style fuer Button 'index_or_id' erfragen
   BUTTON_STYLE getButtonStyle(int index_or_id, bool by_id = false) const;
*/


protected:

   // Hinzugefuegte Events
   // ====================

   enum DD_RESULT {     // Rueckgabewerte fuer onDropDown:
      ddrNotHandled,    //  - Event wurde nicht behandelt (Default)
      ddrHandled,       //  - Knopf wurde als Drop-Down behandelt
      ddrNormalBtn      //  - Knopf wurde als normaler Knopf behandelt
   };

   // Wird aufgerufen, wenn ein DropDown-Knopf gedrueckt wird
   virtual DD_RESULT onDropDown(int btn_id);


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um die durch 'mask' spezifizierten Window-Styles zu ermitteln
   int onGetStyles(int mask) const;
   // Wird aufgerufen, um die OS-spezifischen Styles aus den ECL-Styles zu ermitteln
   void onMakeStyles(int styles, int os_styles[]) const;
   // Wird aufgerufen, um Window-Styles zu setzen (add) und zu entfernen (remove)
   void onModifyStyles(int add, int remove, int os_add[], int os_remove[]);


protected:

   // Interner Konstruktor
   cwToolWin(void *wnd);


private:

   // Initialisierung
   void init();

};


// ===========================================================================
// cwToolBar
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwDockable
//          +--cwToolBar
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwToolBar : public cwDockable {
   ELO_DECLARE(cwToolBar,cwDockable)
   friend class ccwToolBar;

public:

   // Konstruktor
   inline cwToolBar() : cwDockable(0) { init(); }
   // Destruktor
   virtual ~cwToolBar();


   // window-Styles
   // =============

   // Styles
   enum STYLES { wsStart = cwWindow::wsUser,
      wsAlignTop        = wsStart << 0,   // Oben im Client-Bereich des Parents
      wsAlignBottom     = wsStart << 1,   // Unten im Client-Bereich des Parents
      wsFlatBtns        = wsStart << 2,   // Flache Buttons benutzen
      wsTextBtns        = wsStart << 3,   // Buttons mit Text benutzen
      wsUser            = wsStart << 4    // Benutzerdefinierte Styles
   };


   // Allgemeines
   // ===========

   // Erzeugen eines Toolbar-Windows
   void create(cwFrame *parent, int id,
               int style = wsChild | wsVisible | wsAlignTop | wsFlatBtns,
               const cString& text = 0, const cdRect& rect = cdRect());
   // Erzeugen eines Toolbar-Windows aus einer Resource
   void create(cwFrame *parent, const cResource& res,
               int style = wsChild | wsVisible | wsAlignTop | wsFlatBtns,
               const cString& text = 0, const cdRect& rect = cdRect());


   // ToolBar einrichten
   // =====================

   enum BUTTON_STYLE {
      bsDefault,        // Button hat Default-Form (= bsPushButton)
      bsSeparator,      // Button ist ein Separator
      bsPushButton,     // Button verhaelt sich wie Push-Button (Default)
      bsCheckButton,    // Button verhaelt sich wie Check-Button
      bsMenuButton      // Button verhaelt sich wie ein Dropdown-Menu
   };

   enum BUTTON_FLAGS {
      bflGroup       = 0x01,  // Beginn einer Gruppe von Buttons
      bflAutosize    = 0x02   // Button passt Groesse automatisch an Text an
   };

   // Button 'index' einrichten (Default-Werte fuer Parameter = Keine Aenderung)
   void setupButton(int index, BUTTON_STYLE bs = bsDefault,
                    int flags = -1, int id = -1, int icon = -1, const char *text = 0);
   // Button 'index' einrichten (Nur Text, Alternative zu oben)
   void setupButton(int index, const char *text);
   // Konfiguration des ToolBars uebernehmen
   void setupConfig();


   // ToolBar verwalten
   // ====================

   // Hinweis: Falls ueber eine 'index_or_id' eine ID spezifiziert wird
   // (by_id = true), wird eine nach ECL-Konventionen kodierte ID erwartet,
   // also z.B. cwCmdCmds::cmdFileOpen fuer eine Standard-CMD-ID.

   // Button-Style fuer Button 'index_or_id' setzen
   void setButtonStyle(int index_or_id, BUTTON_STYLE bs, bool by_id = false);
   // Button-Style fuer Button 'index_or_id' erfragen
   BUTTON_STYLE getButtonStyle(int index_or_id, bool by_id = false) const;

   // Button-Flags fuer Button 'index_or_id' setzen
   void setButtonFlags(int index_or_id, int flags, bool by_id = false);
   // Button-Flags fuer Button 'index_or_id' erfragen
   int getButtonFlags(int index_or_id, bool by_id = false) const;

   // Text des Buttons 'index_or_id' setzen
   void setButtonText(int index_or_id, const cString& text, bool by_id = false);
   // Text des Buttons 'index_or_id' erfragen
   cString getButtonText(int index_or_id, bool by_id = false) const;


protected:

   // Hinzugefuegte Events
   // ====================

   enum DD_RESULT {     // Rueckgabewerte fuer onDropDown:
      ddrNotHandled,    //  - Event wurde nicht behandelt (Default)
      ddrHandled,       //  - Knopf wurde als Drop-Down behandelt
      ddrNormalBtn      //  - Knopf wurde als normaler Knopf behandelt
   };

   // Wird aufgerufen, wenn ein DropDown-Knopf gedrueckt wird
   virtual DD_RESULT onDropDown(int btn_id);


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um die Andockseiten zu setzen
   void onSetDockSides(int sides, int os_sides);
   // Update Benutzerschnittstelle
   // rc: true -> Meldung bearbeitet; false -> Default ausfuehren
   bool onCommandUI(cwCmdUI& cmd);

   // Wird aufgerufen, um die durch 'mask' spezifizierten Window-Styles zu ermitteln
   int onGetStyles(int mask) const;
   // Wird aufgerufen, um die OS-spezifischen Styles aus den ECL-Styles zu ermitteln
   void onMakeStyles(int styles, int os_styles[]) const;
   // Wird aufgerufen, um Window-Styles zu setzen (add) und zu entfernen (remove)
   void onModifyStyles(int add, int remove, int os_add[], int os_remove[]);


protected:

   // Interner Konstruktor
   cwToolBar(void *wnd);


private:

   // Initialisierung
   void init();

};


// ===========================================================================
// cwDialogBar
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwDockable
//          +--cwDialogBar
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwDialogBar : public cwDockable {
   ELO_DECLARE(cwDialogBar,cwDockable)
   friend class ccwDialogBar;

public:

   // Konstruktor
   inline cwDialogBar() : cwDockable(0) { init(); }
   // Destruktor
   virtual ~cwDialogBar();


   // Allgemeines
   // ===========

   // Erzeugen eines Dialogbar-Windows aus einer Resource
   void create(cwFrame *parent, const cResource& res, int style = 0, int id = 0);


protected:

   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um die Andockseiten zu setzen
   void onSetDockSides(int sides, int os_sides);


protected:

   // Interner Konstruktor
   cwDialogBar(void *wnd);


private:

   // Initialisierung
   void init();

};


// ===========================================================================
// cwStatusBar
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwDockable
//          +--cwStatusBar
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwStatusBar : public cwDockable {
   ELO_DECLARE(cwStatusBar,cwDockable)
   friend class ccwStatusBar;

public:

   // Konstruktor
   inline cwStatusBar() : cwDockable(0) { init(); }
   // Destruktor
   virtual ~cwStatusBar();


   // Allgemeines
   // ===========

   // Erzeugen eines Statusbar-Windows
   void create(cwFrame *parent, int style = 0, int id = 0);


   // Status-Bar einrichten
   // =====================

   // Pane 'pane' einrichten (Muss fuer jedes Pane einmal aufgerufen werden!)
   void setupPane(int pane, const cResource& text_id, bool enabled = true);
   // Pane 'pane' ueber Breite einrichten (Alternative zu oben)
   void setupPane(int pane, int width, const char *def_text = 0, bool enabled = true);
   // Konfiguration des Status-Bars uebernehmen
   void setupConfig();


   // Status-Bar verwalten
   // ====================

   // Neuen Text fuer Pane 'pane' setzen
   void setPaneText(int pane, const char *text);
   // Aktuellen Text von Pane 'pane' erfragen
   cString getPaneText(int pane) const;

   // Neuen Breite fuer Pane 'pane' setzen
   void setPaneWidth(int pane, int width);
   // Aktuelle Breite von Pane 'pane' erfragen
   int getPaneWidth(int pane) const;

   // Enabled-Status fuer Pane 'pane' setzen
   void setPaneEnabled(int pane, bool enable = true);
   // Ist die Pane 'pane' aktiv?
   bool isPaneEnabled(int pane) const;


protected:

   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um die Andockseiten zu setzen
   void onSetDockSides(int sides, int os_sides);


protected:

   // Interner Konstruktor
   cwStatusBar(void *wnd);


private:

   // Initialisierung
   void init();

   struct ADD_INFO;
   ADD_INFO *info;

};


#endif

/*.EH.*/
