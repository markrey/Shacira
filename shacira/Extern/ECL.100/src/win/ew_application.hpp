/*.SH.*/

/*
 *  Headerfile for module ew_application
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_application.cpp on Saturday March 23 2002  11:46:14
 */

#ifndef __ew_application__
#define __ew_application__


// Headerfiles
// ===========================================================================

#include "base/eb_str.hpp"
#include "base/eb_prof.hpp"
#include "base/eb_cmdarg.hpp"
#include "win/ew_base.hpp"
#include "win/ew_commands.hpp"

class cwWindow;


// ===========================================================================
// cwApplication
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwApplication
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwApplication : public cBase {
   friend class ccwApplication;

public:

   // Konstruktor
   cwApplication(cString app_name, cString company_name = 0);
   // Destruktor
   virtual ~cwApplication();

   // Zeiger auf _DAS_ Applikationsobjekt ermitteln
   static cwApplication *getTheApp();

   // Name der Applikation erfragen (vgl. cwApplication-Konstruktor)
   static cString getAppName();
   // Pfadname der ausfuehrbaren Datei der Applikation erfragen
   static cString getAppPathName();
   // Name der Herstellerfirma erfragen
   static cString getCompanyName();

   // Zeiger auf das Profile-Objekt der Anwendung ermitteln
   static cProfile *getProfile();
   // Zeiger auf das CmdOptions-Objekt der Kommandozeile ermitteln
   static cCmdOptions *getOptions();
   // Zeiger auf das Hauptfenster der Anwendeung erfragen
   static cwWindow *getMainWindow();

   // Hauptfenster der Anwendung bekanntmachen
   void setMainWindow(cwWindow *main_window);


protected:

   // Zusaetzliche Events
   // ===================

   // Wird aufgerufen, um die Applikationsinstanz zu initialisieren
   virtual bool onInit() = 0;
   // Wird aufgerufen, um die Hauptschleife der Applikation auszufuehren
   virtual int onRun();
   // Wird aufgerufen, um die Applikationsinstanz zu deinitialisieren
   virtual int onExit();

   // Wird zur Behandlung von cmdAppAbout aufgerufen...
   virtual void onAppAbout();
   // Wird zur Behandlung von cmdAppExit aufgerufen...
   virtual void onAppExit();
   // Wird zur Behandlung von cmdFileNew aufgerufen...
   virtual void onFileNew();
   // Wird zur Behandlung von cmdFileOpen aufgerufen...
   virtual void onFileOpen();
   // Wird zur Behandlung von cmdFilePrintSetup aufgerufen...
   virtual void onFilePrintSetup();
   // Wird zur Behandlung von cmdHelpContext aufgerufen...
   virtual void onHelpContext();
   // Wird zur Behandlung von cmdHelp aufgerufen...
   virtual void onHelp();
   // Wird zur Behandlung von cmdHelpIndex aufgerufen...
   virtual void onHelpIndex();
   // Wird zur Behandlung von cmdHelpFinder aufgerufen...
   virtual void onHelpFinder();
   // Wird zur Behandlung von cmdHelpUsing aufgerufen...
   virtual void onHelpUsing();


protected:

   void *_app;       // Zeiger auf Wrapper-Objekt


   // ECL/win Internas
   // ================

   // Trennen vom Wrapper
   void __disconnect();
   // Eigenen Zeiger auf Wrapper-Objekt ermitteln
   void *__getApp();
   const void *__getApp() const;
   // Zeiger auf Wrapper-Objekt ermitteln (statische Variante)
   static void *__getApp(cwApplication *application);
   static const void *__getApp(const cwApplication *application);

   // Standard-Befehl von Main-Window ausfuehren
   // rc: true -> Meldung bearbeitet; false -> Meldung nicht bearbeitet
   bool __onFrameCommand(cwWindow *win, const cwCmdEvt& cmd);
   // Wird VOR onInit() aufgerufen
   void __onPreInit();
   // Wird NACH onExit() aufgerufen
   void __onPostExit();


private:

   // Zeiger auf die (einzige) Applikations-Struktur
   static cwApplication *the_app;
   // Name der Applikation
   cString app_name;
   // Name der Herstellerfirma
   cString company_name;
   // Zeiger auf das aktuelle Main-Window
   cwWindow *main_window;
   // Zeiger auf das aktuelle CmdOptions-Objekt
   cCmdOptions *options;
   // Das aktuelle Profile-Objekt
   cProfile profile;

};


#endif

/*.EH.*/
