/*.SH.*/

/*
 *  Headerfile for module ew_draw
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_draw.cpp on Thursday November 15 2001  18:47:51
 */

#ifndef __ew_draw__
#define __ew_draw__


// Headerfiles
// ===========================================================================

#include "base/eb_collect.hpp"
#include "draw/ed_space.hpp"
#include "win/ew_views.hpp"


// ===========================================================================
// Definition cwDrawDevice
// ---------------------------------------------------------------------------
//
//  cBase
//   +--cdDevice
//       +--cdRetainedDevice
//           +--cwDrawDevice
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwDrawDevice : public cdRetainedDevice {

public:

   inline cwDrawDevice(cwWindow *win = 0, void *ctxt = 0)
      { init(win, ctxt); }
   ~cwDrawDevice();

   void paintAt(cdDeviceStore *elems, const cdPoint& pos);
   void forceRefresh();

   void assocWindow(cwWindow *win);
   void assocContext(void *ctxt);

   cwWindow *getAssocWindow() const;
   void *getAssocContext() const;

private:
   struct DEVICE_INFO;
   DEVICE_INFO *dev_info;

   void init(cwWindow *win, void *ctxt);

};


// ===========================================================================
// Definition cwDrawSpace
// ---------------------------------------------------------------------------
//
//  cBase
//   +--cdSpace
//       +--cwDrawSpace
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwDrawSpace : public cdSpace {

public:
   inline cwDrawSpace(cwDrawDevice *dev) : cdSpace(dev)
      { init(dev); }
   ~cwDrawSpace();

   void beginDrawing();
   cdDeviceStore *endDrawing();

protected:

   // Konvertiere physikalische in logische Koordinaten
   long onConvPhys2Log(double phys) const;
   // Konvertiere logische in physikalische Koordinaten
   double onConvLog2Phys(long log) const;

private:
   cwDrawDevice *win_dev;   // Zugeordnetes Windows-Device
   void init(cwDrawDevice *dev);

};


// ===========================================================================
// Definition cwDrawDocument
// ---------------------------------------------------------------------------
//
// Basisklasse fuer Draw-Dokumente. Unterstuetzt eine Liste von Zeigern auf
// Draw-Objekte (Basisklasse cdObject), die vom View erfragt und zur Anzeige
// gebracht werden kann.
//
// cEloBase
//  +--cEloElement
//      +--cwDrawDocument
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwDrawDocument : public cEloDocument {
   ELO_DECLARE(cwDrawDocument,cEloDocument)

public:

   // Konstruktor ohne Elementbeschreibung
   cwDrawDocument();
   // Konstruktor ueber Elementbeschreibung (direkt)
   cwDrawDocument(const cEloElementDescription *elem_descr);
   // Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   cwDrawDocument(const cEloDescriptionManager *descr_manager, cString descr_sig);
   // Destruktor
   virtual ~cwDrawDocument();


   // Allgemeines
   // ===========

   // Zeichenbereich in physikalischen Koordinaten (mm) ermitteln
   inline c2dBox getDrawArea() const
      { return onGetDrawArea(); }


   // Objektliste
   // ===========

   // Startposition der Objekt-Iteration ermitteln
   inline IPOSITION getStartPosition() const
      { return onGetStartPosition(); }
   // Naechstes Objekt der Iteration ermitteln
   inline cdObject *getNextObject(IPOSITION& pos) const
      { return onGetNextObject(pos); }


protected:

   // Objektliste loeschen
   void clearObjects();
   // Objekt an Objektliste anhaengen
   void addObject(cdObject *obj);


protected:

   // Hinzugefuegte Events
   // ====================

   // Wird aufgerufen, um den Zeichenbereich zu ermitteln
   virtual c2dBox onGetDrawArea() const;
   // Wird aufgerufen, um die Objektliste zu loeschen
   virtual void onClearObjects();
   // Wird aufgerufen, um die Objektliste zu loeschen
   virtual void onAddObject(cdObject *obj);
   // Wird aufgerufen, um die Startposition der Objekt-Iteration zu ermitteln
   virtual IPOSITION onGetStartPosition() const;
   // Wird aufgerufen, um das naechste Objekt der Iteration zu ermitteln
   virtual cdObject *onGetNextObject(IPOSITION& pos) const;


private:

   // Zeiger auf die geordnete Objektliste (oder 0)
   struct OBJECTS;
   OBJECTS *objects;

};


// ===========================================================================
// Definition cwDrawView
// ---------------------------------------------------------------------------
//
//  cBase
//   +--cwWindow
//       +--cwView
//           +--cwZoomView
//               +--cwDrawView
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwDrawView : public cwZoomView {
   ELO_DECLARE(cwDrawView,cwZoomView)

public:

   // Konstruktor ohne Elementbeschreibung
   inline cwDrawView() :
      cwZoomView((void*)0) { init(); }
   // Konstruktor ueber Elementbeschreibung (direkt)
   inline cwDrawView(const cEloElementDescription *elem_descr) :
      cwZoomView((void*)0, elem_descr) { init(); }
   // Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   inline cwDrawView(const cEloDescriptionManager *descr_manager, cString descr_sig) :
      cwZoomView((void*)0, descr_manager, descr_sig) { init(); }
   // Destruktor
   virtual ~cwDrawView();

   // Refresh des Fensters durchfuehren
   void refresh();

   // Zeichenbereich (Welt) auf Dokumentgroesse einstellen
   void setDrawArea();
   // Zeichenbereich (Welt) einrichten
   void setDrawArea(const c2dBox& draw_area);

   // Zoomen auf Dokumentgroesse
   void zoomToDoc();
   // Zoomen auf Bereich (Weltkoordinaten)
   void zoomToArea(const c2dBox& area);


protected:

   // Ueberschriebene Events
   // ======================

   // Wird bei der Initialisierung des Views aufgerufen
   void onInit();
   // Wird aufgerufen, um den Anzeigebereich des Views zu zeichnen
   void onDraw(void *ctxt);

   // Wird aufgerufen, um das Update des zugeordneten Dokumentes zu signalisieren
   void onUpdate(cEloView *from_view, cEloElement *elem, long hint);
   // Wird aufgerufen, wenn ein Dokument an den View "angehaengt" wird
   void onDocumentAdded();

   // Wird aufgerufen, um die eindeutige Signatur des ELO-Objektes zu erfragen
   cString onGetSignature() const
      { return "cwDrawView"; }


protected:

   // Interner Konstruktor ohne Elementbeschreibung
   cwDrawView(void *wnd);
   // Interner Konstruktor ueber Elementbeschreibung (direkt)
   cwDrawView(void *wnd, const cEloElementDescription *elem_descr);
   // Interner Konstruktor ueber Elementbeschreibung (indirekt ueber Signatur)
   cwDrawView(void *wnd, const cEloDescriptionManager *descr_manager, cString descr_sig);

   cwDrawDevice device;
   cdViewport vport;


private:

   // Gespeicherte Device-Elemente fuer onDraw()
   cdDeviceStore *elems;

   // Initialisierung
   void init();

};


#endif

/*.EH.*/
