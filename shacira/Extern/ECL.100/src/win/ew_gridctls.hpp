/*.SH.*/

/*
 *  Headerfile for module ew_gridctls
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_gridctls.cpp on Saturday November 17 2001  17:13:11
 */

#ifndef __ew_gridctls__
#define __ew_gridctls__


// Headerfiles
// ===========================================================================

#include "win/ew_listctls.hpp"
#include "store/es_var.hpp"


// ===========================================================================
// Definition cwGrid
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwListCtl
//              +--cwGrid
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwGrid : public cwListCtl {
   ELO_DECLARE(cwGrid,cwListCtl)
   friend class ccwGrid;

public:

   // Konstruktor
   inline cwGrid() : cwListCtl(0) { init(); }
   // Destruktor
   virtual ~cwGrid();


   // Allgemeines
   // ===========

   // Erzeugen des Controls
   void create(cwWindow *parent, int id, csStorage *store, csQuery *query,
               int style = 0, const cdRect& rect = cdRect());
   // Liste zugeordneter Icons initialisieren
   void setIconList(const cwIconList& ilist);


   // window-Flags
   // ============

   enum FLAGS { wflStart = cwListCtl::wflUser,
      wflUser           = wflStart << 1   // Benutzerdefinierte Flags
   };


   // window-Styles
   // =============

   // Styles
   enum STYLES { wsStart = cwListCtl::wsUser,
      wsDatabase        = wsStart << 0,   // Verwendung als Datenbank-Grid
      wsCanSizeRows     = wsStart << 1,   // Zeilen veraenderbar?
      wsCanSizeCols     = wsStart << 2,   // Spalten veraenderbar?
      wsCanSizeRowHead  = wsStart << 3,   // Zeilenkopf veraenderbar?
      wsCanSizeColHead  = wsStart << 4,   // Spaltenkopf veraenderbar?
      wsUser            = wsStart << 5    // Benutzerdefinierte Styles
   };


protected:

   // Hinzugefuegte Events
   // ====================

   // Darf die Groesse von Spalte 'col' veraendert werden?
   virtual bool onCanSizeColumn(int col);
   // Darf die Groesse von Zeile 'row' veraendert werden?
   virtual bool onCanSizeRow(int row);
   // Darf die Groesse der Spaltenkoepfe veraendert werden?
   virtual bool onCanSizeColumnHead();
   // Darf die Groesse der Zeilenkoepfe veraendert werden?
   virtual bool onCanSizeRowHead();

   // Wird aufgerufen, wenn sich die aktuelle Spalte geaendert hat
   virtual void onChangedColumn(int old_col, int new_col);
   // Wird aufgerufen, wenn sich die aktuelle Zeile geaendert hat
   virtual void onChangedRow(int old_row, int new_row);
   // Wird aufgerufen, wenn sich die aktuelle Zelle geaendert hat
   virtual void onChangedCell(int old_col, int new_col, int old_row, int new_row);

   // Wird aufgerufen, wenn eine Zelle angeklickt wurde
   virtual void onClickCell(int col, int row, const cwCmdMouse& cmd);
   // Wird aufgerufen, wenn ein Spaltenkopf angeklickt wurde
   virtual void onClickColumnHead(int col, int row, const cwCmdMouse& cmd);
   // Wird aufgerufen, wenn ein Zeilenkopf angeklickt wurde
   virtual void onClickRowHead(int col, int row, const cwCmdMouse& cmd);
   // Wird aufgerufen, wenn die linke obere Ecke angeklickt wurde
   virtual void onClickCorner(const cwCmdMouse& cmd);


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, wenn ein Element selektiert wurde
   void onSelectionChanged(cwListElem *elem);
   // Wird aufgerufen, wenn Enter gedrueckt wurde oder bei Doppelklick
   void onListElemSelected(cwListElem *elem);

   // Wird aufgrufen, um die Anzahl der selektierten Elemente zu ermitteln
   int onGetSelectedElemCount(bool walk) const;
   // Wird aufgerufen, um die selektierten Elemente zu ermitteln
   cwListElem *onGetSelectedElem(cwListElem *elem = 0, bool walk = false) const;
   // Wird aufgerufen, um die Selektion fuer ein einzelnes Element zu aendern
   bool onSelectElem(cwListElem *elem, bool sel);
   // Wird aufgerufen, um die Selektion fuer alle Elemente zu aendern
   bool onSelectAllElems(bool sel, cwListElem *parent, bool walk);

   // Wird aufgerufen, um das Element mit Cursor zu erfragen
   cwListElem *onGetCursoredElem() const;
   // Wird aufgerufen, um den Cursor auf ein Element zu setzen
   bool onSetCursoredElem(cwListElem *elem);

   // Wird aufgerufen, um ein Element an Position 'pos', 'ref_elem' anzuzeigen
   bool onInsertElemAt(int pos, cwListElem *ref_elem, cwListElem *new_elem, cwListElem *parent, bool invd);
   // Wird aufgerufen, um ein Element von der Anzeige zu entfernen
   bool onRemoveElem(cwListElem *elem, bool invd);
   // Wird aufgerufen, um alle Elemente von der Anzeige zu entfernen
   bool onRemoveAllElems(cwListElem *parent, bool invd);

   // Wird aufgerufen, um ein Element ueber dessen Index zu ermitteln
   cwListElem * onGetElemWithIndex(int idx) const;

   // Wird aufgerufen, wenn die Abfrage gestartet wurde, um den Listeninhalt zu loeschen
   bool onQueryStarted(csQuery *query);
   // Wird aufgerufen, wenn die Abfrage beendet ist, um die Selektion anzeigen
   bool onQueryEnded(csQuery *query);

   // Wird aufgerufen, um zu erfragen, ob mehrere Zeilen pro Datensatz unterstuetzt werden
   bool onAllowsMultipleRows() const;
   // Wird aufgerufen, wenn sich die Spalten- oder Zeilenzahl (pro DS) geaendert hat
   void onSetupRowCol(const SETUP_ROWCOL_INFO& info);
   // Wird aufgerufen, um in Spalte das Feld 'fld' zur Anzeige vorzubereiten
   void onSetupField(int fld, const SETUP_FIELD_INFO& info);

   // Wird aufgerufen, um die durch 'mask' spezifizierten Window-Styles zu ermitteln
   int onGetStyles(int mask) const;
   // Wird aufgerufen, um Window-Styles zu setzen (add) und zu entfernen (remove)
   void onModifyStyles(int add, int remove, int os_add[], int os_remove[]);

   // Attach mit Wrapper-Objekt durchfuehren
   void onAttach(int id, void *wnd);


protected:

   // Interner Konstruktor
   cwGrid(void *wnd);


private:

   // Intern: Eigene Styles
   int own_style;

   // Intern: Initialisierung
   void init();

   // Intern: 'n' Zeilen zum Grid hinzufuegen
   bool appendRows(int n);
   // Intern: 'n' Zeilen vor Zeile 'before_row' in das Grid einfuegen
   bool insertRows(int n, int before_row);
   // Intern: 'n' Zeilen beginnend mit Zeile 'from_row' loeschen
   bool removeRows(int n, int from_row);
   // Intern: Joins fuer Element an Position 'idx' einstellen
   void setupJoins(int idx);

   // Intern: Spalte(n) markieren
   void selectCols(int from_col, int to_col);
   // Intern: Zeile(n) markieren
   void selectRows(int from_row, int to_row);
   // Intern: Bereich markieren
   void selectArea(int from_col, int to_col, int from_row, int to_row);
   // Intern: Selektion loeschen
   void clearSelection();

};


#endif

/*.EH.*/
