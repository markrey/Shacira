/*.SH.*/

/*
 *  Headerfile for module ew_dragdrop
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_dragdrop.cpp on Wednesday November 07 2001  14:34:06
 */

#ifndef __ew_dragdrop__
#define __ew_dragdrop__


// Headerfiles
// ===========================================================================

#include "base/eb_clip.hpp"
#include "win/ew_windows.hpp"


// ===========================================================================
// Definition cwDragDrop
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwDragDrop
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwDragDrop : public cBase {
   friend class ccwDragDrop;

public:

   // Destruktor
   virtual ~cwDragDrop();


protected:

   void *_dd;       // Zeiger auf Wrapper-Objekt


   // ECL/win Internas
   // ================

   // Interner Konstruktor
   cwDragDrop(void *dd);

   // Trennen vom Wrapper
   void __disconnect();
   // Eigenen Zeiger auf Wrapper-Objekt ermitteln (non-const)
   void *__getDD();
   // Eigenen Zeiger auf Wrapper-Objekt ermitteln (const)
   const void *__getDD() const;
   // Zeiger auf Wrapper-Objekt ermitteln (statisch, non-const Variante)
   static void *__getDD(cwDragDrop *other);
   // Zeiger auf Wrapper-Objekt ermitteln (statisch, const Variante)
   static const void *__getDD(const cwDragDrop *other);

};


// ===========================================================================
// Definition cwDragSource
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwDragDrop
//      +--cwDragSource
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwDragSource : public cwDragDrop {
   friend class ccwDragSource;

public:

   // Konstruktor
   inline cwDragSource() : cwDragDrop(0) { init(); }
   // Destruktor
   ~cwDragSource();

   // Inhalt der DragSource loeschen
   void empty();
   // Daten in DragSource schreiben (empty_ds = true, DS wird vorher geleert)
   bool setData(const cClipboardData& data, bool empty_ds = true);

   // Drag-Operation starten; kehrt erst nach Beendigung oder Abbruch wieder zurueck.
   // Liefert die tatsaechlich ausgefuehrte Operation zurueck (oder opNone)
   cwCmdDrop::DROP_OP doDrag(int source_ops = cwCmdDrop::mayBeAny);


private:

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwDropTarget
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwDragDrop
//      +--cwDropTarget
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwDropTarget : public cwDragDrop {
   friend class ccwDropTarget;

public:

   // Konstruktor
   inline cwDropTarget() : cwDragDrop(0) { init(); }
   // Destruktor
   ~cwDropTarget();


   // Allgemeines
   // ===========

   // Window mit DropTarget registrieren
   bool registerWindow(cwWindow *win);
   // Window bei DropTarget deregistrieren
   bool deregisterWindow(cwWindow *win);


protected:

   // Hinzugefuegte Events
   // ====================

   // Wird aufgerufen, wenn eine Drag-Operation ein registriertes Fenster erreicht
   virtual bool onDragEnter(cwCmdDrag& cmd);
   // Wird aufgerufen, wenn eine Drag-Operation ueber einem registrierten Fenster ablaeuft
   virtual bool onDragOver(cwCmdDrag& cmd);
   // Wird aufgerufen, wenn eine Drag-Scroll-Operation ueber einem registrierten Fenster ablaeuft
   virtual bool onDragScroll(cwCmdDrag& cmd);
   // Wird aufgerufen, wenn eine Drag-Operation ein registriertes Fenster verlaesst
   virtual bool onDragLeave();
   // Wird aufgerufen, wenn ein Drop ueber einem registrierten Fenster veranlasst wurde
   virtual bool onDrop(cwCmdDrop& cmd);


private:

   // Initialisierung
   void init();

};


#endif

/*.EH.*/
