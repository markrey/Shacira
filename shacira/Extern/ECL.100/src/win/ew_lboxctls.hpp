/*.SH.*/

/*
 *  Headerfile for module ew_lboxctls
 *
 *  Generated by C-Head Version 1.3
 *  (c) 1993 by 2i Industrial Informatics GmbH
 *
 *  This file has been extracted from the source file
 *  ew_lboxctls.cpp on Sunday February 10 2002  11:56:56
 */

#ifndef __ew_lboxctls__
#define __ew_lboxctls__


// Headerfiles
// ===========================================================================

#include "win/ew_listctls.hpp"


// ===========================================================================
// Definition cwListBox
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwListCtl
//              +--cwListBox
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwListBox : public cwListCtl {
   ELO_DECLARE(cwListBox,cwListCtl)
   friend class ccwListBox;

public:

   // Konstruktor
   inline cwListBox() : cwListCtl(0) { init(); }
   // Destruktor
   virtual ~cwListBox();


   // window-Styles
   // =============

   // Styles
   enum STYLES { wsStart = cwListCtl::wsUser,
      wsLbxSingleSel    = wsStart << 0,   // Maximal 1 selektiertes Element
      wsLbxMultipleSel  = wsStart << 1,   // Mehrere selektierte Elemente
      wsLbxExtendedSel  = wsStart << 2,   // Auswahl erweitern mit SHIFT
      wsUser            = wsStart << 3    // Benutzerdefinierte Styles
   };


   // Allgemeines
   // ===========

   // Erzeugen des Controls
   void create(cwWindow *parent, int id, csStorage *store = 0, csQuery *query = 0,
               int style = wsChild | wsVisible | wsBorder, const cdRect& rect = cdRect());


protected:

   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, wenn ein Element selektiert wurde
   void onSelectionChanged(cwListElem *elem);
   // Wird aufgerufen, wenn Enter gedrueckt wurde oder bei Doppelklick
   void onListElemSelected(cwListElem *elem);

   // Wird aufgrufen, um die Anzahl der selektierten Elemente zu ermitteln
   int onGetSelectedElemCount(bool walk) const;
   // Wird aufgerufen, um die selektierten Elemente zu ermitteln
   cwListElem *onGetSelectedElem(cwListElem *elem = 0, bool walk = false) const;
   // Wird aufgerufen, um die Selektion fuer ein einzelnes Element zu aendern
   bool onSelectElem(cwListElem *elem, bool sel);
   // Wird aufgerufen, um die Selektion fuer alle Elemente zu aendern
   bool onSelectAllElems(bool sel, cwListElem *parent, bool walk);

   // Wird aufgerufen, um das Element mit Cursor zu erfragen
   cwListElem *onGetCursoredElem() const;
   // Wird aufgerufen, um den Cursor auf ein Element zu setzen
   bool onSetCursoredElem(cwListElem *elem);

   // Wird aufgerufen, um ein Element an Position 'pos', 'ref_elem' anzuzeigen
   bool onInsertElemAt(int pos, cwListElem *ref_elem, cwListElem *new_elem, cwListElem *parent, bool invd);
   // Wird aufgerufen, um ein Element von der Anzeige zu entfernen
   bool onRemoveElem(cwListElem *elem, bool invd);
   // Wird aufgerufen, um alle Elemente von der Anzeige zu entfernen
   bool onRemoveAllElems(cwListElem *parent, bool invd);

   // Wird aufgerufen, wenn die Abfrage gestartet wurde, um den Listeninhalt zu loeschen
   bool onQueryStarted(csQuery *query);
   // Wird aufgerufen, wenn die Abfrage beendet ist, um die Selektion anzeigen
   bool onQueryEnded(csQuery *query);

   // Wird aufgerufen, um die durch 'mask' spezifizierten Window-Styles zu ermitteln
   int onGetStyles(int mask) const;
   // Wird aufgerufen, um die OS-spezifischen Styles aus den ECL-Styles zu ermitteln
   void onMakeStyles(int styles, int os_styles[]) const;
   // Wird aufgerufen, um Window-Styles zu setzen (add) und zu entfernen (remove)
   void onModifyStyles(int add, int remove, int os_add[], int os_remove[]);


protected:

   // Interner Konstruktor
   cwListBox(void *wnd);

private:

   // Initialisierung
   void init();

};


// ===========================================================================
// Definition cwSetBox
// ---------------------------------------------------------------------------
//
// Die Set-Box dient der Darstellung einer Menge von Elementen, von denen
// jedes ueber einen Ein-Zeichen-Schluessel identifiziert wird. Der Benutzer
// kann keines, eines oder mehrere der Elemente auswaehlen. Die Auswahl wird
// in einer String-Storage abgelegt, wobei die Key-Zeichen aller vorkommenden
// Elemente in den String aufgenommen werden. Beispiel:
//
//   Key | Element         Set-String | Bedeutung
//   ----+---------        -----------+------------------
//    L  | Lenkrad          ""        | Leere Menge
//    H  | Hupe             "H"       | Ein Element: Hupe
//    S  | Sitz             "LSH"     | Alle Elemente
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwListCtl
//              +--cwListBox
//                  +--cwSetBox
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwSetBox : public cwListBox {
   ELO_DECLARE(cwSetBox,cwListBox)

public:

   // Konstruktor
   inline cwSetBox() : cwListBox(0) { init(); }
   // Destruktor
   virtual ~cwSetBox();


   // Allgemeines
   // ===========

   // Erzeugen des Controls
   void create(cwWindow *parent, int id, csStorage *store = 0, csQuery *query = 0,
               int style = wsChild | wsVisible | wsBorder, const cdRect& rect = cdRect());


protected:

   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, wenn Fenster den Focus verliert
   void onLoseFocus();

   // Wird aufgerufen, wenn ein Element selektiert wurde
   void onSelectionChanged(cwListElem *elem);
   // Wird aufgerufen, wenn Enter gedrueckt wurde oder bei Doppelklick
   void onListElemSelected(cwListElem *elem);

   // Wird aufgerufen, wenn sich das gebundene Datenobjekt geaendert hat
   void onEventModified();
   // Wird aufgerufen, wenn die Abfrage beendet ist, um die Selektion anzeigen
   bool onQueryEnded(csQuery *query);

   // Daten des Controls pruefen
   DATAERR onCheckCtl(csStorage *store);
   // Daten des Controls speichern
   DATAERR onStoreCtl(csStorage *store);


protected:

   // Interner Konstruktor
   cwSetBox(void *wnd);


private:

   // Initialisierung
   void init();

   // Intern: Menge (String) in Markierung wandeln
   void transferToControl(cString value);
   // Intern: Markierung in Menge (String) wandeln
   cString transferToString();

};


// ===========================================================================
// Definition cwComboBox
// ---------------------------------------------------------------------------
//
// Eine Combobox wird technisch als 2 verschiedene Fenster behandelt:
//
//  +----------+--+   +==========+--+   +----------+--+
//  |          |  |   |          |  |   |          |  |
//  +----------+--+   +==========+--+   +=============+
//  |             |   |             |   |             |
//  |             | = |             | + |             |
//  |             |   |             |   |             |
//  |             |   |             |   |             |
//  |             |   |             |   |             |
//  +-------------+   +-------------+   +=============+
//                       EditField          ListBox
//
// Das ListBox-Fenster wird nur bei Bedarf geoeffnet. Die cwComboBox-Klasse
// wird intern analog zu einer cwListBox mit wsLbxSingleSel verwaltet. Das
// EditField-"Anhaengsel" stellt die wichtigsten Funktionen der cwEditField-
// Klasse zur Verfuegung.
//
// Dieses Control unterstuetzt die Anzeige eines "ererbten Werten", der ueber
// die SetInheritedValue()-Methode gesetzt werden kann.
//
// Der Inhalt der Listbox wird beim ersten Anzeigen derselben geladen, solange
// der Style 'wsLoadOnInit' nicht gesetzt ist.
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwListCtl
//              +--cwComboBox
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwComboBox : public cwListCtl {
   ELO_DECLARE(cwComboBox,cwListCtl)
   friend class ccwComboBox;

public:

   // Konstruktor
   inline cwComboBox() : cwListCtl(0) { init(); }
   // Destruktor
   virtual ~cwComboBox();


   // Events
   // ======

   // Event-IDs dieser Klasse
   enum EVENTS { evtFirst = cwListCtl::evtUser,
     evtDropDown,                      // (EVFUNC)    Vor Aufklappen der Listbox
     evtCloseUp,                       // (EVFUNC)    Nach Zuklappen der Listbox
     evtUser                           // Benutzerdefinierte Events
   };


   // window-Flags
   // ============

   enum FLAGS { wflStart = cwListCtl::wflUser,
      wflDelayRequery   = wflStart << 0,  // Verzoegertes Nachladen?
      wflDelayActive    = wflStart << 1,  // Verzoegertes Requery aktiv?
      wflUser           = wflStart << 2   // Benutzerdefinierte Flags
   };


   // window-Styles
   // =============

   // Styles
   enum STYLES { wsStart = cwListCtl::wsUser,
      wsCbxStaticField  = wsStart << 0,   // Combobox mit statischem Feld
      wsCbxEditField    = wsStart << 1,   // Combobox mit Eingabefeld
      wsDelayRequery    = wsStart << 2,   // Verzoegertes Nachladen (Default bei DB-Queries)
      wsUser            = wsStart << 3    // Benutzerdefinierte Styles
   };


   // Allgemeines
   // ===========

   // Erzeugen des Controls
   void create(cwWindow *parent, int id, csStorage *store = 0, csQuery *query = 0,
               int style = wsChild | wsVisible | wsBorder,
               const cdRect& rect = cdRect());


   // ListBox
   // =======

   // Anzahl darzustellender Element in der ListBox
   int getListElemCount() const
      { return onGetListElemCount(); }
   // ListBox anzeigen bzw. wegnehmen
   void showList(bool show = true);
   // Wird ListBox gerade angezeigt?
   bool isListShowing() const;


protected:

   // Zusaetzliche Events
   // ===================

   // Wird aufgerufen, bevor die Drop-Down-Liste aufgeklappt wird
   virtual void onDropDown();
   // Wird aufgerufen, nachdem die Drop-Down-Liste wieder zugeklappt wurde
   virtual void onCloseUp();
   // Anzahl darzustellender Zeilen in der ListBox
   virtual int onGetListElemCount() const;


   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, wenn ein Element selektiert wurde
   void onSelectionChanged(cwListElem *elem);
   // Wird aufgerufen, wenn Enter gedrueckt wurde oder bei Doppelklick
   void onListElemSelected(cwListElem *elem);

   // Wird aufgerufen, um den Default-Text bei NULL-Werten zu ermitteln
   cString onGetNullText();

   // Wird aufgrufen, um die Anzahl der selektierten Elemente zu ermitteln
   int onGetSelectedElemCount(bool walk) const;
   // Wird aufgerufen, um die selektierten Elemente zu ermitteln
   cwListElem *onGetSelectedElem(cwListElem *elem = 0, bool walk = false) const;

   // Wird aufgerufen, um die Selektion fuer ein einzelnes Element zu aendern
   bool onSelectElem(cwListElem *elem, bool sel);
   // Wird aufgerufen, um die Selektion fuer alle Elemente zu aendern
   bool onSelectAllElems(bool sel, cwListElem *parent, bool walk);

   // Wird aufgerufen, um das Element mit Cursor zu erfragen
   cwListElem *onGetCursoredElem() const;
   // Wird aufgerufen, um den Cursor auf ein Element zu setzen
   bool onSetCursoredElem(cwListElem *elem);

   // Wird aufgerufen, um ein Element an Position 'pos', 'ref_elem' anzuzeigen
   bool onInsertElemAt(int pos, cwListElem *ref_elem, cwListElem *new_elem, cwListElem *parent, bool invd);
   // Wird aufgerufen, um ein Element von der Anzeige zu entfernen
   bool onRemoveElem(cwListElem *elem, bool invd);
   // Wird aufgerufen, um alle Elemente von der Anzeige zu entfernen
   bool onRemoveAllElems(cwListElem *parent, bool invd);

   // Wird aufgerufen, um den aktuellen ererbten Wert anzuzeigen
   void onShowInheritedVal();
   // Wird aufgerufen, um die Anzeige des ererbten Wertes zu beenden
   void onHideInheritedVal();

   // Wird aufgerufen, nachdem das Query-Objekt gesetzt wurde
   void onSetQuery(csQuery *query);
   // Abfrage des Controls erneut durchfuehren
   bool onRequeryCtl(csQuery *query);

   // Wird aufgerufen, wenn die Abfrage gestartet wurde, um den Listeninhalt zu loeschen
   bool onQueryStarted(csQuery *query);
   // Wird aufgerufen, wenn die Abfrage beendet ist, um die Selektion anzeigen
   bool onQueryEnded(csQuery *query);

   // Wird aufgerufen, um die durch 'mask' spezifizierten Window-Styles zu ermitteln
   int onGetStyles(int mask) const;
   // Wird aufgerufen, um die OS-spezifischen Styles aus den ECL-Styles zu ermitteln
   void onMakeStyles(int styles, int os_styles[]) const;
   // Wird aufgerufen, um Window-Styles zu setzen (add) und zu entfernen (remove)
   void onModifyStyles(int add, int remove, int os_add[], int os_remove[]);


protected:

   // Interner Konstruktor
   cwComboBox(void *wnd);

private:

   // Initialisierung
   void init();

   // Intern: Wird fuer die Erstinitialisierung der ComboBox aufgerufen
   int onRefreshRequery(void *p1, int p2);

};


// ===========================================================================
// Definition cwMultiComboBox
// ---------------------------------------------------------------------------
//
// cBase
//  +--cwWindow
//      +--cwControl
//          +--cwListCtl
//              +--cwComboBox
//                  +--cwMultiComboBox
//
// ===========================================================================

class __ECL_DLLEXPORT__ cwMultiComboBox : public cwComboBox {
   ELO_DECLARE(cwMultiComboBox,cwComboBox)

public:

   // Konstruktor
   inline cwMultiComboBox() : cwComboBox(0) { init(); }
   // Destruktor
   virtual ~cwMultiComboBox();

   // Hauptspalte setzen (diese wird im Edit-Field angezeigt)
   inline void setMasterColumn(int col)
      { master_column = col; }
   // Hauptspalte erfragen
   inline int getMasterColumn() const
      { return master_column; }


protected:

   // Ueberschriebene Events
   // ======================

   // Wird aufgerufen, um ein Element an Position 'pos', 'ref_elem' anzuzeigen
   bool onInsertElemAt(int pos, cwListElem *ref_elem, cwListElem *new_elem, cwListElem *parent, bool invd);
   // Wird aufgerufen, wenn sich die Spalten- oder Zeilenzahl (pro DS) geaendert hat
   void onSetupRowCol(const SETUP_ROWCOL_INFO& info);
   // Wird aufgerufen, um in Spalte das Feld 'fld' zur Anzeige vorzubereiten
   void onSetupField(int fld, const SETUP_FIELD_INFO& info);


protected:

   // Interner Konstruktor
   cwMultiComboBox(void *wnd);

private:

   // Hauptspalte
   int master_column;

   // Zusaetzliche Daten
   struct ADD_INFO;
   ADD_INFO *add_info;

   // Initialisierung
   void init();

};


#endif

/*.EH.*/
