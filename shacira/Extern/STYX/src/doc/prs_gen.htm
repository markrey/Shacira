<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"         "http://www.w3.org/TR/REC-html40/Transitional.dtd">
<html>
<head>
<title>[prs_gen.h] LALR(1) Parser Generator</title>
<meta name="robots" content="noindex">
</head>
<body bgcolor=white>
<h1><font color="#008B8B">[prs_gen.h] LALR(1) Parser Generator</font></h1>
<h2><font color="#008B8B"><a href="styx.html">contents</a></font></h2><br>
<br><a href="prs_dfn.htm">#include "prs_dfn.h"</a>
<br>
<br>
<br>
<br>
  <p>The module [prs_gen] performs two main tasks.

  <p>1) A set of functions will be used to dynamically create a BNF-like context
        free grammar definition. ( reentrant )
        <br>It is possible to define multiple startsymbols and comment tokens.

  <p>2) The latter function create the corresponding parse table and nonterminal
        classes.
        The parse table is the input for the <a href="prs.htm">parse function</a>.
        <br>This creation process is not reentrant. You must synchronize the access
        to the function within threads.


<br><pre>
  The following rules define the abstract syntax. On this base the nonterminal
  classes are created.

  A) well-formed productions:
  1. let X :nil  :            &lt;0 members&gt;
  2. let X :cons : Y Z        &lt;2 members: Y = member && Z = nonterminal&gt;
  3. let X :ign#*: Y          &lt;1 nonterminal&gt;
  4. let X :name : X1 .. Xn   &lt;n &gt;= 0 && name =/= { ign#, nil, cons }&gt;

  B) construction of the token/nonterminal classes:
  1. X &lt;=&gt; X                          reflexiv
  2. X &lt;=&gt; Y --&gt; Y &lt;=&gt; X              symmetric
  3. X &lt;=&gt; Y && Y &lt;=&gt; Z --&gt; X &lt;=&gt; Z   transitiv
  4. let X :ign1: Y   --&gt; X &lt;=&gt; Y
  5. let X :cons: Y Z --&gt; X &lt;=&gt; Z
  6. X &lt;=&gt; Y && let X :idx: X1 .. Xn && let Y :idy: Y1 .. Ym && idx = idy
     --&gt; n = m && forall i, 1 &lt;= i &lt;= n: Type(Xi) = Type(Yi) && Xi &lt;=&gt; Yi,
                                         where Type(Z) = { token, nonterminal }
  7. all tokens are equivalent.

  C) token/nonterminal classes:
     [X] = { Y | Y &lt;=&gt; X }
     class representants:
     - tokens:       "Tok"
     - startsymbols: language name
     - nonterminals: less nonterminal name according the lexical order

  D) correctness:
  1. X &lt;=&gt; Y --&gt; Type(X) = Type(Y), where Type(Z) = { token, nonterminal }
  2. let X^ :id: a && let X^ :id: b --&gt; a &lt;=&gt; b
  3. let X^ :nil: a || let X^ :cons: b
     --&gt; not exists P: P = let X^ :id: c && id =/= { ign1, nil, cons }
  [ 1,2: checked during construction ]

  E) abstract context free grammar:
     NT |--&gt; NT^
     T  |--&gt; T^ ( NT^ T^ are the class representants )

     for all "normal" productions there will be one interface function
     of type 'bool' which returns whether the argument term represents
     a production of this kind and in the positive case all required members.

</pre>
<br><hr width="100%" size=2><h2><b> Types </b></h2>
<br>
<table border=0 cellspacing=10>
<TR valign=top>
<td align=left><b>PLR_Cfg</b>
<td align=left> Abstract context free grammar type 

</table>
<br><hr width="100%" size=2><h2><b> Grammar definition </b></h2>
<table border=0 cellspacing=20>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>PLR_Cfg <b>PLR_createCfg</b>(c_string Language)</pre>
<td bgcolor="#FFF0F5" align=left> creates a context free grammar definition named 'Language' <br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>int <b>PLR_addTK</b>(PLR_Cfg Cfg, c_string Token, int kind)</pre>
<td bgcolor="#FFF0F5" align=left> adds token 'Token' of type 'kind'<br>
   ( token or keyword, see [cfg_dfn] )<br>
   to definition 'Cfg'<br>
<br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>int <b>PLR_addNT</b>(PLR_Cfg Cfg, c_string NonTerm, c_bool catchError)</pre>
<td bgcolor="#FFF0F5" align=left> adds nonterminal 'NonTerm' to definition 'Cfg'<br>
   catchError --&gt; use 'NonTerm' as reparse point<br>
<br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>void <b>PLR_endSD</b>(PLR_Cfg Cfg)</pre>
<td bgcolor="#FFF0F5" align=left> symbol definition end;<br>
   completes token and nonterminal definition<br>
<br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>int <b>PLR_addSN</b>(PLR_Cfg Cfg, c_string StartNt)</pre>
<td bgcolor="#FFF0F5" align=left> adds startsymbol 'StartNt' to definition 'Cfg' <br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>int <b>PLR_addST</b>(PLR_Cfg Cfg, c_string SpecTk)</pre>
<td bgcolor="#FFF0F5" align=left> marks 'SpecTk' as special comment token <br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>int <b>PLR_addPR</b>(PLR_Cfg Cfg, c_string PName, int Method, c_string NonTerm)</pre>
<td bgcolor="#FFF0F5" align=left> adds production 'NonTerm'::'PName' with layout hint 'Method'<br>
   ( default=0, see [prs_dfn] ) to definition 'Cfg'<br>
<br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>int <b>PLR_addPT</b>(PLR_Cfg Cfg, c_string Token, long sRow, long sCol)</pre>
<td bgcolor="#FFF0F5" align=left> adds token 'Token' to current production of definition 'Cfg';<br>
   The symbol position 'sRow', 'sCol' is used as layout hint.<br>
<br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>int <b>PLR_addPK</b>(PLR_Cfg Cfg, c_string Keyword, long sRow, long sCol)</pre>
<td bgcolor="#FFF0F5" align=left> adds keyword 'Keyword' to current production of definition 'Cfg';<br>
   The symbol position 'sRow', 'sCol' is used as layout hint.<br>
<br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>int <b>PLR_addPN</b>(PLR_Cfg Cfg, c_string NonTerm, long sRow, long sCol)</pre>
<td bgcolor="#FFF0F5" align=left> adds nonterminal 'NonTerm' to current production of definition 'Cfg';<br>
   The symbol position 'sRow', 'sCol' is used as layout hint.<br>
<br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>void <b>PLR_delCfg</b>(PLR_Cfg Cfg)</pre>
<td bgcolor="#FFF0F5" align=left>removes grammar definition 'Cfg'

</table>
<br><hr width="100%" size=2><h2><b> Parse table creation </b></h2>
<table border=0 cellspacing=20>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>PLR_Tab <b>PLR_createTab</b>(PLR_Cfg Cfg, c_bool verbose, c_bool diagnose)</pre>
<td bgcolor="#FFF0F5" align=left> creates the corresponding parse table for definition 'Cfg'<br>
   'verbose'  --&gt; entertainment<br>
   'diagnose' --&gt; print conflict / result informations<br>
<br>
<tr valign=top>
<td bgcolor="#FFF8DC" align=left><pre>PLR_Tab <b>PLR_createTab_ex</b>
        (
          PLR_Cfg Cfg, void (*prMsg)(c_string msg), c_bool verbose, c_bool diagnose
        )</pre>
<td bgcolor="#FFF0F5" align=left> like PLR_createTab;<br>
   uses 'prMsg' as print function<br>
<br>

</table>

</body>
</html>
