<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"         "http://www.w3.org/TR/REC-html40/Transitional.dtd">
<html>
<head>
<title>[prs_imp.h] LALR(1) Parser/Generator: implementation types</title>
<meta name="robots" content="noindex">
</head>
<body bgcolor=white>
<h1><font color="#008B8B">[prs_imp.h] LALR(1) Parser/Generator: implementation types</font></h1>
<h2><font color="#008B8B"><a href="styx.html">contents</a></font></h2><br>
<pre></pre><br><a href="standard.htm">#include "standard.h"</a>
<br>
<pre></pre><pre>/*</pre><pre>  Implementation of grammar symbols</pre><pre></pre><pre>  Each grammar symbol is numbered uniquely in the following order:</pre><pre>    token, nonterminal - starting with 0.</pre><pre>  The first startsymbol refers to the whole grammar.</pre><pre>*/</pre><pre></pre><pre>typedef struct _KFGHEAD {</pre><pre>/* Grammar header */</pre><pre>  c_string  language; /* Language short name                */</pre><pre>                      /* ( Prefix for code generation )     */</pre><pre>  int       TkCnt;    /* Number of tokens                   */</pre><pre>  int       NtCnt;    /* Number of nonterminals             */</pre><pre>  c_string* SNames;   /* Token and nonterminal names        */</pre><pre>  int       StartCnt; /* Number of startsymbols             */</pre><pre>  int*      StartIds; /* Indexes of startsymbols            */</pre><pre>                      /* ( 1. index : CFG startsymbol )     */</pre><pre>  int*      TokKind;  /* Token types                        */</pre><pre>  int*      NtClass;  /* Nonterminal Classes ( Indexes )    */</pre><pre>  c_bool*   ErrorNt;  /* ErrorNt[NTIndex] --&gt; Reparse Point */</pre><pre>} KFGHEAD;</pre><pre></pre><pre>typedef struct _KFGPROD {</pre><pre>/* Production */</pre><pre>  c_string pname;   /* Production name                            */</pre><pre>  int      method;  /* Production layout hint                     */</pre><pre>  int      id;      /* Nonterminal ( left production side )       */</pre><pre>  int      symcnt;  /* Number of production symbols               */</pre><pre>  int*     symbols; /* Production symbols ( Token, Nonterminals ) */</pre><pre>  int*     symfrms; /* Production symbol layout hints             */</pre><pre>                    /* ( != 0 ==&gt; new line )                      */</pre><pre>} KFGPROD;</pre><pre></pre><pre>typedef struct _LALR_1 {</pre><pre>/* LALR(1) syntax analysis tables */</pre><pre>  int  MstShiftCnt; /* Number of MstShift's */</pre><pre>  int* MstShift;    /* Master shift table   */</pre><pre>  int  DtlShiftCnt; /* Number of DtlShift's */</pre><pre>  int* DtlShift;    /* Detail shift table   */</pre><pre>  int  GoToCnt;     /* Number of GoTo's     */</pre><pre>  int* GoTo;        /* GoTo table           */</pre><pre>  int  GoToDftCnt;  /* Number of GoToDft's  */</pre><pre>  int* GoToDft;     /* Default GoTo table   */</pre><pre>  int  ActDftCnt;   /* Number of ActDft's   */</pre><pre>  int* ActDft;      /* Default action table */</pre><pre>  int  ActExpCnt;   /* Number of ActExp's   */</pre><pre>  int* ActExp;      /* Execpetion table     */</pre><pre>} LALR_1;</pre><pre></pre><pre>typedef struct _PARSETAB {</pre><pre>/* Parse table */</pre><pre>  KFGHEAD* Kfg;     /* Grammar header                        */</pre><pre>  int      ProdCnt; /* Number of nonterminals                */</pre><pre>                    /* with productions, used for reductions */</pre><pre>  KFGPROD* Prod;    /* Productions                           */</pre><pre>  LALR_1   tabs;    /* LALR(1) syntax analysis tables        */</pre><pre>} PARSETAB;</pre><pre></pre><pre>#define PLR_T_IMP(ptab) ( (PARSETAB*)(ptab) )</pre><pre></pre><pre>#endif</pre>
</body>
</html>
